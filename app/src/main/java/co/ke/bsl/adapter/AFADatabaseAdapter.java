package co.ke.bsl.adapter;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import co.ke.bsl.data.model.CoffeeCommercialMarketingAgent;
import co.ke.bsl.data.model.CoffeeExporterDealerInspection;
import co.ke.bsl.data.model.CoffeeGrowerMarketingAgent;
import co.ke.bsl.data.model.CoffeeMillerLicenceApplication;
import co.ke.bsl.data.model.CoffeeManagementAgent;
import co.ke.bsl.data.model.CoffeeNurseryCert;
import co.ke.bsl.data.model.CoffeePulpingStationPSL;
import co.ke.bsl.data.model.FCDCottonLintClassingReport;
import co.ke.bsl.data.model.FoodCrop;
import co.ke.bsl.data.model.FoodProcessing;
import co.ke.bsl.data.model.FoodWarehouse;
import co.ke.bsl.data.model.HCDColdRoomTemperatures;
import co.ke.bsl.data.model.HorticulturalFlowerExportersDeskVetting;
import co.ke.bsl.data.model.HorticultureCropExportLicenceFarmInspection;
import co.ke.bsl.data.model.HorticultureProduceTransportation;
import co.ke.bsl.data.model.FCDCottonBuyingStoreInspection;
import co.ke.bsl.data.model.FCDCottonGinneryInspection;
import co.ke.bsl.data.model.FCDSisalFactoryInspection;
import co.ke.bsl.data.model.FCDSisalSpinningFactoryInspection;
import co.ke.bsl.data.model.FruitVegetableConsolidators;
import co.ke.bsl.data.model.FruitsVegetablesExportersDeskVetting;
import co.ke.bsl.data.model.HCDAvocadoQualityInspection;
import co.ke.bsl.data.model.HCDFlowersConsolidators;
import co.ke.bsl.data.model.HCDMangoQualityInspection;
import co.ke.bsl.data.model.HCDNurseryInspection;
import co.ke.bsl.data.model.HCDParkhouseWarehouse;
import co.ke.bsl.data.model.HCDPersonalHygene;
import co.ke.bsl.data.model.PulpingStationLicenseApplication;
import co.ke.bsl.data.model.PyrethrumInspection;
import co.ke.bsl.data.model.SugarMillLicence;
import co.ke.bsl.data.model.TeaBuyerImporterExporter;
import co.ke.bsl.data.model.TeaWarehouseManInspection;
import co.ke.bsl.data.model.TeaPacker;
import co.ke.bsl.db.DatabaseHelper;
import co.ke.bsl.pojo.ADUser;
import co.ke.bsl.pojo.AvocadoQualityInspection;
import co.ke.bsl.pojo.AvocadoQualityInspectionOilContent;
import co.ke.bsl.pojo.CBPartner;
import co.ke.bsl.pojo.CaneCensusCropDetails;
import co.ke.bsl.pojo.CaneCensusDataCollection;
import co.ke.bsl.pojo.CaneCensusFarmer;
import co.ke.bsl.pojo.City;
import co.ke.bsl.pojo.CoffeeCommercialAgent;
import co.ke.bsl.pojo.CoffeeExporterDealerInspectionDetails;
import co.ke.bsl.pojo.CoffeeGrowerMarketingAgentDetails;
import co.ke.bsl.pojo.CoffeeMillerLicenceApplicationDetails;
import co.ke.bsl.pojo.CoffeeManagementAgentInsp;
import co.ke.bsl.pojo.CoffeeMillingTariffs;
import co.ke.bsl.pojo.CoffeeNursercertInsp;
import co.ke.bsl.pojo.CoffeePulpinglicenceApllPSL;
import co.ke.bsl.pojo.CottonBuyingStoreInspection;
import co.ke.bsl.pojo.CottonGinneryInspection;
import co.ke.bsl.pojo.CottonLintClassingReport;
import co.ke.bsl.pojo.Country;
import co.ke.bsl.pojo.County;
import co.ke.bsl.pojo.FOodCropInspection;
import co.ke.bsl.pojo.FoodProcessingInpection;
import co.ke.bsl.pojo.FoodWareHouseInspection;
import co.ke.bsl.pojo.HCDParkhouseWarehouseDetails;
import co.ke.bsl.pojo.HorticultureNurseryInspectionDetails;
import co.ke.bsl.pojo.HorticulturalFlowerExportersDeskVettingDetails;
import co.ke.bsl.pojo.HorticultureCropExportLicenceFarmInspectionDetails;
import co.ke.bsl.pojo.HorticultureProduceTransportationDetails;
import co.ke.bsl.pojo.NOCDMarketPriceSurveyDetails;
import co.ke.bsl.pojo.FlowersConsolidators;
import co.ke.bsl.pojo.FruitsAndVegetablesExporters;
import co.ke.bsl.pojo.HCDFruitVegetableConsolidators;
import co.ke.bsl.pojo.HorticulturalCropsColdStorageCharges;
import co.ke.bsl.pojo.HorticulturalCropsColdStorageIn;
import co.ke.bsl.pojo.HorticulturalCropsColdStorageOut;
import co.ke.bsl.pojo.HorticulturalCropsColdStorageRegister;
import co.ke.bsl.pojo.MangoQualityInspection;
import co.ke.bsl.pojo.ParkhouseWarehouse;
import co.ke.bsl.pojo.PayCategory;
import co.ke.bsl.pojo.Product;
import co.ke.bsl.pojo.ProductCategory;
import co.ke.bsl.pojo.PulpingStationLicenseApplicationDetails;
import co.ke.bsl.pojo.PyrethrumInspectionChecklist;
import co.ke.bsl.pojo.RetailLooseSugarPricesRangeImported;
import co.ke.bsl.pojo.RetailLooseSugarPricesRangeLocal;
import co.ke.bsl.pojo.RetailStockedSugarPricesRangeImported;
import co.ke.bsl.pojo.RetailStockedSugarPricesRangeLocal;
import co.ke.bsl.pojo.RetailSugarPricesRangeLocal;
import co.ke.bsl.pojo.Shop;
import co.ke.bsl.pojo.SisalFactoryInspection;
import co.ke.bsl.pojo.SisalSpinningFactoryInspection;
import co.ke.bsl.pojo.SubCounty;
import co.ke.bsl.pojo.SugarMillDetails;
import co.ke.bsl.pojo.TeaBuyerImporterExporterDetails;
import co.ke.bsl.pojo.TeaWarehouseManInspectionDataCollection;
import co.ke.bsl.pojo.TeaPackerChecklist;
import co.ke.bsl.pojo.User;
import co.ke.bsl.pojo.WholeSaleBrandLocal;
import co.ke.bsl.pojo.WholeSaleImportedStockedSugar;
import co.ke.bsl.pojo.WholeSaleImportedSugar;
import co.ke.bsl.pojo.WholeSaleStockedBrandLocal;


public class AFADatabaseAdapter {
    public static final int NAME_COLUMN = 1;
    // Table Names
    public static final String TABLE_login = "login";
    public static final String TABLE_AD_USER = "ad_user";
    public static final String TABLE_city = "city";
    public static final String TABLE_country = "country";
    public static final String TABLE_survey = "survey";
    public static final String TABLE_shop = "shop";
    public static final String TABLE_LOCALBRAND = "local_brand";
    public static final String TABLE_RETAIL_LOCALBRAND = "retail_local_brand";
    public static final String TABLE_LOCAL_IMPORT = "local_import";
    public static final String TABLE_RETAIL_LOOSE_IMPORT = "retail_loose_import";
    public static final String TABLE_RETAIL_LOOSE_BRAND = "retail_loose_brand";
    public static final String TABLE_LOCALBRAND_STOCKED = "local_brand_stocked";
    public static final String TABLE_RETAIL_LOCALBRAND_STOCKED = "retail_local_brand_stocked";
    public static final String TABLE_LOCAL_IMPORT_STOCKED = "local_import_stocked";
    public static final String TABLE_RETAIL_LOCAL_IMPORT_STOCKED = "retail_local_import_stocked";

    public static final String TABLE_AFA_TD_TEAPACKERINSPCKLST = "tea_packer_inspection";


    static final String DATABASE_NAME = "database.afa";
    static final int DATABASE_VERSION = 59;
    private static final String TABLE_Itinenary_meter = "itinenary_meter";
    private static final String TABLE_reading_status = "reading_status";
    private static final String TABLE_reading = "reading";
    // Common column names
    private static final String KEY_ID = "id";
    private static final String KEY_SERVER_ID = "serverId";
    private static final String KEY_CREATED_AT = "created_at";
    private static final String KEY_NAME = "name";
    private static final String KEY_EMAIL = "email";
    private static final String KEY_AD_USER_ID = "ad_user_id";
    private static final String KEY_STATUS = "status";
    private static final String KEY_PASSWORD = "password";
    private static final String KEY_C_BPARTNER_ID = "c_bpartner_id";
    private static final String KEY_C_ACTIVITY_ID = "c_activity_id";

    // SugarMillDetails sugarMillDetails;

    public static final String CREATE_TABLE_USER = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_login + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_NAME + " TEXT," + KEY_PASSWORD + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME" + ")";

    public static final String CREATE_TABLE_ADUSER = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_AD_USER + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_NAME + " TEXT,"
            + KEY_EMAIL + " TEXT,"
            + KEY_AD_USER_ID + " TEXT,"
            + KEY_C_BPARTNER_ID + " TEXT,"
            + KEY_C_ACTIVITY_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME" + ")";
    //Table shop
    private static final String KEY_SHOP_ID = "shop_id";
    private static final String KEY_SURVEY_ID = "afa_sd_sugarprices_survey_id";
    private static final String KEY_SHOPNAME = "name";
    //Table localbrand
    private static final String KEY_BRAND_ID = "local_brand_id";
    private static final String KEY_BRAND_NAME = "brand_name";
    private static final String KEY_PRICE_TWENTY_KG = "twenty_kg";
    private static final String KEY_PRICE_TWENTY__FOUR_KG = "twenty_four_kg";
    private static final String KEY_PRICE_FIFTY_KG = "fifty_kg";

    private static final String KEY_PRICE_ONE_KG = "one_kg";
    private static final String KEY_PRICE_TWO_KG = "two_kg";
    private static final String KEY_PRICE_FIVE_KG = "five_kg";

    private static final String KEY_COUNTRY_ID = "country_id";
    // Table Create Statements
    // Itinerary table create statement
    public static final String CREATE_TABLE_COUNTRY = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_country + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_NAME + " TEXT,"
            + KEY_COUNTRY_ID + " TEXT UNIQUE,"
            + KEY_CREATED_AT
            + " DATETIME" + ")";
    private static final String KEY_CITY_ID = "city_id";
    // Table Create Statements
    // Itinerary table create statement
    public static final String CREATE_TABLE_CITY = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_city + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_NAME + " TEXT UNIQUE,"
            + KEY_CITY_ID + " TEXT UNIQUE,"
            + KEY_CREATED_AT
            + " DATETIME" + ")";
    private static final String KEY_ITINENARY_NUMBER = "itinenary_number";
    private static final String KEY_ITINERARY_MOBILE_ID = "itinenary_mobile_id";
    private static final String KEY_ITINERARY_ID = "ItineraryId";
    private static final String KEY_METER_NUMBER = "meterNumber";
    private static final String KEY_ACCOUNT_NUMBER = "accountNumber";
    private static final String KEY_MIN_LIMIT = "minLimit";

    // TABLE_Itinenary Table - column nmaes
    private static final String KEY_MAX_LIMIT = "maxLimit";
    // Itinenary meter Table - column names
    private static final String KEY_READING_STATUS = "readingStatus";

    private static final String KEY_INSPECTION_DONE = "is_inspection_done";

    private static final String KEY_USER_ID = "userID";
    private static final String KEY_LATITUDE = "latitude";
    private static final String KEY_LONGITUDE = "longitude";
    private static final String KEY_DESCRIPTION = "description";
    private static final String KEY_ENCODING = "encodedString";
    private static final String KEY_UPLOADED = "uploaded";
    // private static final String KEY_IMAGE = "image";

    // NOTE_TAGS Table - column names
    public static final String CREATE_TABLE_SHOP = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_shop + "(" + KEY_SHOP_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOPNAME + " TEXT UNIQUE," + KEY_LONGITUDE + " TEXT,"
            + KEY_LATITUDE + " TEXT ," + KEY_SURVEY_ID + " TEXT ," + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT," + KEY_SERVER_ID + " TEXT" + ")";


    ///local brand
    public static final String CREATE_TABLE_LOCAL_BRAND = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_LOCALBRAND + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOP_ID + " INTEGER," + KEY_BRAND_NAME + " TEXT UNIQUE,"
            + KEY_PRICE_TWENTY_KG + " TEXT ,"
            + KEY_PRICE_TWENTY__FOUR_KG + " TEXT ,"
            + KEY_PRICE_FIFTY_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_RETAIL_LOCAL_BRAND = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_RETAIL_LOCALBRAND + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOP_ID + " INTEGER," + KEY_BRAND_NAME + " TEXT UNIQUE,"
            + KEY_PRICE_ONE_KG + " TEXT ,"
            + KEY_PRICE_TWO_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_RETAIL_LOOSE_BRAND = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_RETAIL_LOOSE_BRAND + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOP_ID + " INTEGER," + KEY_BRAND_NAME + " TEXT UNIQUE,"
            + KEY_PRICE_ONE_KG + " TEXT ,"
            + KEY_PRICE_TWO_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_LOCAL_BRAND_STOCKED = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_LOCALBRAND_STOCKED + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOP_ID + " INTEGER," + KEY_BRAND_NAME + " TEXT  UNIQUE,"
            + KEY_PRICE_TWENTY_KG + " TEXT ,"
            + KEY_PRICE_TWENTY__FOUR_KG + " TEXT ,"
            + KEY_PRICE_FIFTY_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_RETAIL_LOCAL_BRAND_STOCKED = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_RETAIL_LOCALBRAND_STOCKED + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOP_ID + " INTEGER," + KEY_BRAND_NAME + " TEXT  UNIQUE,"
            + KEY_PRICE_TWENTY_KG + " TEXT ,"
            + KEY_PRICE_TWENTY__FOUR_KG + " TEXT ,"
            + KEY_PRICE_FIFTY_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_LOCAL_IMPORT_BRAND = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_LOCAL_IMPORT + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY,"
            + KEY_SHOP_ID + " INTEGER," + KEY_COUNTRY_ID + " TEXT,"
            + KEY_PRICE_TWENTY_KG + " TEXT ,"
            + KEY_PRICE_TWENTY__FOUR_KG + " TEXT ,"
            + KEY_PRICE_FIFTY_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_RETAIL_LOCAL_IMPORT_BRAND = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_RETAIL_LOOSE_IMPORT + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY,"
            + KEY_SHOP_ID + " INTEGER," + KEY_COUNTRY_ID + " TEXT,"
            + KEY_PRICE_ONE_KG + " TEXT ,"
            + KEY_PRICE_TWO_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_LOCAL_IMPORT_BRAND_STOCKED = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_LOCAL_IMPORT_STOCKED + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOP_ID + " INTEGER," + KEY_COUNTRY_ID + " TEXT,"
            + KEY_PRICE_TWENTY_KG + " TEXT ,"
            + KEY_PRICE_TWENTY__FOUR_KG + " TEXT ,"
            + KEY_PRICE_FIFTY_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String CREATE_TABLE_RETAIL_LOCAL_IMPORT_BRAND_STOCKED = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_RETAIL_LOCAL_IMPORT_STOCKED + "(" + KEY_BRAND_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SHOP_ID + " INTEGER," + KEY_COUNTRY_ID + " TEXT,"
            + KEY_PRICE_TWENTY_KG + " TEXT ,"
            + KEY_PRICE_TWENTY__FOUR_KG + " TEXT ,"
            + KEY_PRICE_FIFTY_KG + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";


    public static final String TABLE_SUGAR_COMPANY = "sugar_company";
    public static final String TABLE_C_BPARTNER = "c_bpartner";


    //Sugar Company Details
    public static final String CREATE_TABLE_SUGAR_COMPANY = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_SUGAR_COMPANY + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_NAME + " TEXT UNIQUE," + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT UNIQUE" + ")";

    //C_BPartner Details
    public static final String CREATE_TABLE_C_BPARTNER = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_C_BPARTNER + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_NAME + " TEXT UNIQUE," + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT UNIQUE" + ")";

    public static final String KEY_COUNTY_ID = "countyID";

    public static final String KEY_COMPANY_ID = "companyID";

    public static final String TABLE_MILLING = "miller";
    public static final String CREATE_TABLE_MILLING = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_MILLING + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COMPANY_ID + " INTEGER UNIQUE,"
            + KEY_COUNTY_ID + " TEXT,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_LONGITUDE + " TEXT ,"
            + KEY_LATITUDE + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";
    public static final String TABLE_FARMER = "farmer";
    public static final String TABLE_CROP_DETAIL = "crop_detail";
    public static final String KEY_FARMER_NAME = "farmerName";
    public static final String KEY_FARMER_PHONE = "farmerPhoneNo";
    public static final String KEY_SUB_COUNTY_ID = "subCountyID";
    public static final String KEY_ID_NO = "idNO";
    public static final String KEY_GENDER = "gender";
    public static final String KEY_AFA_SD_Canecensusscore_ID = "AFA_SD_Canecensusscore_ID";
    public static final String KEY_AFA_SD_Canefarmerdetails_ID = "AFA_SD_Canefarmerdetails_ID";

    public static final String CREATE_TABLE_FARMER = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FARMER + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COMPANY_ID + " INTEGER,"
            + KEY_COUNTY_ID + " TEXT,"
            + KEY_SUB_COUNTY_ID + " TEXT ,"
            + KEY_FARMER_NAME + " TEXT UNIQUE ,"
            + KEY_FARMER_PHONE + " TEXT ,"
            + KEY_BRAND_ID + " TEXT ,"
            + KEY_ID_NO + " TEXT ,"
            + KEY_GENDER + " TEXT ,"
            + KEY_AFA_SD_Canecensusscore_ID + " TEXT ,"
            + KEY_AFA_SD_Canefarmerdetails_ID + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";
    private static final String KEY_cropClass = "cropClass";
    private static final String KEY_variety = "variety";
    private static final String KEY_hectares = "hectares";
    private static final String KEY_aGEmonths = "aGEmonths";
    private static final String KEY_cropVigour = "cropVigour";
    private static final String KEY_cropColour = "cropColour";
    private static final String KEY_cropDensity = "cropDensity";
    private static final String KEY_pestsDiseaseWeeds = "pestsDiseaseWeeds";
    private static final String KEY_expectedTCH = "expectedTCH";
    public static final String CREATE_TABLE_CROPS_DETAILS = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_CROP_DETAIL + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_BRAND_ID + " INTEGER,"
            + KEY_cropClass + " TEXT,"
            + KEY_variety + " TEXT ,"
            + KEY_hectares + " TEXT ,"
            + KEY_aGEmonths + " TEXT ,"
            + KEY_cropVigour + " TEXT ,"
            + KEY_cropColour + " TEXT ,"
            + KEY_cropDensity + " TEXT ,"
            + KEY_pestsDiseaseWeeds + " TEXT ,"
            + KEY_expectedTCH + " TEXT ,"
            + KEY_AFA_SD_Canefarmerdetails_ID + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_UPLOADED + " TEXT" + ")";
    public static final String TABLE_COUNTY = "county";

    public static final String CREATE_TABLE_COUNTY = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COUNTY + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_NAME + " TEXT UNIQUE,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT  UNIQUE " + ")";


    public static final String TABLE_PRODUCT = "product";
    public static final String TABLE_PAY_CATEGORY = "pay_category";
    public static final String TABLE_PRODUCT_CATEGORY = "product_category";
    public static final String TABLE_NOCD_PRODUCT = "nocd_product";
    public static final String TABLE_COLD_STORAGE_PRODUCT = "cold_storage_product";
    private static final String KEY_PRODUCT_CATEGORY = "product_category";


    public static final String CREATE_TABLE_PRODUCT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_PRODUCT + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_NAME + " TEXT UNIQUE,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT  UNIQUE " + ")";


    public static final String CREATE_TABLE_PAY_CATEGORY = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_PAY_CATEGORY + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_NAME + " TEXT UNIQUE,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT  UNIQUE " + ")";

    public static final String CREATE_TABLE_PRODUCT_CATEGORY = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_PRODUCT_CATEGORY + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_NAME + " TEXT UNIQUE,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT  UNIQUE " + ")";

    public static final String CREATE_TABLE_NOCD_PRODUCT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_NOCD_PRODUCT + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_NAME + " TEXT UNIQUE,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT  UNIQUE " + ")";

    public static final String CREATE_TABLE_COLD_STORAGE_PRODUCT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COLD_STORAGE_PRODUCT + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_NAME + " TEXT UNIQUE,"
            + KEY_PRODUCT_CATEGORY + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT  UNIQUE " + ")";


    public static final String TABLE_SUB_COUNTY = "sub_county";

    public static final String CREATE_TABLE_SUB_COUNTY = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_SUB_COUNTY + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_NAME + " TEXT  UNIQUE ,"
            + KEY_SUB_COUNTY_ID + " TEXT  UNIQUE ,"
            + KEY_COUNTY_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME," + KEY_SERVER_ID + " TEXT  UNIQUE" + ")";
    public static String getPassword = "";


    //sugar mill licence compliance checklist
    private static final String KEY_SUGAR_MILLER_ID = "sugar_mill_licence_id";
    private static final String KEY_DOCUMENT_NUMBER = "document_number";
    private static final String KEY_DOCUMENT_DATE = "document_date";
    private static final String KEY_REF_LETTER_OF_COMFORT = "ref_letter_of_comfort";
    private static final String KEY_NAME_OF_APPLICANT = "name_of_applicant";
    private static final String KEY_lIST_OF_CONTRACTED_FARMERS = "list_of_contracted_farmers";
    private static final String KEY_lIST_OF_CONTRACTED_FARMERS_REMARKS = "list_of_contracted_farmers_remarks";
    private static final String KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS = "summary_showing_number_of_outgrowers";
    private static final String KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS_REMARKS = "summary_showing_number_of_outgrowers_remarks";
    private static final String KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES = "nema_weights_osha_certificates";
    private static final String KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES_REMARKS = "nema_weights_osha_certificates_remarks";
    private static final String KEY_SUGARCANE_MILLING_SCHEDULE = "sugar_milling_schedule";
    private static final String KEY_SUGARCANE_MILLING_SCHEDULE_REMARKS = "sugar_milling_schedule_remarks";
    private static final String KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER = "samples_of_contracts_in_use";
    private static final String KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER_REMARKS = "samples_of_contracts_in_use_remarks";
    private static final String KEY_CANE_PRDUCTION_AND_PROCESSING = "cane_production_and_processing";
    private static final String KEY_CANE_PRDUCTION_AND_PROCESSING_REMARKS = "cane_production_and_processing_remarks";
    private static final String KEY_SCHEDULE_OF_FARMERS_AND_SDL = "schedule_of_farmers_and_sdl";
    private static final String KEY_SCHEDULE_OF_FARMERS_AND_SDL_REMARKS = "schedule_of_farmers_and_sdl_remarks";
    private static final String KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA = "conformance_to_cane_payment_formula";
    private static final String KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA_REMARKS = "conformance_to_cane_payment_formula_remarks";
    private static final String KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT = "adherance_to_statutory_requirements";
    private static final String KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT_REMARKS = "adherance_to_statutory_requirements_remarks";

    private static final String KEY_OFFICER_RECOMMENDATION = "officer_recommendation";
    private static final String KEY_OFFICER_RECOMMENDATION_REMARKS = "officer_recommendation_remarks";

    private static final String KEY_DOC_STATUS = "docstatus";
    private static final String KEY_PROCESSING = "processing";
    private static final String KEY_PROCESSED = "processed";

    public static final String TABLE_SUGAR_MILL = "sugar_mill";

    public static final String CREATE_TABLE_SUGAR_MILL = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_SUGAR_MILL + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_SUGAR_MILLER_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_REF_LETTER_OF_COMFORT + " TEXT ,"
            // + KEY_REF_LETTER_OF_COMFORT + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_lIST_OF_CONTRACTED_FARMERS + " TEXT ,"
            + KEY_lIST_OF_CONTRACTED_FARMERS_REMARKS + " TEXT ,"
            + KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS + " TEXT ,"
            + KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS_REMARKS + " TEXT ,"
            + KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES + " TEXT ,"
            + KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES_REMARKS + " TEXT ,"
            + KEY_SUGARCANE_MILLING_SCHEDULE + " TEXT ,"
            + KEY_SUGARCANE_MILLING_SCHEDULE_REMARKS + " TEXT ,"
            + KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER + " TEXT ,"
            + KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER_REMARKS + " TEXT ,"
            + KEY_CANE_PRDUCTION_AND_PROCESSING + " TEXT ,"
            + KEY_CANE_PRDUCTION_AND_PROCESSING_REMARKS + " TEXT ,"
            + KEY_SCHEDULE_OF_FARMERS_AND_SDL + " TEXT ,"
            + KEY_SCHEDULE_OF_FARMERS_AND_SDL_REMARKS + " TEXT ,"
            + KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA + " TEXT ,"
            + KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA_REMARKS + " TEXT ,"
            + KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT + " TEXT ,"
            + KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT_REMARKS + " TEXT ,"
            + KEY_DOC_STATUS + " TEXT ,"
            + KEY_PROCESSING + " TEXT ,"
            + KEY_PROCESSED + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    //String miller_id, String document_number, String document_date, String ref_letter_of_comfort, String name_of_applicant, String list_farmers, String list_farmers_remark, String grower_summary, String grower_summary_remark, String nemaweightsosha_cert, String nemaweightsosha_cert_remark, String millingshedule_monthly, String millingshedule_monthly_remark, String canecontract_samples, String canecontract_samples_remark, String caneprodproc_plans, String caneprodproc_plans_remark, String farmersdarreas_measure, String farmersdarreas_measure_remark, String payformula_conf, String payformula_conf_remark, String adhstatutorystandard, String adhstatutorystandard_remark
    public long insertSugarMillLicencecompliance(SugarMillDetails sugarMillDetails) {

        System.out.println("AFA_sd_sugarmillinglicappl_ID:" + sugarMillDetails.getDocument_number());

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, sugarMillDetails.getLocalID());
        values.put(KEY_SUGAR_MILLER_ID, sugarMillDetails.getAfa_sd_smillcliancelist_id());

        values.put(KEY_DOCUMENT_NUMBER, sugarMillDetails.getDocument_number());

        values.put(KEY_DOCUMENT_DATE, sugarMillDetails.getDocument_date());

        values.put(KEY_REF_LETTER_OF_COMFORT, sugarMillDetails.getLetter_of_comfort());

        values.put(KEY_NAME_OF_APPLICANT, sugarMillDetails.getC_BPartner_ID());

        values.put(KEY_INSPECTION_DONE, "N");

        // insert row
        if (!isSugarMillComplianceStored(sugarMillDetails.getAfa_sd_smillcliancelist_id())) {
            long sugarMillID = db.insertWithOnConflict(TABLE_SUGAR_MILL, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("sugarMillID" + sugarMillID);
            closeDB();
            return sugarMillID;
        } else {
            long sugarMillID = -1;
            System.out.println("sugarMillID" + sugarMillID);
            closeDB();
            return sugarMillID;
        }
        //closeDB();
    }


    public void deleteSugarMillCompliance() {
        String deleteQuery = "DELETE FROM " + TABLE_SUGAR_MILL;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isSugarMillComplianceStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_SUGAR_MILL + " WHERE " + KEY_SUGAR_MILLER_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long updateSugarMillLicencecompliance(SugarMillLicence sugarMillLicence) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {

            values.put(KEY_lIST_OF_CONTRACTED_FARMERS, sugarMillLicence.getList_farmers());
            values.put(KEY_lIST_OF_CONTRACTED_FARMERS_REMARKS, sugarMillLicence.getList_farmers_remark());
            values.put(KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS, sugarMillLicence.getGrower_summary());
            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS_REMARKS, sugarMillLicence.getGrower_summary_remark());
            values.put(KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES, sugarMillLicence.getNemaweightsosha_cert());
            values.put(KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES_REMARKS, sugarMillLicence.getNemaweightsosha_cert_remark());
            values.put(KEY_SUGARCANE_MILLING_SCHEDULE, sugarMillLicence.getMillingshedule_monthly());
            values.put(KEY_SUGARCANE_MILLING_SCHEDULE_REMARKS, sugarMillLicence.getMillingshedule_monthly_remark());
            values.put(KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER, sugarMillLicence.getCanecontract_samples());
            values.put(KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER_REMARKS, sugarMillLicence.getCanecontract_samples_remark());
            values.put(KEY_CANE_PRDUCTION_AND_PROCESSING, sugarMillLicence.getCaneprodproc_plans());
            values.put(KEY_CANE_PRDUCTION_AND_PROCESSING_REMARKS, sugarMillLicence.getCaneprodproc_plans_remark());
            values.put(KEY_SCHEDULE_OF_FARMERS_AND_SDL, sugarMillLicence.getFarmersdarreas_measure());
            values.put(KEY_SCHEDULE_OF_FARMERS_AND_SDL_REMARKS, sugarMillLicence.getFarmersdarreas_measure_remark());
            values.put(KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA, sugarMillLicence.getPayformula_conf());
            values.put(KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA_REMARKS, sugarMillLicence.getPayformula_conf_remark());
            values.put(KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT, sugarMillLicence.getAdhstatutorystandard());
            values.put(KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT_REMARKS, sugarMillLicence.getAdhstatutorystandard_remark());
            values.put(KEY_OFFICER_RECOMMENDATION, sugarMillLicence.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, sugarMillLicence.getOfficerrecommendation_remark());

            //result = db.update(TABLE_SUGAR_MILL, values,"id = ?", new String[] { sugarMillDetails.getDocument_number() });
            result = db.update(TABLE_SUGAR_MILL, values, "id =" + Integer.parseInt(sugarMillLicence.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<SugarMillDetails> getSugarMillDetailsList() {

        List<SugarMillDetails> sugarMillDetailsList = new ArrayList<SugarMillDetails>();
        SugarMillDetails td = new SugarMillDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_SUGAR_MILL + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Sugar mill Licence Compliance data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new SugarMillDetails();
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLetter_of_comfort((c.getString((c.getColumnIndex(KEY_REF_LETTER_OF_COMFORT)))));
                    td.setDocument_number((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setAfa_sd_smillcliancelist_id(c.getString(c.getColumnIndex(KEY_SUGAR_MILLER_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setList_farmers(c.getString(c.getColumnIndex(KEY_lIST_OF_CONTRACTED_FARMERS)));
                    td.setList_farmers_remark(c.getString(c.getColumnIndex(KEY_lIST_OF_CONTRACTED_FARMERS_REMARKS)));
                    td.setGrower_summary(c.getString(c.getColumnIndex(KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS)));
                    td.setGrower_summary_remark(c.getString(c.getColumnIndex(KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS_REMARKS)));
                    td.setNemaweightsosha_cert(c.getString(c.getColumnIndex(KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES)));
                    td.setNemaweightsosha_cert_remark(c.getString(c.getColumnIndex(KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES_REMARKS)));
                    td.setMillingshedule_monthly(c.getString(c.getColumnIndex(KEY_SUGARCANE_MILLING_SCHEDULE)));
                    td.setMillingshedule_monthly_remark(c.getString(c.getColumnIndex(KEY_SUGARCANE_MILLING_SCHEDULE_REMARKS)));
                    td.setCanecontract_samples(c.getString(c.getColumnIndex(KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER)));
                    td.setCanecontract_samples_remark(c.getString(c.getColumnIndex(KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER_REMARKS)));
                    td.setCaneprodproc_plans(c.getString(c.getColumnIndex(KEY_CANE_PRDUCTION_AND_PROCESSING)));
                    td.setCaneprodproc_plans_remark(c.getString(c.getColumnIndex(KEY_CANE_PRDUCTION_AND_PROCESSING_REMARKS)));
                    td.setFarmersdarreas_measure(c.getString(c.getColumnIndex(KEY_SCHEDULE_OF_FARMERS_AND_SDL)));
                    td.setFarmersdarreas_measure_remark(c.getString(c.getColumnIndex(KEY_SCHEDULE_OF_FARMERS_AND_SDL_REMARKS)));
                    td.setPayformula_conf(c.getString(c.getColumnIndex(KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA)));
                    td.setPayformula_conf_remark(c.getString(c.getColumnIndex(KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA_REMARKS)));
                    td.setAdhstatutorystandard(c.getString(c.getColumnIndex(KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT)));
                    td.setAdhstatutorystandard_remark(c.getString(c.getColumnIndex(KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT_REMARKS)));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list
                    sugarMillDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + sugarMillDetailsList.size());
        return sugarMillDetailsList;
    }

    public List<SugarMillDetails> getSugarMillDetailInspectionDone() {


        List<SugarMillDetails> sugarMillDetailsList = new ArrayList<SugarMillDetails>();
        SugarMillDetails td = new SugarMillDetails();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_SUGAR_MILL + " where " + KEY_INSPECTION_DONE + " =" + "'Y'";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new SugarMillDetails();
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLetter_of_comfort((c.getString((c.getColumnIndex(KEY_REF_LETTER_OF_COMFORT)))));
                    td.setDocument_number((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setAfa_sd_smillcliancelist_id(c.getString(c.getColumnIndex(KEY_SUGAR_MILLER_ID)));
                    td.setLocalID(c.getString(c.getColumnIndex(KEY_ID)));
                    td.setList_farmers(c.getString(c.getColumnIndex(KEY_lIST_OF_CONTRACTED_FARMERS)));
                    td.setList_farmers_remark(c.getString(c.getColumnIndex(KEY_lIST_OF_CONTRACTED_FARMERS_REMARKS)));
                    td.setGrower_summary(c.getString(c.getColumnIndex(KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS)));
                    td.setGrower_summary_remark(c.getString(c.getColumnIndex(KEY_SUMMARY_SHOWING_NUMBER_OF_OUTGROWERS_REMARKS)));
                    td.setNemaweightsosha_cert(c.getString(c.getColumnIndex(KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES)));
                    td.setNemaweightsosha_cert_remark(c.getString(c.getColumnIndex(KEY_NEMA_WEIGHTS_OSHA_CERTIFICATES_REMARKS)));
                    td.setMillingshedule_monthly(c.getString(c.getColumnIndex(KEY_SUGARCANE_MILLING_SCHEDULE)));
                    td.setMillingshedule_monthly_remark(c.getString(c.getColumnIndex(KEY_SUGARCANE_MILLING_SCHEDULE_REMARKS)));
                    td.setCanecontract_samples(c.getString(c.getColumnIndex(KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER)));
                    td.setCanecontract_samples_remark(c.getString(c.getColumnIndex(KEY_SAMPLES_OF_CONTRACTS_IN_USE_BY_MILLER_REMARKS)));
                    td.setCaneprodproc_plans(c.getString(c.getColumnIndex(KEY_CANE_PRDUCTION_AND_PROCESSING)));
                    td.setCaneprodproc_plans_remark(c.getString(c.getColumnIndex(KEY_CANE_PRDUCTION_AND_PROCESSING_REMARKS)));
                    td.setFarmersdarreas_measure(c.getString(c.getColumnIndex(KEY_SCHEDULE_OF_FARMERS_AND_SDL)));
                    td.setFarmersdarreas_measure_remark(c.getString(c.getColumnIndex(KEY_SCHEDULE_OF_FARMERS_AND_SDL_REMARKS)));
                    td.setPayformula_conf(c.getString(c.getColumnIndex(KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA)));
                    td.setPayformula_conf_remark(c.getString(c.getColumnIndex(KEY_CONFORMANCE_TO_CANE_PAYMENT_FORMULA_REMARKS)));
                    td.setAdhstatutorystandard(c.getString(c.getColumnIndex(KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT)));
                    td.setAdhstatutorystandard_remark(c.getString(c.getColumnIndex(KEY_ADHERANCE_TO_RELEVANT_STATUTORY_REQUIREMENT_REMARKS)));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    System.out.println("records saved  ID:" + td.getLocalID());
                    System.out.println("getList_farmers after td:" + td.getList_farmers());

                    System.out.println("getList_farmers_remark after td:" + td.getList_farmers_remark());

                    System.out.println("getGrower_summary after td:" + td.getGrower_summary());

                    System.out.println("getGrower_summary_remark after td:" + td.getGrower_summary_remark());
                    System.out.println("getNemaweightsosha_cert after td:" + td.getNemaweightsosha_cert());
                    System.out.println("getNemaweightsosha_cert_remark after td:" + td.getNemaweightsosha_cert_remark());
                    System.out.println("getMillingshedule_monthly after td:" + td.getMillingshedule_monthly());
                    System.out.println("getMillingshedule_monthly_remark before td:" + td.getMillingshedule_monthly_remark());
                    System.out.println("getCanecontract_samples after td:" + td.getCanecontract_samples());
                    System.out.println("getCanecontract_samples_remark after td:" + td.getCanecontract_samples_remark());
                    System.out.println("getCaneprodproc_plans after td:" + td.getCaneprodproc_plans());
                    System.out.println("getCaneprodproc_plans_remark after td:" + td.getCaneprodproc_plans_remark());
                    System.out.println("getFarmersdarreas_measure after td:" + td.getFarmersdarreas_measure());
                    System.out.println("getFarmersdarreas_measure_remark after td:" + td.getFarmersdarreas_measure_remark());
                    System.out.println("getPayformula_conf after td:" + td.getPayformula_conf());
                    System.out.println("getPayformula_conf_remark after td:" + td.getPayformula_conf_remark());
                    System.out.println("getAdhstatutorystandard after td:" + td.getAdhstatutorystandard());
                    System.out.println("getAdhstatutorystandard_remark after td:" + td.getAdhstatutorystandard_remark());


                    // adding to itinerary list
                    sugarMillDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + sugarMillDetailsList.size());
        return sugarMillDetailsList;
    }


    public boolean updateSugarmilllicenceSent(String millerID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_SERVER_ID, serverRecordID);

            int result = db.update(TABLE_SUGAR_MILL, values, "id=" + millerID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }

        // updating row
      /*  return db.update(tableName, values, KEY_SHOP_ID + " = ?",
                new String[] { String.valueOf(shopID) });*/
    }

    public void deleteSugarmillLicenceSentRecords(String tableName, String millerID, String serverRecordID) {
        String deleteQuery = "DELETE FROM " + tableName + " WHERE " + KEY_UPLOADED + " = 'SENT' and " + KEY_SUGAR_MILLER_ID + " =" + millerID;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);

        closeDB();


    }

    public void deleteSugarmillLicenceInspection() {

        String deleteQuery = "DELETE FROM " + TABLE_SUGAR_MILL;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);

        closeDB();


    }


    //Commercial Nursery Operator Farm Inspection table
    private static final String KEY_COMMERCIAL_NURSERY_FARM_INSP = "commercial_nursery_farm_inspection";
    private static final String KEY_COMMERCIAL_ID = "Commercial_id";
    /* private static final String KEY_PYRETHRUM_DOCUMENT_NUMBER = "document_number";
    private static final String KEY_PYRETHRUM_DOCUMENT_DATE = "document_date";
    private static final String KEY_PYRETHRUM_NAME_OF_APPLICANT = "name_of_applicant"; */
    private static final String KEY_NURSERY_CERT_NUMBER = "Nursery_cert_number";
    private static final String KEY_TITLE_DEED = "Title_deeds";
    private static final String KEY_TITLE_DEED_EVIDENCE = "Title_deeds_evidence";
    private static final String KEY_TITLE_DEED_REMARKS = "Title_deeds_remarks";
    private static final String KEY_TOTAL_ACREAGE = "Total_acreage";
    private static final String KEY_TOTAL_ACREAGE_EVIDENCE = "Total_acreage_evidence";
    private static final String KEY_TOTAL_ACREAGE_REMARKS = "Total_acreage_remarks";
    private static final String KEY_ACREAGE_AVAILABLE = "Acreage_available";
    private static final String KEY_ACREAGE_AVAILABLE_EVIDENCE = "Acreage_available_evidence";
    private static final String KEY_ACREAGE_AVAILABLE_REMARKS = "Acreage_available_remarks";
    private static final String KEY_LAND_SUITABILITY = "Land_suitability_site";
    private static final String KEY_LAND_SUITABILITY_EVIDENCE = "Land_suitability_site_evidence";
    private static final String KEY_LAND_SUITABILITY_REMARKS = "Land_suitability_site_remarks";
    private static final String KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER = "Reliable_supply_of_clean_water";
    private static final String KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_EVIDENCE = "Reliable_supply_of_clean_water_evidence";
    private static final String KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_REMARKS = "Reliable_supply_of_clean_water_remarks";
    private static final String KEY_ACCESSIBILITY_OF_NURSERY_SITE = "Accessibility_of_nursery_site";
    private static final String KEY_ACCESSIBILITY_OF_NURSERY_SITE_EVIDENCE = "Accessibility_of_nursery_site_evidence";
    private static final String KEY_ACCESSIBILITY_OF_NURSERY_SITE_REMARKS = "Accessibility_of_nursery_site_remarks";
    private static final String KEY_CLEARANCE_LETTER_FROM_SUPPLIER = "Clearance_letter_from_the_supplier";
    private static final String KEY_CLEARANCE_LETTER_FROM_SUPPLIER_EVIDENCE = "Clearance_letter_from_the_supplier_evidence";
    private static final String KEY_CLEARANCE_LETTER_FROM_SUPPLIER_REMARKS = "Clearance_letter_from_the_supplier_remarks";
    private static final String KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE = "Demostrate_adequate_knowledge";
    private static final String KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_EVIDENCE = "Demostrate_adequate_knowledge_evidence";
    private static final String KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_REMARKS = "Demostrate_adequate_knowledge_remarks";
    private static final String KEY_AGE_FOR_AN_EXISTING_CROP = "Age_for_an_existing_crop";
    private static final String KEY_AGE_FOR_AN_EXISTING_CROP_DATE_PLANTED = "Age_for_an_existing_date_planted";
    private static final String KEY_AGE_FOR_AN_EXISTING_CROP_REMARKS = "Age_for_an_existing_crop_remarks";
    private static final String KEY_SOURCE_OF_PLANTING_MATERIALS = "Source_of_planting_materials";
    private static final String KEY_SOURCE_OF_PLANTING_MATERIALS_EVIDENCE = "Source_of_planting_materials_evidence";
    private static final String KEY_SOURCE_OF_PLANTING_MATERIALS_REMARKS = "Source_of_planting_materials_remarks";
    private static final String KEY_PHENOTYPIC_CHARACTERISTICS = "Phenotypic_characteristics";
    private static final String KEY_PHENOTYPIC_CHARACTERISTICS_EVIDENCE = "Phenotypic_characteristics_evidence";
    private static final String KEY_PHENOTYPIC_CHARACTERISTICS_REMARKS = "Phenotypic_characteristics_remarks";
    private static final String KEY_DISEASE_INCIDENCES = "Disease_incidences";
    private static final String KEY_DISEASE_INCIDENCES_REMARKS = "Disease_incidences_remarks";
    private static final String KEY_PEST_INCIDENCES = "Pest_incidences";
    private static final String KEY_PEST_INCIDENCES_REMARKS = "Pest_incidences_remarks";
    private static final String KEY_FIELD_HYGIENE_CONDITIONS = "Field_hygiene";
    private static final String KEY_FIELD_HYGIENE_CONDITIONS_EVIDENCE = "Field_hygiene_evidence";
    private static final String KEY_FIELD_HYGIENE_CONDITIONS_REMARKS = "Field_hygiene_remarks";
    private static final String KEY_TARGET_MARKET = "Target_market";
    private static final String KEY_TARGET_MARKET_EVIDENCE = "Target_market_evidence";
    private static final String KEY_TARGET_MARKET_REMARKS = "Target_market_remarks";
    private static final String KEY_INSPECTION_BY_KEPHIS = "Inspection_by_kephis";
    private static final String KEY_INSPECTION_BY_KEPHIS_EVIDENCE = "Inspection_by_kephis_evidence";
    private static final String KEY_INSPECTION_BY_KEPHIS_REMARKS = "Inspection_by_kephis_remarks";
    private static final String KEY_RECCOMENDATIONS = "Recommendations_remarks";

    public static final String TABLE_PYRETHRUM_INSPECTION = "pyrethrum_inspection";

    public static final String CREATE_TABLE_PYRETHRUM_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_PYRETHRUM_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COMMERCIAL_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT  ,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_NAME_OF_APPLICANT + " TEXT ,"
            + KEY_NURSERY_CERT_NUMBER + " TEXT ,"
            + KEY_TITLE_DEED + " TEXT ,"
            + KEY_TITLE_DEED_EVIDENCE + " TEXT ,"
            + KEY_TITLE_DEED_REMARKS + " TEXT ,"
            + KEY_TOTAL_ACREAGE + " TEXT ,"
            + KEY_TOTAL_ACREAGE_EVIDENCE + " TEXT ,"
            + KEY_TOTAL_ACREAGE_REMARKS + " TEXT ,"
            + KEY_ACREAGE_AVAILABLE + " TEXT ,"
            + KEY_ACREAGE_AVAILABLE_EVIDENCE + " TEXT ,"
            + KEY_ACREAGE_AVAILABLE_REMARKS + " TEXT ,"
            + KEY_LAND_SUITABILITY + " TEXT ,"
            + KEY_LAND_SUITABILITY_EVIDENCE + " TEXT ,"
            + KEY_LAND_SUITABILITY_REMARKS + " TEXT ,"
            + KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER + " TEXT ,"
            + KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_EVIDENCE + " TEXT ,"
            + KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_REMARKS + " TEXT ,"
            + KEY_ACCESSIBILITY_OF_NURSERY_SITE + " TEXT ,"
            + KEY_ACCESSIBILITY_OF_NURSERY_SITE_EVIDENCE + " TEXT ,"
            + KEY_ACCESSIBILITY_OF_NURSERY_SITE_REMARKS + " TEXT ,"
            + KEY_CLEARANCE_LETTER_FROM_SUPPLIER + " TEXT ,"
            + KEY_CLEARANCE_LETTER_FROM_SUPPLIER_EVIDENCE + " TEXT ,"
            + KEY_CLEARANCE_LETTER_FROM_SUPPLIER_REMARKS + " TEXT ,"
            + KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE + " TEXT ,"
            + KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_EVIDENCE + " TEXT ,"
            + KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_REMARKS + " TEXT ,"
            + KEY_AGE_FOR_AN_EXISTING_CROP + " TEXT ,"
            + KEY_AGE_FOR_AN_EXISTING_CROP_DATE_PLANTED + " TEXT ,"
            + KEY_AGE_FOR_AN_EXISTING_CROP_REMARKS + " TEXT ,"
            + KEY_SOURCE_OF_PLANTING_MATERIALS + " TEXT ,"
            + KEY_SOURCE_OF_PLANTING_MATERIALS_EVIDENCE + " TEXT ,"
            + KEY_SOURCE_OF_PLANTING_MATERIALS_REMARKS + " TEXT ,"
            + KEY_PHENOTYPIC_CHARACTERISTICS + " TEXT ,"
            + KEY_PHENOTYPIC_CHARACTERISTICS_EVIDENCE + " TEXT ,"
            + KEY_PHENOTYPIC_CHARACTERISTICS_REMARKS + " TEXT ,"
            + KEY_DISEASE_INCIDENCES + " TEXT ,"
            + KEY_DISEASE_INCIDENCES_REMARKS + " TEXT ,"
            + KEY_PEST_INCIDENCES + " TEXT ,"
            + KEY_PEST_INCIDENCES_REMARKS + " TEXT ,"
            + KEY_FIELD_HYGIENE_CONDITIONS + " TEXT ,"
            + KEY_FIELD_HYGIENE_CONDITIONS_EVIDENCE + " TEXT ,"
            + KEY_FIELD_HYGIENE_CONDITIONS_REMARKS + " TEXT ,"
            + KEY_TARGET_MARKET + " TEXT ,"
            + KEY_TARGET_MARKET_EVIDENCE + " TEXT ,"
            + KEY_TARGET_MARKET_REMARKS + " TEXT ,"
            + KEY_INSPECTION_BY_KEPHIS + " TEXT ,"
            + KEY_INSPECTION_BY_KEPHIS_EVIDENCE + " TEXT ,"
            + KEY_INSPECTION_BY_KEPHIS_REMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_RECCOMENDATIONS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertPyretrumInspection(PyrethrumInspectionChecklist pyrethrumInspectionChecklist) {

        System.out.println("pyrethrumdoc no" + pyrethrumInspectionChecklist.getDocument_number());
        System.out.println("date" + pyrethrumInspectionChecklist.getDocument_date());
        System.out.println("name" + pyrethrumInspectionChecklist.getName_of_applicant());
        System.out.println("lic no" + pyrethrumInspectionChecklist.getCertificate_number());

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, pyrethrumInspectionChecklist.getLocalID());
        values.put(KEY_COMMERCIAL_ID, pyrethrumInspectionChecklist.getaFA_PD_Inspect_Processor_ID());

        values.put(KEY_DOCUMENT_NUMBER, pyrethrumInspectionChecklist.getDocument_number());

        values.put(KEY_DOCUMENT_DATE, pyrethrumInspectionChecklist.getDocument_date());

        values.put(KEY_NAME_OF_APPLICANT, pyrethrumInspectionChecklist.getName_of_applicant());

        values.put(KEY_NURSERY_CERT_NUMBER, pyrethrumInspectionChecklist.getCertificate_number());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isPyretrumInspectionStored(pyrethrumInspectionChecklist.getaFA_PD_Inspect_Processor_ID())) {
            long pyrethruminspectionID = db.insertWithOnConflict(TABLE_PYRETHRUM_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            //closeDB();
            closeDB();
            return pyrethruminspectionID;
        } else {
            long pyrethruminspectionID = -1;
            //closeDB();
            closeDB();
            return pyrethruminspectionID;
        }

    }

    public boolean updatePyretrumInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_PYRETHRUM_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public boolean isPyretrumInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_PYRETHRUM_INSPECTION + " WHERE " + KEY_COMMERCIAL_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long updatePyrethrumInspectionChecklist(PyrethrumInspection pyrethrumInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_TITLE_DEED, pyrethrumInspection.getTitle_deed());
            values.put(KEY_TITLE_DEED_EVIDENCE, pyrethrumInspection.getTitle_deed_evidence());
            values.put(KEY_TITLE_DEED_REMARKS, pyrethrumInspection.getTitle_deed_remarks());
            values.put(KEY_TOTAL_ACREAGE, pyrethrumInspection.getTotal_acreage());
            values.put(KEY_TOTAL_ACREAGE_EVIDENCE, pyrethrumInspection.getTotal_acreage_evidence());
            values.put(KEY_TOTAL_ACREAGE_REMARKS, pyrethrumInspection.getTotal_acreage_remarks());
            values.put(KEY_ACREAGE_AVAILABLE, pyrethrumInspection.getAcreage_available());
            values.put(KEY_ACREAGE_AVAILABLE_EVIDENCE, pyrethrumInspection.getAcreage_available_evidence());
            values.put(KEY_ACREAGE_AVAILABLE_REMARKS, pyrethrumInspection.getAcreage_available_remarks());
            values.put(KEY_LAND_SUITABILITY, pyrethrumInspection.getSuitability_of_the_land());
            values.put(KEY_LAND_SUITABILITY_EVIDENCE, pyrethrumInspection.getSuitability_of_the_land_evidence());
            values.put(KEY_LAND_SUITABILITY_REMARKS, pyrethrumInspection.getSuitability_of_the_land_remarks());
            values.put(KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER, pyrethrumInspection.getReliable_supply_clean_water());
            values.put(KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_EVIDENCE, pyrethrumInspection.getReliable_supply_clean_water_evidence());
            values.put(KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_REMARKS, pyrethrumInspection.getReliable_supply_clean_water_remarks());
            values.put(KEY_ACCESSIBILITY_OF_NURSERY_SITE, pyrethrumInspection.getAccessibility_of_nursery_site());
            values.put(KEY_ACCESSIBILITY_OF_NURSERY_SITE_EVIDENCE, pyrethrumInspection.getAccessibility_of_nursery_site_evidence());
            values.put(KEY_ACCESSIBILITY_OF_NURSERY_SITE_REMARKS, pyrethrumInspection.getAccessibility_of_nursery_site_remarks());
            values.put(KEY_CLEARANCE_LETTER_FROM_SUPPLIER, pyrethrumInspection.getClearance_letter());
            values.put(KEY_CLEARANCE_LETTER_FROM_SUPPLIER_EVIDENCE, pyrethrumInspection.getClearance_letter_evidence());
            values.put(KEY_CLEARANCE_LETTER_FROM_SUPPLIER_REMARKS, pyrethrumInspection.getClearance_letter_remarks());
            values.put(KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE, pyrethrumInspection.getDemonstrate_adequate_knowledge());
            values.put(KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_EVIDENCE, pyrethrumInspection.getDemonstrate_adequate_knowledge_evidence());
            values.put(KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_REMARKS, pyrethrumInspection.getDemonstrate_adequate_knowledge_remarks());
            values.put(KEY_AGE_FOR_AN_EXISTING_CROP, pyrethrumInspection.getAge_of_an_existing_crop());
            values.put(KEY_AGE_FOR_AN_EXISTING_CROP_DATE_PLANTED, pyrethrumInspection.getAge_of_an_existing_crop_date_planted());
            values.put(KEY_AGE_FOR_AN_EXISTING_CROP_REMARKS, pyrethrumInspection.getAge_of_an_existing_crop_remarks());
            values.put(KEY_SOURCE_OF_PLANTING_MATERIALS, pyrethrumInspection.getSource_of_planting_materials());
            values.put(KEY_SOURCE_OF_PLANTING_MATERIALS_EVIDENCE, pyrethrumInspection.getSource_of_planting_materials_evidence());
            values.put(KEY_SOURCE_OF_PLANTING_MATERIALS_REMARKS, pyrethrumInspection.getSource_of_planting_materials_remarks());
            values.put(KEY_PHENOTYPIC_CHARACTERISTICS, pyrethrumInspection.getPhenotypic_characteristics());
            values.put(KEY_PHENOTYPIC_CHARACTERISTICS_EVIDENCE, pyrethrumInspection.getPhenotypic_characteristics_evidence());
            values.put(KEY_PHENOTYPIC_CHARACTERISTICS_REMARKS, pyrethrumInspection.getPhenotypic_characteristics_remarks());
            values.put(KEY_DISEASE_INCIDENCES, pyrethrumInspection.getDisease_incidences());
            values.put(KEY_DISEASE_INCIDENCES_REMARKS, pyrethrumInspection.getDisease_incidences_remarks());
            values.put(KEY_PEST_INCIDENCES, pyrethrumInspection.getPest_incidences());
            values.put(KEY_PEST_INCIDENCES_REMARKS, pyrethrumInspection.getPest_incidences_remarks());
            values.put(KEY_FIELD_HYGIENE_CONDITIONS, pyrethrumInspection.getField_hygiene_conditions());
            values.put(KEY_FIELD_HYGIENE_CONDITIONS_EVIDENCE, pyrethrumInspection.getField_hygiene_conditions_evidence());
            values.put(KEY_FIELD_HYGIENE_CONDITIONS_REMARKS, pyrethrumInspection.getField_hygiene_conditions_remarks());
            values.put(KEY_TARGET_MARKET, pyrethrumInspection.getTarget_market());
            values.put(KEY_TARGET_MARKET_EVIDENCE, pyrethrumInspection.getTarget_market_evidence());
            values.put(KEY_TARGET_MARKET_REMARKS, pyrethrumInspection.getTarget_market_remarks());
            values.put(KEY_INSPECTION_BY_KEPHIS, pyrethrumInspection.getInspection_by_kephis());
            values.put(KEY_INSPECTION_BY_KEPHIS_EVIDENCE, pyrethrumInspection.getInspection_by_kephis_evidence());
            values.put(KEY_INSPECTION_BY_KEPHIS_REMARKS, pyrethrumInspection.getInspection_by_kephis_remarks());
            values.put(KEY_OFFICER_RECOMMENDATION, pyrethrumInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, pyrethrumInspection.getOfficerrecommendation_remark());

            //result = db.update(TABLE_PYRETHRUM_INSPECTION, values,"id = ?", new String[] { sugarMillDetails.getDocument_number() });
            result = db.update(TABLE_PYRETHRUM_INSPECTION, values, "id =" + Integer.parseInt(pyrethrumInspection.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<PyrethrumInspectionChecklist> getPyrethrumInspectionList() {

        List<PyrethrumInspectionChecklist> pyrethrumInspectionList = new ArrayList<PyrethrumInspectionChecklist>();
        PyrethrumInspectionChecklist td = new PyrethrumInspectionChecklist();
        // td.setName("- Required -");
        //String selectQuery = "SELECT  * FROM " + TABLE_SUGAR_MILL + " where "+KEY_INSPECTION_DONE+" =" +"'N'";

        String selectQuery = "SELECT  * FROM " + TABLE_PYRETHRUM_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list AFA_PD_Inspect_Processor_Commercial Nursery Operator Farm Inspection
        try {
            if (c.moveToFirst()) {
                do {
                    td = new PyrethrumInspectionChecklist();

                    td.setaFA_PD_Inspect_Processor_ID(c.getString(c.getColumnIndex(KEY_COMMERCIAL_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocument_number((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setCertificate_number((c.getString((c.getColumnIndex(KEY_NURSERY_CERT_NUMBER)))));

                    // adding to itinerary list
                    pyrethrumInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("Picking Pyrethrum inspection data from the db " + pyrethrumInspectionList.size());
        return pyrethrumInspectionList;
    }

    //pyrethrum done
    public List<PyrethrumInspectionChecklist> getPyrethrumInspectionDone() {


        List<PyrethrumInspectionChecklist> pyrethrumInspectionlists = new ArrayList<PyrethrumInspectionChecklist>();
        PyrethrumInspectionChecklist td = new PyrethrumInspectionChecklist();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_PYRETHRUM_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new PyrethrumInspectionChecklist();
                    td.setaFA_PD_Inspect_Processor_ID(c.getString(c.getColumnIndex(KEY_COMMERCIAL_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocument_number((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setCertificate_number((c.getString((c.getColumnIndex(KEY_NURSERY_CERT_NUMBER)))));
                    td.setTitle_deed(c.getString(c.getColumnIndex(KEY_TITLE_DEED)));
                    td.setTitle_deed_evidence(c.getString(c.getColumnIndex(KEY_TITLE_DEED_EVIDENCE)));
                    td.setTitle_deed_remarks(c.getString(c.getColumnIndex(KEY_TITLE_DEED_REMARKS)));
                    td.setTotal_acreage(c.getString(c.getColumnIndex(KEY_TOTAL_ACREAGE)));
                    td.setTotal_acreage_evidence(c.getString(c.getColumnIndex(KEY_TOTAL_ACREAGE_EVIDENCE)));
                    td.setTotal_acreage_remarks(c.getString(c.getColumnIndex(KEY_TOTAL_ACREAGE_REMARKS)));
                    td.setAcreage_available(c.getString(c.getColumnIndex(KEY_ACREAGE_AVAILABLE)));
                    td.setAcreage_available_evidence(c.getString(c.getColumnIndex(KEY_ACREAGE_AVAILABLE_EVIDENCE)));
                    td.setAcreage_available_remarks(c.getString(c.getColumnIndex(KEY_ACREAGE_AVAILABLE_REMARKS)));
                    td.setSuitability_of_the_land(c.getString(c.getColumnIndex(KEY_LAND_SUITABILITY)));
                    td.setSuitability_of_the_land_evidence(c.getString(c.getColumnIndex(KEY_LAND_SUITABILITY_EVIDENCE)));
                    td.setSuitability_of_the_land_remarks(c.getString(c.getColumnIndex(KEY_LAND_SUITABILITY_REMARKS)));
                    td.setReliable_supply_clean_water(c.getString(c.getColumnIndex(KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER)));
                    td.setReliable_supply_clean_water_evidence(c.getString(c.getColumnIndex(KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_EVIDENCE)));
                    td.setReliable_supply_clean_water_remarks(c.getString(c.getColumnIndex(KEY_RELIABLE_SUPPLY_OF_CLEAN_WATER_REMARKS)));
                    td.setAccessibility_of_nursery_site(c.getString(c.getColumnIndex(KEY_ACCESSIBILITY_OF_NURSERY_SITE)));
                    td.setAccessibility_of_nursery_site_evidence(c.getString(c.getColumnIndex(KEY_ACCESSIBILITY_OF_NURSERY_SITE_EVIDENCE)));
                    td.setAccessibility_of_nursery_site_remarks(c.getString(c.getColumnIndex(KEY_ACCESSIBILITY_OF_NURSERY_SITE_REMARKS)));
                    td.setClearance_letter(c.getString(c.getColumnIndex(KEY_CLEARANCE_LETTER_FROM_SUPPLIER)));
                    td.setClearance_letter_evidence(c.getString(c.getColumnIndex(KEY_CLEARANCE_LETTER_FROM_SUPPLIER_EVIDENCE)));
                    td.setClearance_letter_remarks(c.getString(c.getColumnIndex(KEY_CLEARANCE_LETTER_FROM_SUPPLIER_REMARKS)));
                    td.setDemonstrate_adequate_knowledge(c.getString(c.getColumnIndex(KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE)));
                    td.setDemonstrate_adequate_knowledge_evidence(c.getString(c.getColumnIndex(KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_EVIDENCE)));
                    td.setDemonstrate_adequate_knowledge_remarks(c.getString(c.getColumnIndex(KEY_DEMOSTRATE_ADEQUATE_KNOWLEDGE_REMARKS)));
                    td.setAge_of_an_existing_crop(c.getString(c.getColumnIndex(KEY_AGE_FOR_AN_EXISTING_CROP)));
                    td.setAge_of_an_existing_crop_date_planted(c.getString(c.getColumnIndex(KEY_AGE_FOR_AN_EXISTING_CROP_DATE_PLANTED)));
                    td.setAge_of_an_existing_crop_remarks(c.getString(c.getColumnIndex(KEY_AGE_FOR_AN_EXISTING_CROP_REMARKS)));
                    td.setSource_of_planting_materials(c.getString(c.getColumnIndex(KEY_SOURCE_OF_PLANTING_MATERIALS)));
                    td.setSource_of_planting_materials_evidence(c.getString(c.getColumnIndex(KEY_SOURCE_OF_PLANTING_MATERIALS_EVIDENCE)));
                    td.setSource_of_planting_materials_remarks(c.getString(c.getColumnIndex(KEY_SOURCE_OF_PLANTING_MATERIALS_REMARKS)));
                    td.setPhenotypic_characteristics(c.getString(c.getColumnIndex(KEY_PHENOTYPIC_CHARACTERISTICS)));
                    td.setPhenotypic_characteristics_evidence(c.getString(c.getColumnIndex(KEY_PHENOTYPIC_CHARACTERISTICS_EVIDENCE)));
                    td.setPhenotypic_characteristics_remarks(c.getString(c.getColumnIndex(KEY_PHENOTYPIC_CHARACTERISTICS_REMARKS)));
                    td.setDisease_incidences(c.getString(c.getColumnIndex(KEY_DISEASE_INCIDENCES)));
                    td.setDisease_incidences_remarks(c.getString(c.getColumnIndex(KEY_DISEASE_INCIDENCES_REMARKS)));
                    td.setPest_incidences(c.getString(c.getColumnIndex(KEY_PEST_INCIDENCES)));
                    td.setPest_incidences_remarks(c.getString(c.getColumnIndex(KEY_PEST_INCIDENCES_REMARKS)));
                    td.setField_hygiene_conditions(c.getString(c.getColumnIndex(KEY_FIELD_HYGIENE_CONDITIONS)));
                    td.setField_hygiene_conditions_evidence(c.getString(c.getColumnIndex(KEY_FIELD_HYGIENE_CONDITIONS_EVIDENCE)));
                    td.setField_hygiene_conditions_remarks(c.getString(c.getColumnIndex(KEY_FIELD_HYGIENE_CONDITIONS_REMARKS)));
                    td.setTarget_market(c.getString(c.getColumnIndex(KEY_TARGET_MARKET)));
                    td.setTarget_market_evidence(c.getString(c.getColumnIndex(KEY_TARGET_MARKET_EVIDENCE)));
                    td.setTarget_market_remarks(c.getString(c.getColumnIndex(KEY_TARGET_MARKET_REMARKS)));
                    td.setInspection_by_kephis(c.getString(c.getColumnIndex(KEY_INSPECTION_BY_KEPHIS)));
                    td.setInspection_by_kephis_evidence(c.getString(c.getColumnIndex(KEY_INSPECTION_BY_KEPHIS_EVIDENCE)));
                    td.setInspection_by_kephis_remarks(c.getString(c.getColumnIndex(KEY_INSPECTION_BY_KEPHIS_REMARKS)));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list
                    pyrethrumInspectionlists.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + pyrethrumInspectionlists.size());
        return pyrethrumInspectionlists;
    }

    public void deletePyrethrum() {
        String deleteQuery = "DELETE FROM " + TABLE_PYRETHRUM_INSPECTION;
        db = dbHelper.getReadableDatabase();
        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }




    /*END OF PYRETHRUM INSPECTION*/

    /* START OF TEA WAREHOUSEMAN INSPECTION CHECKLIST */

    private static final String KEY_TEA_WAREHOUSEMAN_INSPECTION_ID = "tea_warehouseman_inspection_id";
    /* private static final String KEY_TEA_WAREHOUSEMAN_DOCUMENT_NUMBER = "document_number";
    private static final String KEY_TEA_WAREHOUSEMAN_DOCUMENT_DATE = "document_date";
    private static final String KEY_TEA_WAREHOUSEMAN_NAME_OF_APPLICANT = "name_of_applicant"; */
    private static final String KEY_LICENSE_NUMBER = "license_number";
    private static final String KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_INCORP = "certificate_of_company_registration_incorp";
    private static final String KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_MANDATORY = "certificate_of_company_registration_mandatory";
    private static final String KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_REMARKS = "certificate_of_company_registration_remarks";
    private static final String KEY_VALID_INSURANCE_POLICY = "valid_insurance_policy";
    private static final String KEY_VALID_INSURANCE_POLICY_MANDATORY = "valid_insurance_policy_mandatory";
    private static final String KEY_VALID_INSURANCE_POLICY_REMARKS = "valid_insurance_policy_remarks";
    private static final String KEY_BUSINESS_PERMIT = "business_permit";
    private static final String KEY_BUSINESS_PERMIT_MANDATORY = "business_permit_mandatory";
    private static final String KEY_BUSINESS_PERMIT_REMARKS = "business_permit_remarks";
    private static final String KEY_HEALTH_CERTIFICATE = "health_certificate";
    private static final String KEY_HEALTH_CERTIFICATE_MANDATORY = "health_certificate_mandatory";
    private static final String KEY_HEALTH_CERTIFICATE_REMARKS = "health_certificate_remarks";
    private static final String KEY_SUBMISSION_OF_ANNUAL_RETURNS = "submission_of_annual_returns";
    private static final String KEY_SUBMISSION_OF_ANNUAL_RETURNS_MANDATORY = "submission_of_annual_returns_mandatory";
    private static final String KEY_SUBMISSION_OF_ANNUAL_RETURNS_REMARKS = "submission_of_annual_returns_remarks";
    private static final String KEY_DOCUMENTED_HYGIENE_POLICY = "documented_hygiene_policy";
    private static final String KEY_DOCUMENTED_HYGIENE_POLICY_MANDATORY = "documented_hygiene_policy_mandatory";
    private static final String KEY_DOCUMENTED_HYGIENE_POLICY_REMARKS = "documented_hygiene_policy_remarks";
    private static final String KEY_EVIDENCE_OF_IMPLEMENTATION = "evidence_of_implementation";
    private static final String KEY_EVIDENCE_OF_IMPLEMENTATION_MANDATORY = "evidence_of_implementation_mandatory";
    private static final String KEY_EVIDENCE_OF_IMPLEMENTATION_REMARKS = "evidence_of_implementation_remarks";
    private static final String KEY_FOOD_SAFETY_HAZARD_RISK = "food_safety_hazard_risk";
    private static final String KEY_FOOD_SAFETY_HAZARD_RISK_MANDATORY = "food_safety_hazard_risk_mandatory";
    private static final String KEY_FOOD_SAFETY_HAZARD_RISK_REMARKS = "food_safety_hazard_risk_remarks";
    private static final String KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS = "control_measures_for_potential_food_safety_contaminants";
    private static final String KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_MANDATORY = "control_measures_for_potential_food_safety_contaminants_mandatory";
    private static final String KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_REMARKS = "control_measures_for_potential_food_safety_contaminants_remarks";
    private static final String KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION = "documented_glass_policy_and_glass_inspection";
    private static final String KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_MANDATORY = "documented_glass_policy_and_glass_inspection_mandatory";
    private static final String KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_REMARKS = "documented_glass_policy_and_glass_inspection_remarks";
    private static final String KEY_VALID_MEDICAL_CERTIFICATES = "valid_medical_certificates";
    private static final String KEY_VALID_MEDICAL_CERTIFICATES_MANDATORY = "valid_medical_certificates_mandatory";
    private static final String KEY_VALID_MEDICAL_CERTIFICATES_REMARKS = "valid_medical_certificates_remarks";
    private static final String KEY_ARE_HYGIENE_TRAININGS_CONDUCTED = "are_hygiene_trainings_conducted";
    private static final String KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_MANDATORY = "are_hygiene_trainings_conducted_mandatory";
    private static final String KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_REMARKS = "are_hygiene_trainings_conducted_remarks";
    private static final String KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT = "adequate_and_clean_personal_protective_equipment";
    private static final String KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_MANDATORY = "adequate_and_clean_personal_protective_equipment_mandatory";
    private static final String KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_REMARKS = "adequate_and_clean_personal_protective_equipment_remarks";
    private static final String KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED = "personell_hygiene_practices_followed";
    private static final String KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_MANDATORY = "personell_hygiene_practices_followed_mandatory";
    private static final String KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_REMARKS = "personell_hygiene_practices_followed_remarks";
    private static final String KEY_CHANGING_ROOMS_AND_TOILETS = "changing_rooms_and_toilets";
    private static final String KEY_CHANGING_ROOMS_AND_TOILETS_MANDATORY = "changing_rooms_and_toilets_mandatory";
    private static final String KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS = "changing_rooms_and_toilets_remarks";
    private static final String KEY_DOCUMENTED_CLEANNG_PROGRAMS = "documented_cleanng_programs";
    private static final String KEY_DOCUMENTED_CLEANNG_PROGRAMS_MANDATORY = "documented_cleanng_programs_mandatory";
    private static final String KEY_DOCUMENTED_CLEANNG_PROGRAMS_REMARKS = "documented_cleanng_programs_remarks";
    private static final String KEY_CLEANING_RECORDS_KEPT = "cleaning_records_kept";
    private static final String KEY_CLEANING_RECORDS_KEPT_MANDATORY = "cleaning_records_kept_mandatory";
    private static final String KEY_CLEANING_RECORDS_KEPT_REMARKS = "cleaning_records_kept_remarks";
    private static final String KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS = "segregation_and_labelling_of_cleaning_detergents";
    private static final String KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_MANDATORY = "segregation_and_labelling_of_cleaning_detergents_mandatory";
    private static final String KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_REMARKS = "segregation_and_labelling_of_cleaning_detergents_remarks";
    private static final String KEY_ARE_ALL_PESTS_EXCLUDED = "are_all_pests_excluded";
    private static final String KEY_ARE_ALL_PESTS_EXCLUDED_MANDATORY = "are_all_pests_excluded_mandatory";
    private static final String KEY_ARE_ALL_PESTS_EXCLUDED_REMARKS = "are_all_pests_excluded_remarks";
    private static final String KEY_UP_TO_DATE_BAIT_MAP = "up_to_date_bait_map";
    private static final String KEY_UP_TO_DATE_BAIT_MAP_MANDATORY = "up_to_date_bait_map_mandatory";
    private static final String KEY_UP_TO_DATE_BAIT_MAP_REMARKS = "up_to_date_bait_map_remarks";
    private static final String KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS = "inspection_at_least_every_3_months";
    private static final String KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_MANDATORY = "inspection_at_least_every_3_months_mandatory";
    private static final String KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_REMARKS = "inspection_at_least_every_3_months_remarks";
    private static final String KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION = "precaution_to_prevent_possible_contamination";
    private static final String KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_MANDATORY = "precaution_to_prevent_possible_contamination_mandatory";
    private static final String KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_REMARKS = "precaution_to_prevent_possible_contamination_remarks";
    private static final String KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION = "storage_distribution_and_transportation";
    private static final String KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_MANDATORY = "storage_distribution_and_transportation_mandatory";
    private static final String KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_REMARKS = "storage_distribution_and_transportation_remarks";
    private static final String KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION = "passageway_around_walls_and_partition";
    private static final String KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_MANDATORY = "passageway_around_walls_and_partition_mandatory";
    private static final String KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_REMARKS = "passageway_around_walls_and_partition_remarks";
    private static final String KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS = "procedure_for_inspection_of_products";
    private static final String KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_MANDATORY = "procedure_for_inspection_of_products_mandatory";
    private static final String KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_REMARKS = "procedure_for_inspection_of_products_remarks";
    private static final String KEY_PROPER_SEGREGATION_OF_MATERIALS = "proper_segregation_of_materials";
    private static final String KEY_PROPER_SEGREGATION_OF_MATERIALS_MANDATORY = "proper_segregation_of_materials_mandatory";
    private static final String KEY_PROPER_SEGREGATION_OF_MATERIALS_REMARKS = "proper_segregation_of_materials_remarks";
    private static final String KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE = "security_access_control_to_storage";
    private static final String KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_MANDATORY = "security_access_control_to_storage_mandatory";
    private static final String KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_REMARKS = "security_access_control_to_storage_remarks";
    private static final String KEY_SUFFICIENT_VENTILATION = "sufficient_ventilation";
    private static final String KEY_SUFFICIENT_VENTILATION_MANDATORY = "sufficient_ventilation_mandatory";
    private static final String KEY_SUFFICIENT_VENTILATION_REMARKS = "sufficient_ventilation_remarks";
    private static final String KEY_ADEQUATE_SERVICES = "adequate_services";
    private static final String KEY_ADEQUATE_SERVICES_MANDATORY = "adequate_services_mandatory";
    private static final String KEY_ADEQUATE_SERVICES_REMARKS = "adequate_services_remarks";
    private static final String KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL = "proper_waste_collection_storage_and_disposal";
    private static final String KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_MANDATORY = "proper_waste_collection_storage_and_disposal_mandatory";
    private static final String KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_REMARKS = "proper_waste_collection_storage_and_disposal_remarks";
    private static final String KEY_EXTERNAL_SITE_STANDARDS = "external_site_standards";
    private static final String KEY_EXTERNAL_SITE_STANDARDS_MANDATORY = "external_site_standards_mandatory";
    private static final String KEY_EXTERNAL_SITE_STANDARDS_REMARKS = "external_site_standards_remarks";
    private static final String KEY_WALLS = "walls";
    private static final String KEY_WALLS_MANDATORY = "walls_mandatory";
    private static final String KEY_WALLS_REMARKS = "walls_remarks";
    private static final String KEY_FLOORS = "floors";
    private static final String KEY_FLOORS_MANDATORY = "floors_mandatory";
    private static final String KEY_FLOORS_REMARKS = "floors_remarks";
    private static final String KEY_ROOF_CEILING_AND_OVERHEAD = "roof_ceiling_and_overhead";
    private static final String KEY_ROOF_CEILING_AND_OVERHEAD_MANDATORY = "roof_ceiling_and_overhead_mandatory";
    private static final String KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS = "roof_ceiling_and_overhead_remarks";
    private static final String KEY_WINDOWS = "windows";
    private static final String KEY_WINDOWS_MANDATORY = "windows_mandatory";
    private static final String KEY_WINDOWS_REMARKS = "windows_remarks";
    private static final String KEY_DOORS = "doors";
    private static final String KEY_DOORS_MANDATORY = "doors_mandatory";
    private static final String KEY_DOORS_REMARKS = "doors_remarks";
    private static final String KEY_PROTECTION_OF_LIGHT_TUBES = "protection_of_light_tubes";
    private static final String KEY_PROTECTION_OF_LIGHT_TUBES_MANDATORY = "protection_of_light_tubes_mandatory";
    private static final String KEY_PROTECTION_OF_LIGHT_TUBES_REMARKS = "protection_of_light_tubes_remarks";
    private static final String KEY_MAINTENANCE_PROGRAMS = "maintenance_programs";
    private static final String KEY_MAINTENANCE_PROGRAMS_MANDATORY = "maintenance_programs_mandatory";
    private static final String KEY_MAINTENANCE_PROGRAMS_REMARKS = "maintenance_programs_remarks";
    private static final String KEY_MAINTENANCE_RECORDS_MAINTAINED = "maintenance_records_maintained";
    private static final String KEY_MAINTENANCE_RECORDS_MAINTAINED_MANDATORY = "maintenance_records_maintained_mandatory";
    private static final String KEY_MAINTENANCE_RECORDS_MAINTAINED_REMARKS = "maintenance_records_maintained_remarks";
    private static final String KEY_ARE_CONVETYOR_BELTS_PROTECTED = "are_convetyor_belts_protected";
    private static final String KEY_ARE_CONVETYOR_BELTS_PROTECTED_MANDATORY = "are_convetyor_belts_protected_mandatory";
    private static final String KEY_ARE_CONVETYOR_BELTS_PROTECTED_REMARKS = "are_convetyor_belts_protected_remarks";
    private static final String KEY_PRODUCT_TESTING = "product_testing";
    private static final String KEY_PRODUCT_TESTING_MANDATORY = "product_testing_mandatory";
    private static final String KEY_PRODUCT_TESTING_REMARKS = "product_testing_remarks";
    private static final String KEY_CALIBRATION_OF_THE_WEIGHING_SCALE = "calibration_of_the_weighing_scale";
    private static final String KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_MANDATORY = "calibration_of_the_weighing_scale_mandatory";
    private static final String KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_REMARKS = "calibration_of_the_weighing_scale_remarks";
    private static final String KEY_MEDICAL_EXAMINATION = "medical_examination";
    private static final String KEY_MEDICAL_EXAMINATION_MANDATORY = "medical_examination_mandatory";
    private static final String KEY_MEDICAL_EXAMINATION_REMARKS = "medical_examination_remarks";
    private static final String KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION = "incoming_product_vehicle_inspection";
    private static final String KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_MANDATORY = "incoming_product_vehicle_inspection_mandatory";
    private static final String KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_REMARKS = "incoming_product_vehicle_inspection_remarks";
    private static final String KEY_HYGIENE_HOUSEKEEPING_INSPECTION = "hygiene_housekeeping_inspection";
    private static final String KEY_HYGIENE_HOUSEKEEPING_INSPECTION_MANDATORY = "hygiene_housekeeping_inspection_mandatory";
    private static final String KEY_HYGIENE_HOUSEKEEPING_INSPECTION_REMARKS = "hygiene_housekeeping_inspection_remarks";
    private static final String KEY_DOCUMENT_STATUS = "document_status";

    public static final String TABLE_TEA_WAREHOUSE_MAN_INSPECTION = "tea_warehouse_man_inspection";

    public static final String CREATE_TABLE_TEA_WAREHOUSEMAN_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_TEA_WAREHOUSE_MAN_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_TEA_WAREHOUSEMAN_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_NAME_OF_APPLICANT + " TEXT ,"
            + KEY_LICENSE_NUMBER + " TEXT ,"
            + KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_INCORP + " TEXT,"
            + KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_MANDATORY + " TEXT,"
            + KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_REMARKS + " TEXT,"
            + KEY_VALID_INSURANCE_POLICY + " TEXT,"
            + KEY_VALID_INSURANCE_POLICY_MANDATORY + " TEXT,"
            + KEY_VALID_INSURANCE_POLICY_REMARKS + " TEXT,"
            + KEY_BUSINESS_PERMIT + " TEXT,"
            + KEY_BUSINESS_PERMIT_MANDATORY + " TEXT,"
            + KEY_BUSINESS_PERMIT_REMARKS + " TEXT,"
            + KEY_HEALTH_CERTIFICATE + " TEXT,"
            + KEY_HEALTH_CERTIFICATE_MANDATORY + " TEXT,"
            + KEY_HEALTH_CERTIFICATE_REMARKS + " TEXT,"
            + KEY_SUBMISSION_OF_ANNUAL_RETURNS + " TEXT,"
            + KEY_SUBMISSION_OF_ANNUAL_RETURNS_MANDATORY + " TEXT,"
            + KEY_SUBMISSION_OF_ANNUAL_RETURNS_REMARKS + " TEXT,"
            + KEY_DOCUMENTED_HYGIENE_POLICY + " TEXT,"
            + KEY_DOCUMENTED_HYGIENE_POLICY_MANDATORY + " TEXT,"
            + KEY_DOCUMENTED_HYGIENE_POLICY_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_IMPLEMENTATION + " TEXT,"
            + KEY_EVIDENCE_OF_IMPLEMENTATION_MANDATORY + " TEXT,"
            + KEY_EVIDENCE_OF_IMPLEMENTATION_REMARKS + " TEXT,"
            + KEY_FOOD_SAFETY_HAZARD_RISK + " TEXT,"
            + KEY_FOOD_SAFETY_HAZARD_RISK_MANDATORY + " TEXT,"
            + KEY_FOOD_SAFETY_HAZARD_RISK_REMARKS + " TEXT,"
            + KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS + " TEXT,"
            + KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_MANDATORY + " TEXT,"
            + KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_REMARKS + " TEXT,"
            + KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION + " TEXT,"
            + KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_MANDATORY + " TEXT,"
            + KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_REMARKS + " TEXT,"
            + KEY_VALID_MEDICAL_CERTIFICATES + " TEXT,"
            + KEY_VALID_MEDICAL_CERTIFICATES_MANDATORY + " TEXT,"
            + KEY_VALID_MEDICAL_CERTIFICATES_REMARKS + " TEXT,"
            + KEY_ARE_HYGIENE_TRAININGS_CONDUCTED + " TEXT,"
            + KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_MANDATORY + " TEXT,"
            + KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_REMARKS + " TEXT,"
            + KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT + " TEXT,"
            + KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_MANDATORY + " TEXT,"
            + KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_REMARKS + " TEXT,"
            + KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED + " TEXT,"
            + KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_MANDATORY + " TEXT,"
            + KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_REMARKS + " TEXT,"
            + KEY_CHANGING_ROOMS_AND_TOILETS + " TEXT,"
            + KEY_CHANGING_ROOMS_AND_TOILETS_MANDATORY + " TEXT,"
            + KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS + " TEXT,"
            + KEY_DOCUMENTED_CLEANNG_PROGRAMS + " TEXT,"
            + KEY_DOCUMENTED_CLEANNG_PROGRAMS_MANDATORY + " TEXT,"
            + KEY_DOCUMENTED_CLEANNG_PROGRAMS_REMARKS + " TEXT,"
            + KEY_CLEANING_RECORDS_KEPT + " TEXT,"
            + KEY_CLEANING_RECORDS_KEPT_MANDATORY + " TEXT,"
            + KEY_CLEANING_RECORDS_KEPT_REMARKS + " TEXT,"
            + KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS + " TEXT,"
            + KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_MANDATORY + " TEXT,"
            + KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_REMARKS + " TEXT,"
            + KEY_ARE_ALL_PESTS_EXCLUDED + " TEXT,"
            + KEY_ARE_ALL_PESTS_EXCLUDED_MANDATORY + " TEXT,"
            + KEY_ARE_ALL_PESTS_EXCLUDED_REMARKS + " TEXT,"
            + KEY_UP_TO_DATE_BAIT_MAP + " TEXT,"
            + KEY_UP_TO_DATE_BAIT_MAP_MANDATORY + " TEXT,"
            + KEY_UP_TO_DATE_BAIT_MAP_REMARKS + " TEXT,"
            + KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS + " TEXT,"
            + KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_MANDATORY + " TEXT,"
            + KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_REMARKS + " TEXT,"
            + KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION + " TEXT,"
            + KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_MANDATORY + " TEXT,"
            + KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_REMARKS + " TEXT,"
            + KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION + " TEXT,"
            + KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_MANDATORY + " TEXT,"
            + KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_REMARKS + " TEXT,"
            + KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION + " TEXT,"
            + KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_MANDATORY + " TEXT,"
            + KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_REMARKS + " TEXT,"
            + KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS + " TEXT,"
            + KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_MANDATORY + " TEXT,"
            + KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_REMARKS + " TEXT,"
            + KEY_PROPER_SEGREGATION_OF_MATERIALS + " TEXT,"
            + KEY_PROPER_SEGREGATION_OF_MATERIALS_MANDATORY + " TEXT,"
            + KEY_PROPER_SEGREGATION_OF_MATERIALS_REMARKS + " TEXT,"
            + KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE + " TEXT,"
            + KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_MANDATORY + " TEXT,"
            + KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_REMARKS + " TEXT,"
            + KEY_SUFFICIENT_VENTILATION + " TEXT,"
            + KEY_SUFFICIENT_VENTILATION_MANDATORY + " TEXT,"
            + KEY_SUFFICIENT_VENTILATION_REMARKS + " TEXT,"
            + KEY_ADEQUATE_SERVICES + " TEXT,"
            + KEY_ADEQUATE_SERVICES_MANDATORY + " TEXT,"
            + KEY_ADEQUATE_SERVICES_REMARKS + " TEXT,"
            + KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL + " TEXT,"
            + KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_MANDATORY + " TEXT,"
            + KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_REMARKS + " TEXT,"
            + KEY_EXTERNAL_SITE_STANDARDS + " TEXT,"
            + KEY_EXTERNAL_SITE_STANDARDS_MANDATORY + " TEXT,"
            + KEY_EXTERNAL_SITE_STANDARDS_REMARKS + " TEXT,"
            + KEY_WALLS + " TEXT,"
            + KEY_WALLS_MANDATORY + " TEXT,"
            + KEY_WALLS_REMARKS + " TEXT,"
            + KEY_FLOORS + " TEXT,"
            + KEY_FLOORS_MANDATORY + " TEXT,"
            + KEY_FLOORS_REMARKS + " TEXT,"
            + KEY_ROOF_CEILING_AND_OVERHEAD + " TEXT,"
            + KEY_ROOF_CEILING_AND_OVERHEAD_MANDATORY + " TEXT,"
            + KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS + " TEXT,"
            + KEY_WINDOWS + " TEXT,"
            + KEY_WINDOWS_MANDATORY + " TEXT,"
            + KEY_WINDOWS_REMARKS + " TEXT,"
            + KEY_DOORS + " TEXT,"
            + KEY_DOORS_MANDATORY + " TEXT,"
            + KEY_DOORS_REMARKS + " TEXT,"
            + KEY_PROTECTION_OF_LIGHT_TUBES + " TEXT,"
            + KEY_PROTECTION_OF_LIGHT_TUBES_MANDATORY + " TEXT,"
            + KEY_PROTECTION_OF_LIGHT_TUBES_REMARKS + " TEXT,"
            + KEY_MAINTENANCE_PROGRAMS + " TEXT,"
            + KEY_MAINTENANCE_PROGRAMS_MANDATORY + " TEXT,"
            + KEY_MAINTENANCE_PROGRAMS_REMARKS + " TEXT,"
            + KEY_MAINTENANCE_RECORDS_MAINTAINED + " TEXT,"
            + KEY_MAINTENANCE_RECORDS_MAINTAINED_MANDATORY + " TEXT,"
            + KEY_MAINTENANCE_RECORDS_MAINTAINED_REMARKS + " TEXT,"
            + KEY_ARE_CONVETYOR_BELTS_PROTECTED + " TEXT,"
            + KEY_ARE_CONVETYOR_BELTS_PROTECTED_MANDATORY + " TEXT,"
            + KEY_ARE_CONVETYOR_BELTS_PROTECTED_REMARKS + " TEXT,"
            + KEY_PRODUCT_TESTING + " TEXT,"
            + KEY_PRODUCT_TESTING_MANDATORY + " TEXT,"
            + KEY_PRODUCT_TESTING_REMARKS + " TEXT,"
            + KEY_CALIBRATION_OF_THE_WEIGHING_SCALE + " TEXT,"
            + KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_MANDATORY + " TEXT,"
            + KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_REMARKS + " TEXT,"
            + KEY_MEDICAL_EXAMINATION + " TEXT,"
            + KEY_MEDICAL_EXAMINATION_MANDATORY + " TEXT,"
            + KEY_MEDICAL_EXAMINATION_REMARKS + " TEXT,"
            + KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION + " TEXT,"
            + KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_MANDATORY + " TEXT,"
            + KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_REMARKS + " TEXT,"
            + KEY_HYGIENE_HOUSEKEEPING_INSPECTION + " TEXT,"
            + KEY_HYGIENE_HOUSEKEEPING_INSPECTION_MANDATORY + " TEXT,"
            + KEY_HYGIENE_HOUSEKEEPING_INSPECTION_REMARKS + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_DOCUMENT_STATUS + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertTeaWarehouseManInspection(TeaWarehouseManInspectionDataCollection teaWarehouseMan) {


        System.out.println("AFA_TD_Inspection_Checklist_Tea Inspection Checklist:" + teaWarehouseMan.getDocument_number());

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, teaWarehouseMan.getLocalID());
        values.put(KEY_TEA_WAREHOUSEMAN_INSPECTION_ID, teaWarehouseMan.getAFA_TD_Warehousemanlicappl_ID());

        values.put(KEY_DOCUMENT_NUMBER, teaWarehouseMan.getDocument_number());

        values.put(KEY_DOCUMENT_DATE, teaWarehouseMan.getDocument_date());

        values.put(KEY_LICENSE_NUMBER, teaWarehouseMan.getLicense_number());

        values.put(KEY_NAME_OF_APPLICANT, teaWarehouseMan.getName_of_applicant());

        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isTeaWarehouseManInspectionStored(teaWarehouseMan.getAFA_TD_Warehousemanlicappl_ID())) {
            long teaWarehouseManID = db.insertWithOnConflict(TABLE_TEA_WAREHOUSE_MAN_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("teaWarehouseManID" + teaWarehouseManID);

            closeDB();
            return teaWarehouseManID;
        } else {
            long teaWarehouseManID = -1;
            System.out.println("teaWarehouseManID" + teaWarehouseManID);

            closeDB();
            return teaWarehouseManID;
        }

    }

    public void deleteTeaWarehouseManInspection() {
        String deleteQuery = "DELETE FROM " + TABLE_TEA_WAREHOUSE_MAN_INSPECTION;

        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isTeaWarehouseManInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_TEA_WAREHOUSE_MAN_INSPECTION + " WHERE " + KEY_TEA_WAREHOUSEMAN_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long updateTeaWarehouseManInspection(TeaWarehouseManInspection teaWarehouseMan) {

        System.out.println("records  to be saved  ID:" + teaWarehouseMan.getLocalID());


        System.out.println("document_number to be saved:" + teaWarehouseMan.getDocument_number());

        System.out.println("document_date to be saved:" + teaWarehouseMan.getDocument_date());

        System.out.println("license number to be saved:" + teaWarehouseMan.getLicense_number());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_INCORP, teaWarehouseMan.getCertificate_of_company_registration());
            values.put(KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_MANDATORY, teaWarehouseMan.getCertificate_of_company_registration_mandatory());
            values.put(KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_REMARKS, teaWarehouseMan.getCertificate_of_company_registration_remarks());
            values.put(KEY_VALID_INSURANCE_POLICY, teaWarehouseMan.getValid_insurance_policy());
            values.put(KEY_VALID_INSURANCE_POLICY_MANDATORY, teaWarehouseMan.getValid_insurance_policy_mandatory());
            values.put(KEY_VALID_INSURANCE_POLICY_REMARKS, teaWarehouseMan.getValid_insurance_policy_remarks());
            values.put(KEY_BUSINESS_PERMIT, teaWarehouseMan.getBusiness_permit());
            values.put(KEY_BUSINESS_PERMIT_MANDATORY, teaWarehouseMan.getBusiness_permit_mandatory());
            values.put(KEY_BUSINESS_PERMIT_REMARKS, teaWarehouseMan.getBusiness_permit_remarks());
            values.put(KEY_HEALTH_CERTIFICATE, teaWarehouseMan.getHealth_certificate());
            values.put(KEY_HEALTH_CERTIFICATE_MANDATORY, teaWarehouseMan.getHealth_certificate_mandatory());
            values.put(KEY_HEALTH_CERTIFICATE_REMARKS, teaWarehouseMan.getHealth_certificate_remarks());
            values.put(KEY_SUBMISSION_OF_ANNUAL_RETURNS, teaWarehouseMan.getSubmission_of_annual_returns());
            values.put(KEY_SUBMISSION_OF_ANNUAL_RETURNS_MANDATORY, teaWarehouseMan.getSubmission_of_annual_returns_mandatory());
            values.put(KEY_SUBMISSION_OF_ANNUAL_RETURNS_REMARKS, teaWarehouseMan.getSubmission_of_annual_returns_remarks());
            values.put(KEY_DOCUMENTED_HYGIENE_POLICY, teaWarehouseMan.getDocumented_hygiene_policy());
            values.put(KEY_DOCUMENTED_HYGIENE_POLICY_MANDATORY, teaWarehouseMan.getDocumented_hygiene_policy_mandatory());
            values.put(KEY_DOCUMENTED_HYGIENE_POLICY_REMARKS, teaWarehouseMan.getDocumented_hygiene_policy_remarks());
            values.put(KEY_EVIDENCE_OF_IMPLEMENTATION, teaWarehouseMan.getEvidence_of_implementation());
            values.put(KEY_EVIDENCE_OF_IMPLEMENTATION_MANDATORY, teaWarehouseMan.getEvidence_of_implementation_mandatory());
            values.put(KEY_EVIDENCE_OF_IMPLEMENTATION_REMARKS, teaWarehouseMan.getEvidence_of_implementation_remarks());
            values.put(KEY_FOOD_SAFETY_HAZARD_RISK, teaWarehouseMan.getFood_safety_hazard());
            values.put(KEY_FOOD_SAFETY_HAZARD_RISK_MANDATORY, teaWarehouseMan.getFood_safety_hazard_mandatory());
            values.put(KEY_FOOD_SAFETY_HAZARD_RISK_REMARKS, teaWarehouseMan.getFood_safety_hazard_remarks());
            values.put(KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS, teaWarehouseMan.getControl_measures());
            values.put(KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_MANDATORY, teaWarehouseMan.getControl_measures_mandatory());
            values.put(KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_REMARKS, teaWarehouseMan.getControl_measures_remarks());
            values.put(KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION, teaWarehouseMan.getDocumented_glass_policy());
            values.put(KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_MANDATORY, teaWarehouseMan.getDocumented_glass_policy_mandatory());
            values.put(KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_REMARKS, teaWarehouseMan.getDocumented_glass_policy_remarks());
            values.put(KEY_VALID_MEDICAL_CERTIFICATES, teaWarehouseMan.getValid_medical_certificates());
            values.put(KEY_VALID_MEDICAL_CERTIFICATES_MANDATORY, teaWarehouseMan.getValid_medical_certificates_mandatory());
            values.put(KEY_VALID_MEDICAL_CERTIFICATES_REMARKS, teaWarehouseMan.getValid_medical_certificates_remarks());
            values.put(KEY_ARE_HYGIENE_TRAININGS_CONDUCTED, teaWarehouseMan.getAre_hygiene_trainings_conducted());
            values.put(KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_MANDATORY, teaWarehouseMan.getAre_hygiene_trainings_conducted_mandatory());
            values.put(KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_REMARKS, teaWarehouseMan.getAre_hygiene_trainings_conducted_remarks());
            values.put(KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT, teaWarehouseMan.getAdequate_and_clean_personal());
            values.put(KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_MANDATORY, teaWarehouseMan.getAdequate_and_clean_personal_mandatory());
            values.put(KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_REMARKS, teaWarehouseMan.getAdequate_and_clean_personal_remarks());
            values.put(KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED, teaWarehouseMan.getPersonnel_hygiene_practices_followed());
            values.put(KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_MANDATORY, teaWarehouseMan.getPersonnel_hygiene_practices_followed_mandatory());
            values.put(KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_REMARKS, teaWarehouseMan.getPersonnel_hygiene_practices_followed_remarks());
            values.put(KEY_CHANGING_ROOMS_AND_TOILETS, teaWarehouseMan.getChanging_rooms_and_toilets());
            values.put(KEY_CHANGING_ROOMS_AND_TOILETS_MANDATORY, teaWarehouseMan.getChanging_rooms_and_toilets_mandatory());
            values.put(KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS, teaWarehouseMan.getChanging_rooms_and_toilets_remarks());
            values.put(KEY_DOCUMENTED_CLEANNG_PROGRAMS, teaWarehouseMan.getDocumented_cleaning_programs());
            values.put(KEY_DOCUMENTED_CLEANNG_PROGRAMS_MANDATORY, teaWarehouseMan.getDocumented_cleaning_programs_mandatory());
            values.put(KEY_DOCUMENTED_CLEANNG_PROGRAMS_REMARKS, teaWarehouseMan.getDocumented_cleaning_programs_remarks());
            values.put(KEY_CLEANING_RECORDS_KEPT, teaWarehouseMan.getCleaning_records_kept());
            values.put(KEY_CLEANING_RECORDS_KEPT_MANDATORY, teaWarehouseMan.getCleaning_records_kept_mandatory());
            values.put(KEY_CLEANING_RECORDS_KEPT_REMARKS, teaWarehouseMan.getCleaning_records_kept_remarks());
            values.put(KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS, teaWarehouseMan.getSegregation_and_labelling());
            values.put(KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_MANDATORY, teaWarehouseMan.getSegregation_and_labelling_mandatory());
            values.put(KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_REMARKS, teaWarehouseMan.getSegregation_and_labelling_remarks());
            values.put(KEY_ARE_ALL_PESTS_EXCLUDED, teaWarehouseMan.getAre_all_pests_excluded());
            values.put(KEY_ARE_ALL_PESTS_EXCLUDED_MANDATORY, teaWarehouseMan.getAre_all_pests_excluded_mandatory());
            values.put(KEY_ARE_ALL_PESTS_EXCLUDED_REMARKS, teaWarehouseMan.getAre_all_pests_excluded_remarks());
            values.put(KEY_UP_TO_DATE_BAIT_MAP, teaWarehouseMan.getUp_to_date_bait_map());
            values.put(KEY_UP_TO_DATE_BAIT_MAP_MANDATORY, teaWarehouseMan.getUp_to_date_bait_map_mandatory());
            values.put(KEY_UP_TO_DATE_BAIT_MAP_REMARKS, teaWarehouseMan.getUp_to_date_bait_map_remarks());
            values.put(KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS, teaWarehouseMan.getInspection_every_three_months());
            values.put(KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_MANDATORY, teaWarehouseMan.getInspection_every_three_months_mandatory());
            values.put(KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_REMARKS, teaWarehouseMan.getInspection_every_three_months_remarks());
            values.put(KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION, teaWarehouseMan.getPrecaution_to_prevent());
            values.put(KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_MANDATORY, teaWarehouseMan.getPrecaution_to_prevent_mandatory());
            values.put(KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_REMARKS, teaWarehouseMan.getPrecaution_to_prevent_remarks());
            values.put(KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION, teaWarehouseMan.getStorage_distribution_and_transportation());
            values.put(KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_MANDATORY, teaWarehouseMan.getStorage_distribution_and_transportation_mandatory());
            values.put(KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_REMARKS, teaWarehouseMan.getStorage_distribution_and_transportation_remarks());
            values.put(KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION, teaWarehouseMan.getWalls_and_partitions());
            values.put(KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_MANDATORY, teaWarehouseMan.getWalls_and_partitions_mandatory());
            values.put(KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_REMARKS, teaWarehouseMan.getWalls_and_partitions_remarks());
            values.put(KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS, teaWarehouseMan.getProcedure_for_inspection());
            values.put(KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_MANDATORY, teaWarehouseMan.getProcedure_for_inspection_mandatory());
            values.put(KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_REMARKS, teaWarehouseMan.getProcedure_for_inspection_remarks());
            values.put(KEY_PROPER_SEGREGATION_OF_MATERIALS, teaWarehouseMan.getProper_segregation_of_materials());
            values.put(KEY_PROPER_SEGREGATION_OF_MATERIALS_MANDATORY, teaWarehouseMan.getProper_segregation_of_materials_mandatory());
            values.put(KEY_PROPER_SEGREGATION_OF_MATERIALS_REMARKS, teaWarehouseMan.getProper_segregation_of_materials_remarks());
            values.put(KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE, teaWarehouseMan.getSecurity_access_control());
            values.put(KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_MANDATORY, teaWarehouseMan.getSecurity_access_control_mandatory());
            values.put(KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_REMARKS, teaWarehouseMan.getSecurity_access_control_remarks());
            values.put(KEY_SUFFICIENT_VENTILATION, teaWarehouseMan.getSufficient_ventilation());
            values.put(KEY_SUFFICIENT_VENTILATION_MANDATORY, teaWarehouseMan.getSufficient_ventilation_mandatory());
            values.put(KEY_SUFFICIENT_VENTILATION_REMARKS, teaWarehouseMan.getSufficient_ventilation_remarks());
            values.put(KEY_ADEQUATE_SERVICES, teaWarehouseMan.getAdequate_services());
            values.put(KEY_ADEQUATE_SERVICES_MANDATORY, teaWarehouseMan.getAdequate_services_mandatory());
            values.put(KEY_ADEQUATE_SERVICES_REMARKS, teaWarehouseMan.getAdequate_services_remarks());
            values.put(KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL, teaWarehouseMan.getProper_waste_collection());
            values.put(KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_MANDATORY, teaWarehouseMan.getProper_waste_collection_mandatory());
            values.put(KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_REMARKS, teaWarehouseMan.getProper_waste_collection_remarks());
            values.put(KEY_EXTERNAL_SITE_STANDARDS, teaWarehouseMan.getExternal_site_standards());
            values.put(KEY_EXTERNAL_SITE_STANDARDS_MANDATORY, teaWarehouseMan.getExternal_site_standards_mandatory());
            values.put(KEY_EXTERNAL_SITE_STANDARDS_REMARKS, teaWarehouseMan.getExternal_site_standards_remarks());
            values.put(KEY_WALLS, teaWarehouseMan.getWalls());
            values.put(KEY_WALLS_MANDATORY, teaWarehouseMan.getWalls_mandatory());
            values.put(KEY_WALLS_REMARKS, teaWarehouseMan.getWalls_remarks());
            values.put(KEY_FLOORS, teaWarehouseMan.getFloors());
            values.put(KEY_FLOORS_MANDATORY, teaWarehouseMan.getFloors_mandatory());
            values.put(KEY_FLOORS_REMARKS, teaWarehouseMan.getFloors_remarks());
            values.put(KEY_ROOF_CEILING_AND_OVERHEAD, teaWarehouseMan.getRoof_ceiling_and_overhead());
            values.put(KEY_ROOF_CEILING_AND_OVERHEAD_MANDATORY, teaWarehouseMan.getRoof_ceiling_and_overhead_mandatory());
            values.put(KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS, teaWarehouseMan.getRoof_ceiling_and_overhead_remarks());
            values.put(KEY_WINDOWS, teaWarehouseMan.getWindows());
            values.put(KEY_WINDOWS_MANDATORY, teaWarehouseMan.getWindows_mandatory());
            values.put(KEY_WINDOWS_REMARKS, teaWarehouseMan.getWindows_remarks());
            values.put(KEY_DOORS, teaWarehouseMan.getDoors());
            values.put(KEY_DOORS_MANDATORY, teaWarehouseMan.getDoors_mandatory());
            values.put(KEY_DOORS_REMARKS, teaWarehouseMan.getDoors_remarks());
            values.put(KEY_PROTECTION_OF_LIGHT_TUBES, teaWarehouseMan.getProtection_of_light_tubes());
            values.put(KEY_PROTECTION_OF_LIGHT_TUBES_MANDATORY, teaWarehouseMan.getProtection_of_light_tubes_mandatory());
            values.put(KEY_PROTECTION_OF_LIGHT_TUBES_REMARKS, teaWarehouseMan.getProtection_of_light_tubes_remarks());
            values.put(KEY_MAINTENANCE_PROGRAMS, teaWarehouseMan.getMaintenance_programs());
            values.put(KEY_MAINTENANCE_PROGRAMS_MANDATORY, teaWarehouseMan.getMaintenance_programs_mandatory());
            values.put(KEY_MAINTENANCE_PROGRAMS_REMARKS, teaWarehouseMan.getMaintenance_programs_remarks());
            values.put(KEY_MAINTENANCE_RECORDS_MAINTAINED, teaWarehouseMan.getMaintenance_records_maintained());
            values.put(KEY_MAINTENANCE_RECORDS_MAINTAINED_MANDATORY, teaWarehouseMan.getMaintenance_records_maintained_mandatory());
            values.put(KEY_MAINTENANCE_RECORDS_MAINTAINED_REMARKS, teaWarehouseMan.getMaintenance_records_maintained_remarks());
            values.put(KEY_ARE_CONVETYOR_BELTS_PROTECTED, teaWarehouseMan.getAre_conveyor_belts_protected());
            values.put(KEY_ARE_CONVETYOR_BELTS_PROTECTED_MANDATORY, teaWarehouseMan.getAre_conveyor_belts_protected_mandatory());
            values.put(KEY_ARE_CONVETYOR_BELTS_PROTECTED_REMARKS, teaWarehouseMan.getAre_conveyor_belts_protected_remarks());
            values.put(KEY_PRODUCT_TESTING, teaWarehouseMan.getProduct_testing());
            values.put(KEY_PRODUCT_TESTING_MANDATORY, teaWarehouseMan.getProduct_testing_mandatory());
            values.put(KEY_PRODUCT_TESTING_REMARKS, teaWarehouseMan.getProduct_testing_remarks());
            values.put(KEY_CALIBRATION_OF_THE_WEIGHING_SCALE, teaWarehouseMan.getCalibration_of_weighing_scale());
            values.put(KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_MANDATORY, teaWarehouseMan.getCalibration_of_weighing_scale_mandatory());
            values.put(KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_REMARKS, teaWarehouseMan.getCalibration_of_weighing_scale_remarks());
            values.put(KEY_MEDICAL_EXAMINATION, teaWarehouseMan.getMedical_examination());
            values.put(KEY_MEDICAL_EXAMINATION_MANDATORY, teaWarehouseMan.getMedical_examination_mandatory());
            values.put(KEY_MEDICAL_EXAMINATION_REMARKS, teaWarehouseMan.getMedical_examination_remarks());
            values.put(KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION, teaWarehouseMan.getIncoming_product_vehicle_inspection());
            values.put(KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_MANDATORY, teaWarehouseMan.getIncoming_product_vehicle_inspection_mandatory());
            values.put(KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_REMARKS, teaWarehouseMan.getIncoming_product_vehicle_inspection_remarks());
            values.put(KEY_HYGIENE_HOUSEKEEPING_INSPECTION, teaWarehouseMan.getHygiene_housekeeping_inspection());
            values.put(KEY_HYGIENE_HOUSEKEEPING_INSPECTION_MANDATORY, teaWarehouseMan.getHygiene_housekeeping_inspection_mandatory());
            values.put(KEY_HYGIENE_HOUSEKEEPING_INSPECTION_REMARKS, teaWarehouseMan.getHygiene_housekeeping_inspection_remarks());
            values.put(KEY_OFFICER_RECOMMENDATION, teaWarehouseMan.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, teaWarehouseMan.getOfficerrecommendation_remark());
            values.put(KEY_DOCUMENT_STATUS, teaWarehouseMan.getDocument_status());

            result = db.update(TABLE_TEA_WAREHOUSE_MAN_INSPECTION, values, "id =" + Integer.parseInt(teaWarehouseMan.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<TeaWarehouseManInspectionDataCollection> getTeaWarehouseManInspectionList() {

        List<TeaWarehouseManInspectionDataCollection> teaWarehouseManList = new ArrayList<>();
        TeaWarehouseManInspectionDataCollection td = new TeaWarehouseManInspectionDataCollection();

//        String selectQuery = "SELECT  * FROM " + TABLE_TEA_WAREHOUSE_MAN_INSPECTION;
        String selectQuery = "SELECT  * FROM " + TABLE_TEA_WAREHOUSE_MAN_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Tea WarehouseMan Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new TeaWarehouseManInspectionDataCollection();
                    td.setAFA_TD_Warehousemanlicappl_ID(c.getString(c.getColumnIndex(KEY_TEA_WAREHOUSEMAN_INSPECTION_ID)));
//                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setLocalID(c.getString(c.getColumnIndex(KEY_ID)));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicense_number((c.getString((c.getColumnIndex(KEY_LICENSE_NUMBER)))));
                    td.setDocument_number((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setName_of_applicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setAFA_TD_Warehousemanlicappl_ID(c.getString(c.getColumnIndex(KEY_TEA_WAREHOUSEMAN_INSPECTION_ID)));


                    // adding to itinerary list
                    if (td.getDocument_number() != null && !td.getDocument_number().isEmpty()) {
                        teaWarehouseManList.add(td);
                    }
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking teaWarehouseManList data from the db" + teaWarehouseManList.size());
        return teaWarehouseManList;
    }

    public List<TeaWarehouseManInspectionDataCollection> getTeaWarehouseManInspectionDoneList() {

        List<TeaWarehouseManInspectionDataCollection> teaWarehouseManList = new ArrayList<>();
        TeaWarehouseManInspectionDataCollection td = new TeaWarehouseManInspectionDataCollection();

        String selectQuery = "SELECT  * FROM " + TABLE_TEA_WAREHOUSE_MAN_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'" +
                " AND " + KEY_UPLOADED + " = 'PENDING'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Tea WarehouseMan Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new TeaWarehouseManInspectionDataCollection();
                    td.setAFA_TD_Warehousemanlicappl_ID(c.getString(c.getColumnIndex(KEY_TEA_WAREHOUSEMAN_INSPECTION_ID)));
                    td.setLocalID(c.getString(c.getColumnIndex(KEY_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicense_number((c.getString((c.getColumnIndex(KEY_LICENSE_NUMBER)))));
                    td.setDocument_number((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setName_of_applicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setCertificate_of_company_registration(c.getString((c.getColumnIndex(KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_INCORP))));
                    td.setCertificate_of_company_registration_mandatory(c.getString((c.getColumnIndex(KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_MANDATORY))));
                    td.setCertificate_of_company_registration_remarks(c.getString((c.getColumnIndex(KEY_CERTIFICATE_OF_COMPANY_REGISTRATION_REMARKS))));
                    td.setValid_insurance_policy(c.getString((c.getColumnIndex(KEY_VALID_INSURANCE_POLICY))));
                    td.setValid_insurance_policy_mandatory(c.getString((c.getColumnIndex(KEY_VALID_INSURANCE_POLICY_MANDATORY))));
                    td.setValid_insurance_policy_remarks(c.getString((c.getColumnIndex(KEY_VALID_INSURANCE_POLICY_REMARKS))));
                    td.setBusiness_permit(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT))));
                    td.setBusiness_permit_mandatory(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT_MANDATORY))));
                    td.setBusiness_permit_remarks(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT_REMARKS))));
                    td.setHealth_certificate(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE))));
                    td.setHealth_certificate_mandatory(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE_MANDATORY))));
                    td.setHealth_certificate_remarks(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE_REMARKS))));
                    td.setSubmission_of_annual_returns(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_ANNUAL_RETURNS))));
                    td.setSubmission_of_annual_returns_mandatory(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_ANNUAL_RETURNS_MANDATORY))));
                    td.setSubmission_of_annual_returns_remarks(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_ANNUAL_RETURNS_REMARKS))));
                    td.setDocumented_hygiene_policy(c.getString((c.getColumnIndex(KEY_DOCUMENTED_HYGIENE_POLICY))));
                    td.setDocumented_hygiene_policy_mandatory(c.getString((c.getColumnIndex(KEY_DOCUMENTED_HYGIENE_POLICY_MANDATORY))));
                    td.setDocumented_hygiene_policy_remarks(c.getString((c.getColumnIndex(KEY_DOCUMENTED_HYGIENE_POLICY_REMARKS))));
                    td.setEvidence_of_implementation(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_IMPLEMENTATION))));
                    td.setEvidence_of_implementation_mandatory(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_IMPLEMENTATION_MANDATORY))));
                    td.setEvidence_of_implementation_remarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_IMPLEMENTATION_REMARKS))));
                    td.setFood_safety_hazard(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARD_RISK))));
                    td.setFood_safety_hazard_mandatory(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARD_RISK_MANDATORY))));
                    td.setFood_safety_hazard_remarks(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARD_RISK_REMARKS))));
                    td.setControl_measures(c.getString((c.getColumnIndex(KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS))));
                    td.setControl_measures_mandatory(c.getString((c.getColumnIndex(KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_MANDATORY))));
                    td.setControl_measures_remarks(c.getString((c.getColumnIndex(KEY_CONTROL_MEASURES_FOR_POTENTIAL_FOOD_SAFETY_CONTAMINANTS_REMARKS))));
                    td.setDocumented_glass_policy(c.getString((c.getColumnIndex(KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION))));
                    td.setDocumented_glass_policy_mandatory(c.getString((c.getColumnIndex(KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_MANDATORY))));
                    td.setDocumented_glass_policy_remarks(c.getString((c.getColumnIndex(KEY_DOCUMENTED_GLASS_POLICY_AND_GLASS_INSPECTION_REMARKS))));
                    td.setValid_medical_certificates(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATES))));
                    td.setValid_medical_certificates_mandatory(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATES_MANDATORY))));
                    td.setValid_medical_certificates_remarks(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATES_REMARKS))));
                    td.setAre_hygiene_trainings_conducted(c.getString((c.getColumnIndex(KEY_ARE_HYGIENE_TRAININGS_CONDUCTED))));
                    td.setAre_hygiene_trainings_conducted_mandatory(c.getString((c.getColumnIndex(KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_MANDATORY))));
                    td.setAre_hygiene_trainings_conducted_remarks(c.getString((c.getColumnIndex(KEY_ARE_HYGIENE_TRAININGS_CONDUCTED_REMARKS))));
                    td.setAdequate_and_clean_personal(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT))));
                    td.setAdequate_and_clean_personal_mandatory(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_MANDATORY))));
                    td.setAdequate_and_clean_personal_remarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL_PROTECTIVE_EQUIPMENT_REMARKS))));
                    td.setPersonnel_hygiene_practices_followed(c.getString((c.getColumnIndex(KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED))));
                    td.setPersonnel_hygiene_practices_followed_mandatory(c.getString((c.getColumnIndex(KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_MANDATORY))));
                    td.setPersonnel_hygiene_practices_followed_remarks(c.getString((c.getColumnIndex(KEY_PERSONELL_HYGIENE_PRACTICES_FOLLOWED_REMARKS))));
                    td.setChanging_rooms_and_toilets(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS))));
                    td.setChanging_rooms_and_toilets_mandatory(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS_MANDATORY))));
                    td.setChanging_rooms_and_toilets_remarks(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS))));
                    td.setDocumented_cleaning_programs(c.getString((c.getColumnIndex(KEY_DOCUMENTED_CLEANNG_PROGRAMS))));
                    td.setDocumented_cleaning_programs_mandatory(c.getString((c.getColumnIndex(KEY_DOCUMENTED_CLEANNG_PROGRAMS_MANDATORY))));
                    td.setDocumented_cleaning_programs_remarks(c.getString((c.getColumnIndex(KEY_DOCUMENTED_CLEANNG_PROGRAMS_REMARKS))));
                    td.setCleaning_records_kept(c.getString((c.getColumnIndex(KEY_CLEANING_RECORDS_KEPT))));
                    td.setCleaning_records_kept_mandatory(c.getString((c.getColumnIndex(KEY_CLEANING_RECORDS_KEPT_MANDATORY))));
                    td.setCleaning_records_kept_remarks(c.getString((c.getColumnIndex(KEY_CLEANING_RECORDS_KEPT_REMARKS))));
                    td.setSegregation_and_labelling(c.getString((c.getColumnIndex(KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS))));
                    td.setSegregation_and_labelling_mandatory(c.getString((c.getColumnIndex(KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_MANDATORY))));
                    td.setSegregation_and_labelling_remarks(c.getString((c.getColumnIndex(KEY_SEGREGATION_AND_LABELLING_OF_CLEANING_DETERGENTS_REMARKS))));
                    td.setAre_all_pests_excluded(c.getString((c.getColumnIndex(KEY_ARE_ALL_PESTS_EXCLUDED))));
                    td.setAre_all_pests_excluded_mandatory(c.getString((c.getColumnIndex(KEY_ARE_ALL_PESTS_EXCLUDED_MANDATORY))));
                    td.setAre_all_pests_excluded_remarks(c.getString((c.getColumnIndex(KEY_ARE_ALL_PESTS_EXCLUDED_REMARKS))));
                    td.setUp_to_date_bait_map(c.getString((c.getColumnIndex(KEY_UP_TO_DATE_BAIT_MAP))));
                    td.setUp_to_date_bait_map_mandatory(c.getString((c.getColumnIndex(KEY_UP_TO_DATE_BAIT_MAP_MANDATORY))));
                    td.setUp_to_date_bait_map_remarks(c.getString((c.getColumnIndex(KEY_UP_TO_DATE_BAIT_MAP_REMARKS))));
                    td.setInspection_every_three_months(c.getString((c.getColumnIndex(KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS))));
                    td.setInspection_every_three_months_mandatory(c.getString((c.getColumnIndex(KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_MANDATORY))));
                    td.setInspection_every_three_months_remarks(c.getString((c.getColumnIndex(KEY_INSPECTION_AT_LEAST_EVERY_3_MONTHS_REMARKS))));
                    td.setPrecaution_to_prevent(c.getString((c.getColumnIndex(KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION))));
                    td.setPrecaution_to_prevent_mandatory(c.getString((c.getColumnIndex(KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_MANDATORY))));
                    td.setPrecaution_to_prevent_remarks(c.getString((c.getColumnIndex(KEY_PRECAUTION_TO_PREVENT_POSSIBLE_CONTAMINATION_REMARKS))));
                    td.setStorage_distribution_and_transportation(c.getString((c.getColumnIndex(KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION))));
                    td.setStorage_distribution_and_transportation_mandatory(c.getString((c.getColumnIndex(KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_MANDATORY))));
                    td.setStorage_distribution_and_transportation_remarks(c.getString((c.getColumnIndex(KEY_STORAGE_DISTRIBUTION_AND_TRANSPORTATION_REMARKS))));
                    td.setWalls_and_partitions(c.getString((c.getColumnIndex(KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION))));
                    td.setWalls_and_partitions_mandatory(c.getString((c.getColumnIndex(KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_MANDATORY))));
                    td.setWalls_and_partitions_remarks(c.getString((c.getColumnIndex(KEY_PASSAGEWAY_AROUND_WALLS_AND_PARTITION_REMARKS))));
                    td.setProcedure_for_inspection(c.getString((c.getColumnIndex(KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS))));
                    td.setProcedure_for_inspection_mandatory(c.getString((c.getColumnIndex(KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_MANDATORY))));
                    td.setProcedure_for_inspection_remarks(c.getString((c.getColumnIndex(KEY_PROCEDURE_FOR_INSPECTION_OF_PRODUCTS_REMARKS))));
                    td.setProper_segregation_of_materials(c.getString((c.getColumnIndex(KEY_PROPER_SEGREGATION_OF_MATERIALS))));
                    td.setProper_segregation_of_materials_mandatory(c.getString((c.getColumnIndex(KEY_PROPER_SEGREGATION_OF_MATERIALS_MANDATORY))));
                    td.setProper_segregation_of_materials_remarks(c.getString((c.getColumnIndex(KEY_PROPER_SEGREGATION_OF_MATERIALS_REMARKS))));
                    td.setSecurity_access_control(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE))));
                    td.setSecurity_access_control_mandatory(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_MANDATORY))));
                    td.setSecurity_access_control_remarks(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL_TO_STORAGE_REMARKS))));
                    td.setSufficient_ventilation(c.getString((c.getColumnIndex(KEY_SUFFICIENT_VENTILATION))));
                    td.setSufficient_ventilation_mandatory(c.getString((c.getColumnIndex(KEY_SUFFICIENT_VENTILATION_MANDATORY))));
                    td.setSufficient_ventilation_remarks(c.getString((c.getColumnIndex(KEY_SUFFICIENT_VENTILATION_REMARKS))));
                    td.setAdequate_services(c.getString((c.getColumnIndex(KEY_ADEQUATE_SERVICES))));
                    td.setAdequate_services_mandatory(c.getString((c.getColumnIndex(KEY_ADEQUATE_SERVICES_MANDATORY))));
                    td.setAdequate_services_remarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_SERVICES_REMARKS))));
                    td.setProper_waste_collection(c.getString((c.getColumnIndex(KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL))));
                    td.setProper_waste_collection_mandatory(c.getString((c.getColumnIndex(KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_MANDATORY))));
                    td.setProper_waste_collection_remarks(c.getString((c.getColumnIndex(KEY_PROPER_WASTE_COLLECTION_STORAGE_AND_DISPOSAL_REMARKS))));
                    td.setExternal_site_standards(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS))));
                    td.setExternal_site_standards_mandatory(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS_MANDATORY))));
                    td.setExternal_site_standards_remarks(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS_REMARKS))));
                    td.setWalls(c.getString((c.getColumnIndex(KEY_WALLS))));
                    td.setWalls_mandatory(c.getString((c.getColumnIndex(KEY_WALLS_MANDATORY))));
                    td.setWalls_remarks(c.getString((c.getColumnIndex(KEY_WALLS_REMARKS))));
                    td.setFloors(c.getString((c.getColumnIndex(KEY_FLOORS))));
                    td.setFloors_mandatory(c.getString((c.getColumnIndex(KEY_FLOORS_MANDATORY))));
                    td.setFloors_remarks(c.getString((c.getColumnIndex(KEY_FLOORS_REMARKS))));
                    td.setRoof_ceiling_and_overhead(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD))));
                    td.setRoof_ceiling_and_overhead_mandatory(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD_MANDATORY))));
                    td.setRoof_ceiling_and_overhead_remarks(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS))));
                    td.setWindows(c.getString((c.getColumnIndex(KEY_WINDOWS))));
                    td.setWindows_mandatory(c.getString((c.getColumnIndex(KEY_WINDOWS_MANDATORY))));
                    td.setWindows_remarks(c.getString((c.getColumnIndex(KEY_WINDOWS_REMARKS))));
                    td.setDoors(c.getString((c.getColumnIndex(KEY_DOORS))));
                    td.setDoors_mandatory(c.getString((c.getColumnIndex(KEY_DOORS_MANDATORY))));
                    td.setDoors_remarks(c.getString((c.getColumnIndex(KEY_DOORS_REMARKS))));
                    td.setProtection_of_light_tubes(c.getString((c.getColumnIndex(KEY_PROTECTION_OF_LIGHT_TUBES))));
                    td.setProtection_of_light_tubes_mandatory(c.getString((c.getColumnIndex(KEY_PROTECTION_OF_LIGHT_TUBES_MANDATORY))));
                    td.setProtection_of_light_tubes_remarks(c.getString((c.getColumnIndex(KEY_PROTECTION_OF_LIGHT_TUBES_REMARKS))));
                    td.setMaintenance_programs(c.getString((c.getColumnIndex(KEY_MAINTENANCE_PROGRAMS))));
                    td.setMaintenance_programs_mandatory(c.getString((c.getColumnIndex(KEY_MAINTENANCE_PROGRAMS_MANDATORY))));
                    td.setMaintenance_programs_remarks(c.getString((c.getColumnIndex(KEY_MAINTENANCE_PROGRAMS_REMARKS))));
                    td.setMaintenance_records_maintained(c.getString((c.getColumnIndex(KEY_MAINTENANCE_RECORDS_MAINTAINED))));
                    td.setMaintenance_records_maintained_mandatory(c.getString((c.getColumnIndex(KEY_MAINTENANCE_RECORDS_MAINTAINED_MANDATORY))));
                    td.setMaintenance_records_maintained_remarks(c.getString((c.getColumnIndex(KEY_MAINTENANCE_RECORDS_MAINTAINED_REMARKS))));
                    td.setAre_conveyor_belts_protected(c.getString((c.getColumnIndex(KEY_ARE_CONVETYOR_BELTS_PROTECTED))));
                    td.setAre_conveyor_belts_protected_mandatory(c.getString((c.getColumnIndex(KEY_ARE_CONVETYOR_BELTS_PROTECTED_MANDATORY))));
                    td.setAre_conveyor_belts_protected_remarks(c.getString((c.getColumnIndex(KEY_ARE_CONVETYOR_BELTS_PROTECTED_REMARKS))));
                    td.setProduct_testing(c.getString((c.getColumnIndex(KEY_PRODUCT_TESTING))));
                    td.setProduct_testing_mandatory(c.getString((c.getColumnIndex(KEY_PRODUCT_TESTING_MANDATORY))));
                    td.setProduct_testing_remarks(c.getString((c.getColumnIndex(KEY_PRODUCT_TESTING_REMARKS))));
                    td.setCalibration_of_weighing_scale(c.getString((c.getColumnIndex(KEY_CALIBRATION_OF_THE_WEIGHING_SCALE))));
                    td.setCalibration_of_weighing_scale_mandatory(c.getString((c.getColumnIndex(KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_MANDATORY))));
                    td.setCalibration_of_weighing_scale_remarks(c.getString((c.getColumnIndex(KEY_CALIBRATION_OF_THE_WEIGHING_SCALE_REMARKS))));
                    td.setMedical_examination(c.getString((c.getColumnIndex(KEY_MEDICAL_EXAMINATION))));
                    td.setMedical_examination_mandatory(c.getString((c.getColumnIndex(KEY_MEDICAL_EXAMINATION_MANDATORY))));
                    td.setMedical_examination_remarks(c.getString((c.getColumnIndex(KEY_MEDICAL_EXAMINATION_REMARKS))));
                    td.setIncoming_product_vehicle_inspection(c.getString((c.getColumnIndex(KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION))));
                    td.setIncoming_product_vehicle_inspection_mandatory(c.getString((c.getColumnIndex(KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_MANDATORY))));
                    td.setIncoming_product_vehicle_inspection_remarks(c.getString((c.getColumnIndex(KEY_INCOMING_PRODUCT_VEHICLE_INSPECTION_REMARKS))));
                    td.setHygiene_housekeeping_inspection(c.getString((c.getColumnIndex(KEY_HYGIENE_HOUSEKEEPING_INSPECTION))));
                    td.setHygiene_housekeeping_inspection_mandatory(c.getString((c.getColumnIndex(KEY_HYGIENE_HOUSEKEEPING_INSPECTION_MANDATORY))));
                    td.setHygiene_housekeeping_inspection_remarks(c.getString((c.getColumnIndex(KEY_HYGIENE_HOUSEKEEPING_INSPECTION_REMARKS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setDocument_status(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list
                    teaWarehouseManList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking teaWarehouseManList data from the db" + teaWarehouseManList.size());
        return teaWarehouseManList;
    }

    public boolean updateTeaWarehousemanSent(String localD, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_TEA_WAREHOUSE_MAN_INSPECTION, values, KEY_ID + " =" + localD, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }

        // updating row
      /*  return db.update(tableName, values, KEY_SHOP_ID + " = ?",
                new String[] { String.valueOf(shopID) });*/
    }

    /* END OF TEA WAREHOUSEMAN INSPECTION CHECKLIST */
    /* START OF TEA BUYER IMPORTER EXPORTER*/

    private static final String KEY_TEA_BUYER_IMPORTER_EXPORTER_ID = "tea_buyer_importer_exporter_id";
    /* private static final String KEY_TEA_WAREHOUSEMAN_DOCUMENT_NUMBER = "document_number";
    private static final String KEY_TEA_WAREHOUSEMAN_DOCUMENT_DATE = "document_date";
    private static final String KEY_LICENSE_NUMBER = "license_number"; */
    private static final String KEY_APPLICANT_NAME = "applicant_name";
    private static final String KEY_VALID_TBK = "valid_tbk";
    private static final String KEY_VALID_TBK_MARKS = "valid_tbk_marks";
    private static final String KEY_VALID_TBK_REMARKS = "valid_tbk_remarks";
    //    private static final String KEY_BUSINESS_PERMIT = "business_permit";
    private static final String KEY_BUSINESS_PERMIT_MARKS = "business_permit_marks";
    //    private static final String KEY_BUSINESS_PERMIT_REMARKS = "business_permit_remarks";
//    private static final String KEY_HEALTH_CERTIFICATE = "health_certificate";
    private static final String KEY_HEALTH_CERTIFICATE_MARKS = "health_certificate_marks";
    //    private static final String KEY_HEALTH_CERTIFICATE_REMARKS = "health_certificate_remarks";
    private static final String KEY_SUBMISSION_OF_MONTHLY_RETURNS = "submission_of_monthly_returns";
    private static final String KEY_SUBMISSION_OF_MONTHLY_RETURNS_MARKS = "submission_of_monthly_returns_marks";
    private static final String KEY_SUBMISSION_OF_MONTHLY_RETURNS_REMARKS = "submission_of_monthly_returns_remarks";
    private static final String KEY_REGISTRATION_OF_EXPORTS_DONE = "registration_of_exports_done";
    private static final String KEY_REGISTRATION_OF_EXPORTS_DONE_MARKS = "registration_of_exports_done_marks";
    private static final String KEY_REGISTRATION_OF_EXPORTS_DONE_REMARKS = "registration_of_exports_done_remarks";
    private static final String KEY_REGISTRATION_OF_IMPORTS_DONE = "registration_of_imports_done";
    private static final String KEY_REGISTRATION_OF_IMPORTS_DONE_MARKS = "registration_of_imports_done_marks";
    private static final String KEY_REGISTRATION_OF_IMPORTS_DONE_REMARKS = "registration_of_imports_done_remarks";
    private static final String KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC = "are_imports_accompanied_by_coc";
    private static final String KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_MARKS = "are_imports_accompanied_by_coc_marks";
    private static final String KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_REMARKS = "are_imports_accompanied_by_coc_remarks";
    private static final String KEY_REEXPORT_OF_IMPORTED_TEAS = "reexport_of_imported_teas";
    private static final String KEY_REEXPORT_OF_IMPORTED_TEAS_MARKS = "reexport_of_imported_teas_marks";
    private static final String KEY_REEXPORT_OF_IMPORTED_TEAS_REMARKS = "reexport_of_imported_teas_remarks";
    private static final String KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS = "reexport_or_destruction_of_imports";
    private static final String KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_MARKS = "reexport_or_destruction_of_imports_marks";
    private static final String KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_REMARKS = "reexport_or_destruction_of_imports_remarks";
    //    private static final String KEY_EXTERNAL_SITE_STANDARDS = "external_site_standards";
    private static final String KEY_EXTERNAL_SITE_STANDARDS_MARKS = "external_site_standards_marks";
    //    private static final String KEY_EXTERNAL_SITE_STANDARDS_REMARKS = "external_site_standards_remarks";
    private static final String KEY_SECURITY_ACCESS_CONTROL = "security_access_control";
    private static final String KEY_SECURITY_ACCESS_CONTROL_MARKS = "security_access_control_marks";
    private static final String KEY_SECURITY_ACCESS_CONTROL_REMARKS = "security_access_control_remarks";
    private static final String KEY_LAYOUT_PRODUCT_FLOW = "layout_product_flow";
    private static final String KEY_LAYOUT_PRODUCT_FLOW_MARKS = "layout_product_flow_marks";
    private static final String KEY_LAYOUT_PRODUCT_FLOW_REMARKS = "layout_product_flow_remarks";
    //    private static final String KEY_WALLS = "walls";
    private static final String KEY_WALLS_MARKS = "walls_marks";
    //    private static final String KEY_WALLS_REMARKS = "walls_remarks";
//    private static final String KEY_FLOORS = "floors";
    private static final String KEY_FLOORS_MARKS = "floors_marks";
    //    private static final String KEY_FLOORS_REMARKS = "floors_remarks";
//    private static final String KEY_ROOF_CEILING_AND_OVERHEAD = "roof_ceiling_and_overhead";
    private static final String KEY_ROOF_CEILING_AND_OVERHEAD_MARKS = "roof_ceiling_and_overhead_marks";
    //    private static final String KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS = "roof_ceiling_and_overhead_remarks";
//    private static final String KEY_WINDOWS = "windows";
    private static final String KEY_WINDOWS_MARKS = "windows_marks";
    //    private static final String KEY_WINDOWS_REMARKS = "windows_remarks";
//    private static final String KEY_DOORS = "doors";
    private static final String KEY_DOORS_MARKS = "doors_marks";
    //    private static final String KEY_DOORS_REMARKS = "doors_remarks";
    private static final String KEY_ADEQUATE_LIGHTING = "adequate_lighting";
    private static final String KEY_ADEQUATE_LIGHTING_MARKS = "adequate_lighting_marks";
    private static final String KEY_ADEQUATE_LIGHTING_REMARKS = "adequate_lighting_remarks";
    private static final String KEY_VENTILATION = "ventilation";
    private static final String KEY_VENTILATION_MARKS = "ventilation_marks";
    private static final String KEY_VENTILATION_REMARKS = "ventilation_remarks";
    private static final String KEY_EQUIPMENT_CLEANLINESS = "equipment_cleanliness";
    private static final String KEY_EQUIPMENT_CLEANLINESS_MARKS = "equipment_cleanliness_marks";
    private static final String KEY_EQUIPMENT_CLEANLINESS_REMARKS = "equipment_cleanliness_remarks";
    //    private static final String KEY_CHANGING_ROOMS_AND_TOILETS = "changing_rooms_and_toilets";
    private static final String KEY_CHANGING_ROOMS_AND_TOILETS_MARKS = "changing_rooms_and_toilets_marks";
    //    private static final String KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS = "changing_rooms_and_toilets_remarks";
    private static final String KEY_RISK_OF_CONTAMINANTS = "risk_of_contaminants";
    private static final String KEY_RISK_OF_CONTAMINANTS_MARKS = "risk_of_contaminants_marks";
    private static final String KEY_RISK_OF_CONTAMINANTS_REMARKS = "risk_of_contaminants_remarks";
    private static final String KEY_WASTE_TEAS_DISPOSAL = "waste_teas_disposal";
    private static final String KEY_WASTE_TEAS_DISPOSAL_MARKS = "waste_teas_disposal_marks";
    private static final String KEY_WASTE_TEAS_DISPOSAL_REMARKS = "waste_teas_disposal_remarks";
    private static final String KEY_PEST_CONTROL_PROGRAMS = "pest_control_programs";
    private static final String KEY_PEST_CONTROL_PROGRAMS_MARKS = "pest_control_programs_marks";
    private static final String KEY_PEST_CONTROL_PROGRAMS_REMARKS = "pest_control_programs_remarks";
    private static final String KEY_PROPER_STORAGE_TRANSPORTATION = "proper_storage_transportation";
    private static final String KEY_PROPER_STORAGE_TRANSPORTATION_MARKS = "proper_storage_transportation_marks";
    private static final String KEY_PROPER_STORAGE_TRANSPORTATION_REMARKS = "proper_storage_transportation_remarks";
    private static final String KEY_PACKAGING_MATERIAL_CONFORMITY = "packaging_material_conformity";
    private static final String KEY_PACKAGING_MATERIAL_CONFORMITY_MARKS = "packaging_material_conformity_marks";
    private static final String KEY_PACKAGING_MATERIAL_CONFORMITY_REMARKS = "packaging_material_conformity_remarks";
    private static final String KEY_NON_CONFORMING_PRODUCT_HANDLING = "non_conforming_product_handling";
    private static final String KEY_NON_CONFORMING_PRODUCT_HANDLING_MARKS = "non_conforming_product_handling_marks";
    private static final String KEY_NON_CONFORMING_PRODUCT_HANDLING_REMARKS = "non_conforming_product_handling_remarks";
    private static final String KEY_PALLETS_ARE_HEAT_TREATED = "pallets_are_heat_treated";
    private static final String KEY_PALLETS_ARE_HEAT_TREATED_MARKS = "pallets_are_heat_treated_marks";
    private static final String KEY_PALLETS_ARE_HEAT_TREATED_REMARKS = "pallets_are_heat_treated_remarks";
    private static final String KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED = "are_tea_dispatch_records_maintained";
    private static final String KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_MARKS = "are_tea_dispatch_records_maintained_marks";
    private static final String KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_REMARKS = "are_tea_dispatch_records_maintained_remarks";
    private static final String KEY_EQUIPMENT_IDENTIFICATION = "equipment_identification";
    private static final String KEY_EQUIPMENT_IDENTIFICATION_MARKS = "equipment_identification_marks";
    private static final String KEY_EQUIPMENT_IDENTIFICATION_REMARKS = "equipment_identification_remarks";
    private static final String KEY_TRACEABILITY_SYSTEM = "traceability_system";
    private static final String KEY_TRACEABILITY_SYSTEM_MARKS = "traceability_system_marks";
    private static final String KEY_TRACEABILITY_SYSTEM_REMARKS = "traceability_system_remarks";
    private static final String KEY_FOOD_SAFETY_HAZARDS = "food_safety_hazards";
    private static final String KEY_FOOD_SAFETY_HAZARDS_MARKS = "food_safety_hazards_marks";
    private static final String KEY_FOOD_SAFETY_HAZARDS_REMARKS = "food_safety_hazards_remarks";
    private static final String KEY_CUSTOMER_FEEDBACK_RECORDS = "customer_feedback_records";
    private static final String KEY_CUSTOMER_FEEDBACK_RECORDS_MARKS = "customer_feedback_records_marks";
    private static final String KEY_CUSTOMER_FEEDBACK_RECORDS_REMARKS = "customer_feedback_records_remarks";
    private static final String KEY_PROCESS_DOCUMENTS_AND_RECORDS = "process_documents_and_records";
    private static final String KEY_PROCESS_DOCUMENTS_AND_RECORDS_MARKS = "process_documents_and_records_marks";
    private static final String KEY_PROCESS_DOCUMENTS_AND_RECORDS_REMARKS = "process_documents_and_records_remarks";
    private static final String KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE = "documented_personal_hygiene_procedure";
    private static final String KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_MARKS = "documented_personal_hygiene_procedure_marks";
    private static final String KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_REMARKS = "documented_personal_hygiene_procedure_remarks";
    private static final String KEY_MEDICAL_SCREENING = "medical_screening";
    private static final String KEY_MEDICAL_SCREENING_MARKS = "medical_screening_marks";
    private static final String KEY_MEDICAL_SCREENING_REMARKS = "medical_screening_remarks";
    private static final String KEY_VALID_MEDICAL_CERTIFICATE = "valid_medical_certificate";
    private static final String KEY_VALID_MEDICAL_CERTIFICATE_MARKS = "valid_medical_certificate_marks";
    private static final String KEY_VALID_MEDICAL_CERTIFICATE_REMARKS = "valid_medical_certificate_remarks";
    private static final String KEY_ADEQUATE_AND_CLEAN_PERSONAL = "adequate_and_clean_personal";
    private static final String KEY_ADEQUATE_AND_CLEAN_PERSONAL_MARKS = "adequate_and_clean_personal_marks";
    private static final String KEY_ADEQUATE_AND_CLEAN_PERSONAL_REMARKS = "adequate_and_clean_personal_remarks";
    private static final String KEY_VALID_CERTIFICATE_OF_REGISTRATION = "valid_certificate_of_registration";
    private static final String KEY_VALID_CERTIFICATE_OF_REGISTRATION_MARKS = "valid_certificate_of_registration_marks";
    private static final String KEY_VALID_CERTIFICATE_OF_REGISTRATION_REMARKS = "valid_certificate_of_registration_remarks";
    private static final String KEY_INCIDENT_AND_ACCIDENT_REPORTS = "incident_and_accident_reports";
    private static final String KEY_INCIDENT_AND_ACCIDENT_REPORTS_MARKS = "incident_and_accident_reports_marks";
    private static final String KEY_INCIDENT_AND_ACCIDENT_REPORTS_REMARKS = "incident_and_accident_reports_remarks";
    private static final String KEY_FIRE_EQUIPMENT_INSPECTION = "fire_equipment_inspection";
    private static final String KEY_FIRE_EQUIPMENT_INSPECTION_MARKS = "fire_equipment_inspection_marks";
    private static final String KEY_FIRE_EQUIPMENT_INSPECTION_REMARKS = "fire_equipment_inspection_remarks";
    private static final String KEY_MARKED_ZONES = "marked_zones";
    private static final String KEY_MARKED_ZONES_MARKS = "marked_zones_marks";
    private static final String KEY_MARKED_ZONES_REMARKS = "marked_zones_remarks";
    private static final String KEY_COMPLIANCE_WITH_LABOUR_RULES = "compliance_with_labour_rules";
    private static final String KEY_COMPLIANCE_WITH_LABOUR_RULES_MARKS = "compliance_with_labour_rules_marks";
    private static final String KEY_COMPLIANCE_WITH_LABOUR_RULES_REMARKS = "compliance_with_labour_rules_remarks";
    private static final String KEY_COMPLIANCE_WITH_OHS_ACT = "compliance_with_ohs_act";
    private static final String KEY_COMPLIANCE_WITH_OHS_ACT_MARKS = "compliance_with_ohs_act_marks";
    private static final String KEY_COMPLIANCE_WITH_OHS_ACT_REMARKS = "compliance_with_ohs_act_remarks";
    private static final String KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS = "correction_of_previous_inspection_gaps";
    private static final String KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_MARKS = "correction_of_previous_inspection_gaps_marks";
    private static final String KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_REMARKS = "correction_of_previous_inspection_gaps_remarks";
//    private static final String KEY_DOCUMENT_STATUS = "document_status";


    public static final String TABLE_TEA_BUYER_IMPORTER_EXPORTER = "tea_buyer_importer_exporter";

    public static final String CREATE_TABLE_TEA_BUYER_IMPORTER_EXPORTER = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_TEA_BUYER_IMPORTER_EXPORTER + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_TEA_BUYER_IMPORTER_EXPORTER_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT ,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_APPLICANT_NAME + " TEXT ,"
            + KEY_LICENSE_NUMBER + " TEXT ,"
            + KEY_VALID_TBK + " TEXT ,"
            + KEY_VALID_TBK_MARKS + " TEXT ,"
            + KEY_VALID_TBK_REMARKS + " TEXT ,"
            + KEY_BUSINESS_PERMIT + " TEXT ,"
            + KEY_BUSINESS_PERMIT_MARKS + " TEXT ,"
            + KEY_BUSINESS_PERMIT_REMARKS + " TEXT ,"
            + KEY_HEALTH_CERTIFICATE + " TEXT ,"
            + KEY_HEALTH_CERTIFICATE_MARKS + " TEXT ,"
            + KEY_HEALTH_CERTIFICATE_REMARKS + " TEXT ,"
            + KEY_SUBMISSION_OF_MONTHLY_RETURNS + " TEXT ,"
            + KEY_SUBMISSION_OF_MONTHLY_RETURNS_MARKS + " TEXT ,"
            + KEY_SUBMISSION_OF_MONTHLY_RETURNS_REMARKS + " TEXT ,"
            + KEY_REGISTRATION_OF_EXPORTS_DONE + " TEXT ,"
            + KEY_REGISTRATION_OF_EXPORTS_DONE_MARKS + " TEXT ,"
            + KEY_REGISTRATION_OF_EXPORTS_DONE_REMARKS + " TEXT ,"
            + KEY_REGISTRATION_OF_IMPORTS_DONE + " TEXT ,"
            + KEY_REGISTRATION_OF_IMPORTS_DONE_MARKS + " TEXT ,"
            + KEY_REGISTRATION_OF_IMPORTS_DONE_REMARKS + " TEXT ,"
            + KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC + " TEXT ,"
            + KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_MARKS + " TEXT ,"
            + KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_REMARKS + " TEXT ,"
            + KEY_REEXPORT_OF_IMPORTED_TEAS + " TEXT ,"
            + KEY_REEXPORT_OF_IMPORTED_TEAS_MARKS + " TEXT ,"
            + KEY_REEXPORT_OF_IMPORTED_TEAS_REMARKS + " TEXT ,"
            + KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS + " TEXT ,"
            + KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_MARKS + " TEXT ,"
            + KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_REMARKS + " TEXT ,"
            + KEY_EXTERNAL_SITE_STANDARDS + " TEXT ,"
            + KEY_EXTERNAL_SITE_STANDARDS_MARKS + " TEXT ,"
            + KEY_EXTERNAL_SITE_STANDARDS_REMARKS + " TEXT ,"
            + KEY_SECURITY_ACCESS_CONTROL + " TEXT ,"
            + KEY_SECURITY_ACCESS_CONTROL_MARKS + " TEXT ,"
            + KEY_SECURITY_ACCESS_CONTROL_REMARKS + " TEXT ,"
            + KEY_LAYOUT_PRODUCT_FLOW + " TEXT ,"
            + KEY_LAYOUT_PRODUCT_FLOW_MARKS + " TEXT ,"
            + KEY_LAYOUT_PRODUCT_FLOW_REMARKS + " TEXT ,"
            + KEY_WALLS + " TEXT ,"
            + KEY_WALLS_MARKS + " TEXT ,"
            + KEY_WALLS_REMARKS + " TEXT ,"
            + KEY_FLOORS + " TEXT ,"
            + KEY_FLOORS_MARKS + " TEXT ,"
            + KEY_FLOORS_REMARKS + " TEXT ,"
            + KEY_ROOF_CEILING_AND_OVERHEAD + " TEXT ,"
            + KEY_ROOF_CEILING_AND_OVERHEAD_MARKS + " TEXT ,"
            + KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS + " TEXT ,"
            + KEY_WINDOWS + " TEXT ,"
            + KEY_WINDOWS_MARKS + " TEXT ,"
            + KEY_WINDOWS_REMARKS + " TEXT ,"
            + KEY_DOORS + " TEXT ,"
            + KEY_DOORS_MARKS + " TEXT ,"
            + KEY_DOORS_REMARKS + " TEXT ,"
            + KEY_ADEQUATE_LIGHTING + " TEXT ,"
            + KEY_ADEQUATE_LIGHTING_MARKS + " TEXT ,"
            + KEY_ADEQUATE_LIGHTING_REMARKS + " TEXT ,"
            + KEY_VENTILATION + " TEXT ,"
            + KEY_VENTILATION_MARKS + " TEXT ,"
            + KEY_VENTILATION_REMARKS + " TEXT ,"
            + KEY_EQUIPMENT_CLEANLINESS + " TEXT ,"
            + KEY_EQUIPMENT_CLEANLINESS_MARKS + " TEXT ,"
            + KEY_EQUIPMENT_CLEANLINESS_REMARKS + " TEXT ,"
            + KEY_CHANGING_ROOMS_AND_TOILETS + " TEXT ,"
            + KEY_CHANGING_ROOMS_AND_TOILETS_MARKS + " TEXT ,"
            + KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS + " TEXT ,"
            + KEY_RISK_OF_CONTAMINANTS + " TEXT ,"
            + KEY_RISK_OF_CONTAMINANTS_MARKS + " TEXT ,"
            + KEY_RISK_OF_CONTAMINANTS_REMARKS + " TEXT ,"
            + KEY_WASTE_TEAS_DISPOSAL + " TEXT ,"
            + KEY_WASTE_TEAS_DISPOSAL_MARKS + " TEXT ,"
            + KEY_WASTE_TEAS_DISPOSAL_REMARKS + " TEXT ,"
            + KEY_PEST_CONTROL_PROGRAMS + " TEXT ,"
            + KEY_PEST_CONTROL_PROGRAMS_MARKS + " TEXT ,"
            + KEY_PEST_CONTROL_PROGRAMS_REMARKS + " TEXT ,"
            + KEY_PROPER_STORAGE_TRANSPORTATION + " TEXT ,"
            + KEY_PROPER_STORAGE_TRANSPORTATION_MARKS + " TEXT ,"
            + KEY_PROPER_STORAGE_TRANSPORTATION_REMARKS + " TEXT ,"
            + KEY_PACKAGING_MATERIAL_CONFORMITY + " TEXT ,"
            + KEY_PACKAGING_MATERIAL_CONFORMITY_MARKS + " TEXT ,"
            + KEY_PACKAGING_MATERIAL_CONFORMITY_REMARKS + " TEXT ,"
            + KEY_NON_CONFORMING_PRODUCT_HANDLING + " TEXT ,"
            + KEY_NON_CONFORMING_PRODUCT_HANDLING_MARKS + " TEXT ,"
            + KEY_NON_CONFORMING_PRODUCT_HANDLING_REMARKS + " TEXT ,"
            + KEY_PALLETS_ARE_HEAT_TREATED + " TEXT ,"
            + KEY_PALLETS_ARE_HEAT_TREATED_MARKS + " TEXT ,"
            + KEY_PALLETS_ARE_HEAT_TREATED_REMARKS + " TEXT ,"
            + KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED + " TEXT ,"
            + KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_MARKS + " TEXT ,"
            + KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_REMARKS + " TEXT ,"
            + KEY_EQUIPMENT_IDENTIFICATION + " TEXT ,"
            + KEY_EQUIPMENT_IDENTIFICATION_MARKS + " TEXT ,"
            + KEY_EQUIPMENT_IDENTIFICATION_REMARKS + " TEXT ,"
            + KEY_TRACEABILITY_SYSTEM + " TEXT ,"
            + KEY_TRACEABILITY_SYSTEM_MARKS + " TEXT ,"
            + KEY_TRACEABILITY_SYSTEM_REMARKS + " TEXT ,"
            + KEY_FOOD_SAFETY_HAZARDS + " TEXT ,"
            + KEY_FOOD_SAFETY_HAZARDS_MARKS + " TEXT ,"
            + KEY_FOOD_SAFETY_HAZARDS_REMARKS + " TEXT ,"
            + KEY_CUSTOMER_FEEDBACK_RECORDS + " TEXT ,"
            + KEY_CUSTOMER_FEEDBACK_RECORDS_MARKS + " TEXT ,"
            + KEY_CUSTOMER_FEEDBACK_RECORDS_REMARKS + " TEXT ,"
            + KEY_PROCESS_DOCUMENTS_AND_RECORDS + " TEXT ,"
            + KEY_PROCESS_DOCUMENTS_AND_RECORDS_MARKS + " TEXT ,"
            + KEY_PROCESS_DOCUMENTS_AND_RECORDS_REMARKS + " TEXT ,"
            + KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE + " TEXT ,"
            + KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_MARKS + " TEXT ,"
            + KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_REMARKS + " TEXT ,"
            + KEY_MEDICAL_SCREENING + " TEXT ,"
            + KEY_MEDICAL_SCREENING_MARKS + " TEXT ,"
            + KEY_MEDICAL_SCREENING_REMARKS + " TEXT ,"
            + KEY_VALID_MEDICAL_CERTIFICATE + " TEXT ,"
            + KEY_VALID_MEDICAL_CERTIFICATE_MARKS + " TEXT ,"
            + KEY_VALID_MEDICAL_CERTIFICATE_REMARKS + " TEXT ,"
            + KEY_ADEQUATE_AND_CLEAN_PERSONAL + " TEXT ,"
            + KEY_ADEQUATE_AND_CLEAN_PERSONAL_MARKS + " TEXT ,"
            + KEY_ADEQUATE_AND_CLEAN_PERSONAL_REMARKS + " TEXT ,"
            + KEY_VALID_CERTIFICATE_OF_REGISTRATION + " TEXT ,"
            + KEY_VALID_CERTIFICATE_OF_REGISTRATION_MARKS + " TEXT ,"
            + KEY_VALID_CERTIFICATE_OF_REGISTRATION_REMARKS + " TEXT ,"
            + KEY_INCIDENT_AND_ACCIDENT_REPORTS + " TEXT ,"
            + KEY_INCIDENT_AND_ACCIDENT_REPORTS_MARKS + " TEXT ,"
            + KEY_INCIDENT_AND_ACCIDENT_REPORTS_REMARKS + " TEXT ,"
            + KEY_FIRE_EQUIPMENT_INSPECTION + " TEXT ,"
            + KEY_FIRE_EQUIPMENT_INSPECTION_MARKS + " TEXT ,"
            + KEY_FIRE_EQUIPMENT_INSPECTION_REMARKS + " TEXT ,"
            + KEY_MARKED_ZONES + " TEXT ,"
            + KEY_MARKED_ZONES_MARKS + " TEXT ,"
            + KEY_MARKED_ZONES_REMARKS + " TEXT ,"
            + KEY_COMPLIANCE_WITH_LABOUR_RULES + " TEXT ,"
            + KEY_COMPLIANCE_WITH_LABOUR_RULES_MARKS + " TEXT ,"
            + KEY_COMPLIANCE_WITH_LABOUR_RULES_REMARKS + " TEXT ,"
            + KEY_COMPLIANCE_WITH_OHS_ACT + " TEXT ,"
            + KEY_COMPLIANCE_WITH_OHS_ACT_MARKS + " TEXT ,"
            + KEY_COMPLIANCE_WITH_OHS_ACT_REMARKS + " TEXT ,"
            + KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS + " TEXT ,"
            + KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_MARKS + " TEXT ,"
            + KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_REMARKS + " TEXT ,"
            + KEY_DOCUMENT_STATUS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertTeaBuyerImporterExporter(TeaBuyerImporterExporterDetails teaBuyerImporterExporterDetails) {

        System.out.println("AFA_TD_IM_EX_Porter_Lic_ID document number:" + teaBuyerImporterExporterDetails.getDocumentNumber());

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, teaBuyerImporterExporterDetails.getLocalID());
        values.put(KEY_TEA_BUYER_IMPORTER_EXPORTER_ID, teaBuyerImporterExporterDetails.getAFA_TD_Inspection_Checklist_ID());

        values.put(KEY_DOCUMENT_NUMBER, teaBuyerImporterExporterDetails.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, teaBuyerImporterExporterDetails.getDocumentDate());

        values.put(KEY_LICENSE_NUMBER, teaBuyerImporterExporterDetails.getLicenseNumber());

        values.put(KEY_APPLICANT_NAME, teaBuyerImporterExporterDetails.getApplicantName());

        values.put(KEY_INSPECTION_DONE, "N");

        // insert row

        long teaBuyerImporterExporterID = db.insertWithOnConflict(TABLE_TEA_BUYER_IMPORTER_EXPORTER, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("teaBuyerImporterExporterID: " + teaBuyerImporterExporterID);

        closeDB();
        return teaBuyerImporterExporterID;
    }

    public void deleteTeaBuyerImporterExporter() {
        String deleteQuery = "DELETE FROM " + TABLE_TEA_BUYER_IMPORTER_EXPORTER;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public long updateTeaBuyerImporterExporter(TeaBuyerImporterExporter teaBuyerImporterExporter) {

        System.out.println("records  to be saved  ID:" + teaBuyerImporterExporter.getLocalID());

        System.out.println("document_number to be saved:" + teaBuyerImporterExporter.getDocumentNumber());

        System.out.println("document_date to be saved:" + teaBuyerImporterExporter.getDocumentDate());

        System.out.println("license number to be saved:" + teaBuyerImporterExporter.getLicenseNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_VALID_TBK, teaBuyerImporterExporter.getIsValidTbk());
            values.put(KEY_VALID_TBK_MARKS, teaBuyerImporterExporter.getValidTbkMarks());
            values.put(KEY_VALID_TBK_REMARKS, teaBuyerImporterExporter.getValidTbkRemarks());
            values.put(KEY_BUSINESS_PERMIT, teaBuyerImporterExporter.getIsBusinessPermit());
            values.put(KEY_BUSINESS_PERMIT_MARKS, teaBuyerImporterExporter.getBusinessPermitMarks());
            values.put(KEY_BUSINESS_PERMIT_REMARKS, teaBuyerImporterExporter.getBusinessPermitRemarks());
            values.put(KEY_HEALTH_CERTIFICATE, teaBuyerImporterExporter.getIsHealthCertificate());
            values.put(KEY_HEALTH_CERTIFICATE_MARKS, teaBuyerImporterExporter.getHealthCertificateMarks());
            values.put(KEY_HEALTH_CERTIFICATE_REMARKS, teaBuyerImporterExporter.getHealthCertificateRemarks());
            values.put(KEY_SUBMISSION_OF_MONTHLY_RETURNS, teaBuyerImporterExporter.getIsSubmissionOfMonthlyReturns());
            values.put(KEY_SUBMISSION_OF_MONTHLY_RETURNS_MARKS, teaBuyerImporterExporter.getSubmissionOfMonthlyReturnsMarks());
            values.put(KEY_SUBMISSION_OF_MONTHLY_RETURNS_REMARKS, teaBuyerImporterExporter.getSubmissionOfMonthlyReturnsRemarks());
            values.put(KEY_REGISTRATION_OF_EXPORTS_DONE, teaBuyerImporterExporter.getIsRegistrationOfExportsDone());
            values.put(KEY_REGISTRATION_OF_EXPORTS_DONE_MARKS, teaBuyerImporterExporter.getRegistrationOfExportsDoneMarks());
            values.put(KEY_REGISTRATION_OF_EXPORTS_DONE_REMARKS, teaBuyerImporterExporter.getRegistrationOfExportsDoneRemarks());
            values.put(KEY_REGISTRATION_OF_IMPORTS_DONE, teaBuyerImporterExporter.getIsRegistrationOfImportsDone());
            values.put(KEY_REGISTRATION_OF_IMPORTS_DONE_MARKS, teaBuyerImporterExporter.getRegistrationOfImportsDoneMarks());
            values.put(KEY_REGISTRATION_OF_IMPORTS_DONE_REMARKS, teaBuyerImporterExporter.getRegistrationOfImportsDoneRemarks());
            values.put(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC, teaBuyerImporterExporter.getIsImportsAccompaniedByCoc());
            values.put(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_MARKS, teaBuyerImporterExporter.getImportsAccompaniedByCocMarks());
            values.put(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_REMARKS, teaBuyerImporterExporter.getImportsAccompaniedByCocRemarks());
            values.put(KEY_REEXPORT_OF_IMPORTED_TEAS, teaBuyerImporterExporter.getIsReexportOfImportedTea());
            values.put(KEY_REEXPORT_OF_IMPORTED_TEAS_MARKS, teaBuyerImporterExporter.getReexportOfImportedTeaMarks());
            values.put(KEY_REEXPORT_OF_IMPORTED_TEAS_REMARKS, teaBuyerImporterExporter.getReexportOfImportedTeaRemarks());
            values.put(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS, teaBuyerImporterExporter.getIsReexportOrDestruction());
            values.put(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_MARKS, teaBuyerImporterExporter.getReexportOfImportedTeaMarks());
            values.put(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_REMARKS, teaBuyerImporterExporter.getReexportOfImportedTeaRemarks());
            values.put(KEY_EXTERNAL_SITE_STANDARDS, teaBuyerImporterExporter.getIsExternalSiteStandards());
            values.put(KEY_EXTERNAL_SITE_STANDARDS_MARKS, teaBuyerImporterExporter.getExternalSiteStandardsMarks());
            values.put(KEY_EXTERNAL_SITE_STANDARDS_REMARKS, teaBuyerImporterExporter.getExternalSiteStandardsRemarks());
            values.put(KEY_SECURITY_ACCESS_CONTROL, teaBuyerImporterExporter.getIsSecurityAccessControl());
            values.put(KEY_SECURITY_ACCESS_CONTROL_MARKS, teaBuyerImporterExporter.getSecurityAccessControlMarks());
            values.put(KEY_SECURITY_ACCESS_CONTROL_REMARKS, teaBuyerImporterExporter.getSecurityAccessControlRemarks());
            values.put(KEY_LAYOUT_PRODUCT_FLOW, teaBuyerImporterExporter.getIsLayoutProductFlow());
            values.put(KEY_LAYOUT_PRODUCT_FLOW_MARKS, teaBuyerImporterExporter.getLayoutProductFlowMarks());
            values.put(KEY_LAYOUT_PRODUCT_FLOW_REMARKS, teaBuyerImporterExporter.getLayoutProductFlowRemarks());
            values.put(KEY_WALLS, teaBuyerImporterExporter.getIsWalls());
            values.put(KEY_WALLS_MARKS, teaBuyerImporterExporter.getWallsMarks());
            values.put(KEY_WALLS_REMARKS, teaBuyerImporterExporter.getWallsRemarks());
            values.put(KEY_FLOORS, teaBuyerImporterExporter.getIsFloors());
            values.put(KEY_FLOORS_MARKS, teaBuyerImporterExporter.getFloorsMarks());
            values.put(KEY_FLOORS_REMARKS, teaBuyerImporterExporter.getFloorsRemarks());
            values.put(KEY_ROOF_CEILING_AND_OVERHEAD, teaBuyerImporterExporter.getIsRoofCeilingAndOverhead());
            values.put(KEY_ROOF_CEILING_AND_OVERHEAD_MARKS, teaBuyerImporterExporter.getRoofCeilingAndOverheadMarks());
            values.put(KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS, teaBuyerImporterExporter.getRoofCeilingAndOverheadRemarks());
            values.put(KEY_WINDOWS, teaBuyerImporterExporter.getIsWindows());
            values.put(KEY_WINDOWS_MARKS, teaBuyerImporterExporter.getWindowsMarks());
            values.put(KEY_WINDOWS_REMARKS, teaBuyerImporterExporter.getWindowsRemarks());
            values.put(KEY_DOORS, teaBuyerImporterExporter.getIsDoors());
            values.put(KEY_DOORS_MARKS, teaBuyerImporterExporter.getDoorsMarks());
            values.put(KEY_DOORS_REMARKS, teaBuyerImporterExporter.getDoorsRemarks());
            values.put(KEY_ADEQUATE_LIGHTING, teaBuyerImporterExporter.getIsAdequateLighting());
            values.put(KEY_ADEQUATE_LIGHTING_MARKS, teaBuyerImporterExporter.getAdequateLightingMarks());
            values.put(KEY_ADEQUATE_LIGHTING_REMARKS, teaBuyerImporterExporter.getAdequateLightingRemarks());
            values.put(KEY_VENTILATION, teaBuyerImporterExporter.getIsVentilation());
            values.put(KEY_VENTILATION_MARKS, teaBuyerImporterExporter.getVentilationMarks());
            values.put(KEY_VENTILATION_REMARKS, teaBuyerImporterExporter.getVentilationRemarks());
            values.put(KEY_EQUIPMENT_CLEANLINESS, teaBuyerImporterExporter.getIsEquipmentCleanliness());
            values.put(KEY_EQUIPMENT_CLEANLINESS_MARKS, teaBuyerImporterExporter.getEquipmentCleanlinessMarks());
            values.put(KEY_EQUIPMENT_CLEANLINESS_REMARKS, teaBuyerImporterExporter.getEquipmentCleanlinessRemarks());
            values.put(KEY_CHANGING_ROOMS_AND_TOILETS, teaBuyerImporterExporter.getIsChangingRoomsAndToilets());
            values.put(KEY_CHANGING_ROOMS_AND_TOILETS_MARKS, teaBuyerImporterExporter.getChangingRoomsAndToiletsMarks());
            values.put(KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS, teaBuyerImporterExporter.getChangingRoomsAndToiletsRemarks());
            values.put(KEY_RISK_OF_CONTAMINANTS, teaBuyerImporterExporter.getIsRiskOfContaminants());
            values.put(KEY_RISK_OF_CONTAMINANTS_MARKS, teaBuyerImporterExporter.getRiskOfContaminantsMarks());
            values.put(KEY_RISK_OF_CONTAMINANTS_REMARKS, teaBuyerImporterExporter.getRiskOfContaminantsRemarks());
            values.put(KEY_WASTE_TEAS_DISPOSAL, teaBuyerImporterExporter.getIsWasteTeasDisposal());
            values.put(KEY_WASTE_TEAS_DISPOSAL_MARKS, teaBuyerImporterExporter.getWasteTeasDisposalMarks());
            values.put(KEY_WASTE_TEAS_DISPOSAL_REMARKS, teaBuyerImporterExporter.getWasteTeasDisposalRemarks());
            values.put(KEY_PEST_CONTROL_PROGRAMS, teaBuyerImporterExporter.getIsPestControlPrograms());
            values.put(KEY_PEST_CONTROL_PROGRAMS_MARKS, teaBuyerImporterExporter.getWasteTeasDisposalMarks());
            values.put(KEY_PEST_CONTROL_PROGRAMS_REMARKS, teaBuyerImporterExporter.getWasteTeasDisposalRemarks());
            values.put(KEY_PROPER_STORAGE_TRANSPORTATION, teaBuyerImporterExporter.getIsProperStorage());
            values.put(KEY_PROPER_STORAGE_TRANSPORTATION_MARKS, teaBuyerImporterExporter.getProperStorageMarks());
            values.put(KEY_PROPER_STORAGE_TRANSPORTATION_REMARKS, teaBuyerImporterExporter.getProperStorageRemarks());
            values.put(KEY_PACKAGING_MATERIAL_CONFORMITY, teaBuyerImporterExporter.getIsPackagingMaterial());
            values.put(KEY_PACKAGING_MATERIAL_CONFORMITY_MARKS, teaBuyerImporterExporter.getPackagingMaterialMarks());
            values.put(KEY_PACKAGING_MATERIAL_CONFORMITY_REMARKS, teaBuyerImporterExporter.getPackagingMaterialRemarks());
            values.put(KEY_NON_CONFORMING_PRODUCT_HANDLING, teaBuyerImporterExporter.getIsNonConformingProduct());
            values.put(KEY_NON_CONFORMING_PRODUCT_HANDLING_MARKS, teaBuyerImporterExporter.getNonConformingProductMarks());
            values.put(KEY_NON_CONFORMING_PRODUCT_HANDLING_REMARKS, teaBuyerImporterExporter.getNonConformingProductRemarks());
            values.put(KEY_PALLETS_ARE_HEAT_TREATED, teaBuyerImporterExporter.getIsPalletsAreHeatTreated());
            values.put(KEY_PALLETS_ARE_HEAT_TREATED_MARKS, teaBuyerImporterExporter.getPalletsAreHeatTreatedMarks());
            values.put(KEY_PALLETS_ARE_HEAT_TREATED_REMARKS, teaBuyerImporterExporter.getPalletsAreHeatTreatedRemarks());
            values.put(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED, teaBuyerImporterExporter.getIsTeaDispatchRecordsMaintained());
            values.put(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_MARKS, teaBuyerImporterExporter.getTeaDispatchRecordsMaintainedMarks());
            values.put(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_REMARKS, teaBuyerImporterExporter.getTeaDispatchRecordsMaintainedRemarks());
            values.put(KEY_EQUIPMENT_IDENTIFICATION, teaBuyerImporterExporter.getIsEquipmentIdentification());
            values.put(KEY_EQUIPMENT_IDENTIFICATION_MARKS, teaBuyerImporterExporter.getEquipmentIdentificationMarks());
            values.put(KEY_EQUIPMENT_IDENTIFICATION_REMARKS, teaBuyerImporterExporter.getEquipmentIdentificationRemarks());
            values.put(KEY_TRACEABILITY_SYSTEM, teaBuyerImporterExporter.getIsTraceabilitySystem());
            values.put(KEY_TRACEABILITY_SYSTEM_MARKS, teaBuyerImporterExporter.getTraceabilitySystemMarks());
            values.put(KEY_TRACEABILITY_SYSTEM_REMARKS, teaBuyerImporterExporter.getTraceabilitySystemRemarks());
            values.put(KEY_FOOD_SAFETY_HAZARDS, teaBuyerImporterExporter.getIsFoodSafetyHazardsIdentified());
            values.put(KEY_FOOD_SAFETY_HAZARDS_MARKS, teaBuyerImporterExporter.getFoodSafetyHazardsIdentifiedMarks());
            values.put(KEY_FOOD_SAFETY_HAZARDS_REMARKS, teaBuyerImporterExporter.getFoodSafetyHazardsIdentifiedRemarks());
            values.put(KEY_CUSTOMER_FEEDBACK_RECORDS, teaBuyerImporterExporter.getIsCustomerFeedbackRecords());
            values.put(KEY_CUSTOMER_FEEDBACK_RECORDS_MARKS, teaBuyerImporterExporter.getCustomerFeedbackRecordsMarks());
            values.put(KEY_CUSTOMER_FEEDBACK_RECORDS_REMARKS, teaBuyerImporterExporter.getCustomerFeedbackRecordsRemarks());
            values.put(KEY_PROCESS_DOCUMENTS_AND_RECORDS, teaBuyerImporterExporter.getIsProcessDocumentsAndRecords());
            values.put(KEY_PROCESS_DOCUMENTS_AND_RECORDS_MARKS, teaBuyerImporterExporter.getProcessDocumentsAndRecordsMarks());
            values.put(KEY_PROCESS_DOCUMENTS_AND_RECORDS_REMARKS, teaBuyerImporterExporter.getProcessDocumentsAndRecordsRemarks());
            values.put(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE, teaBuyerImporterExporter.getIsDocumentedPersonalHygiene());
            values.put(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_MARKS, teaBuyerImporterExporter.getDocumentedPersonalHygieneMarks());
            values.put(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_REMARKS, teaBuyerImporterExporter.getDocumentedPersonalHygieneRemarks());
            values.put(KEY_MEDICAL_SCREENING, teaBuyerImporterExporter.getIsMedicalScreening());
            values.put(KEY_MEDICAL_SCREENING_MARKS, teaBuyerImporterExporter.getMedicalScreeningMarks());
            values.put(KEY_MEDICAL_SCREENING_REMARKS, teaBuyerImporterExporter.getMedicalScreeningRemarks());
            values.put(KEY_VALID_MEDICAL_CERTIFICATE, teaBuyerImporterExporter.getIsValidMedicalCertificate());
            values.put(KEY_VALID_MEDICAL_CERTIFICATE_MARKS, teaBuyerImporterExporter.getValidMedicalCertificateMarks());
            values.put(KEY_VALID_MEDICAL_CERTIFICATE_REMARKS, teaBuyerImporterExporter.getValidMedicalCertificateRemarks());
            values.put(KEY_ADEQUATE_AND_CLEAN_PERSONAL, teaBuyerImporterExporter.getIsAdequateAndCleanPersonal());
            values.put(KEY_ADEQUATE_AND_CLEAN_PERSONAL_MARKS, teaBuyerImporterExporter.getAdequateAndCleanPersonalMarks());
            values.put(KEY_ADEQUATE_AND_CLEAN_PERSONAL_REMARKS, teaBuyerImporterExporter.getAdequateAndCleanPersonalRemarks());
            values.put(KEY_VALID_CERTIFICATE_OF_REGISTRATION, teaBuyerImporterExporter.getIsValidCertificateOfRegistration());
            values.put(KEY_VALID_CERTIFICATE_OF_REGISTRATION_MARKS, teaBuyerImporterExporter.getValidCertificateOfRegistrationMarks());
            values.put(KEY_VALID_CERTIFICATE_OF_REGISTRATION_REMARKS, teaBuyerImporterExporter.getValidCertificateOfRegistrationRemarks());
            values.put(KEY_INCIDENT_AND_ACCIDENT_REPORTS, teaBuyerImporterExporter.getIsIncidentAndAccidentReports());
            values.put(KEY_INCIDENT_AND_ACCIDENT_REPORTS_MARKS, teaBuyerImporterExporter.getIncidentAndAccidentReportsMarks());
            values.put(KEY_INCIDENT_AND_ACCIDENT_REPORTS_REMARKS, teaBuyerImporterExporter.getIncidentAndAccidentReportsRemarks());
            values.put(KEY_FIRE_EQUIPMENT_INSPECTION, teaBuyerImporterExporter.getIsFireEquipmentInspection());
            values.put(KEY_FIRE_EQUIPMENT_INSPECTION_MARKS, teaBuyerImporterExporter.getFireEquipmentInspectionMarks());
            values.put(KEY_FIRE_EQUIPMENT_INSPECTION_REMARKS, teaBuyerImporterExporter.getFireEquipmentInspectionRemarks());
            values.put(KEY_MARKED_ZONES, teaBuyerImporterExporter.getIsMarkedZonesFireExits());
            values.put(KEY_MARKED_ZONES_MARKS, teaBuyerImporterExporter.getMarkedZonesFireExitsMarks());
            values.put(KEY_MARKED_ZONES_REMARKS, teaBuyerImporterExporter.getMarkedZonesFireExitsRemarks());
            values.put(KEY_COMPLIANCE_WITH_LABOUR_RULES, teaBuyerImporterExporter.getIsCompliancewithLabourRules());
            values.put(KEY_COMPLIANCE_WITH_LABOUR_RULES_MARKS, teaBuyerImporterExporter.getCompliancewithLabourRulesMarks());
            values.put(KEY_COMPLIANCE_WITH_LABOUR_RULES_REMARKS, teaBuyerImporterExporter.getCompliancewithLabourRulesRemarks());
            values.put(KEY_COMPLIANCE_WITH_OHS_ACT, teaBuyerImporterExporter.getIsComplianceToOhsAct());
            values.put(KEY_COMPLIANCE_WITH_OHS_ACT_MARKS, teaBuyerImporterExporter.getComplianceToOhsActMarks());
            values.put(KEY_COMPLIANCE_WITH_OHS_ACT_REMARKS, teaBuyerImporterExporter.getComplianceToOhsActRemarks());
            values.put(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS, teaBuyerImporterExporter.getIsCorrectionOfPreviousInspection());
            values.put(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_MARKS, teaBuyerImporterExporter.getCorrectionOfPreviousInspectionMarks());
            values.put(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_REMARKS, teaBuyerImporterExporter.getCorrectionOfPreviousInspectionRemarks());
            // values.put( KEY_DOCUMENT_STATUS , teaBuyerImporterExporter.getDocum());

            result = db.update(TABLE_TEA_BUYER_IMPORTER_EXPORTER, values, "id =" + Integer.parseInt(teaBuyerImporterExporter.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<TeaBuyerImporterExporterDetails> getTeaBuyerImporterExporterList() {

        List<TeaBuyerImporterExporterDetails> teaBuyerImporterExporterDetailsList = new ArrayList<>();
        TeaBuyerImporterExporterDetails td = new TeaBuyerImporterExporterDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_TEA_BUYER_IMPORTER_EXPORTER;
//        String selectQuery = "SELECT  * FROM " + TABLE_TEA_BUYER_IMPORTER_EXPORTER + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Tea Buyer Importer Exporter data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new TeaBuyerImporterExporterDetails();
                    td.setAFA_TD_Inspection_Checklist_ID(c.getString(c.getColumnIndex(KEY_TEA_BUYER_IMPORTER_EXPORTER_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString(c.getColumnIndex(KEY_ID)));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicenseNumber((c.getString((c.getColumnIndex(KEY_LICENSE_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setIsValidTbk(c.getString((c.getColumnIndex(KEY_VALID_TBK))));
                    td.setValidTbkMarks(c.getString((c.getColumnIndex(KEY_VALID_TBK_MARKS))));
                    td.setValidTbkRemarks(c.getString((c.getColumnIndex(KEY_VALID_TBK_REMARKS))));
                    td.setIsBusinessPermit(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT))));
                    td.setBusinessPermitMarks(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT_MARKS))));
                    td.setBusinessPermitRemarks(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT_REMARKS))));
                    td.setIsHealthCertificate(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE))));
                    td.setHealthCertificateMarks(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE_MARKS))));
                    td.setHealthCertificateRemarks(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE_REMARKS))));
                    td.setIsSubmissionOfMonthlyReturns(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_MONTHLY_RETURNS))));
                    td.setSubmissionOfMonthlyReturnsMarks(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_MONTHLY_RETURNS_MARKS))));
                    td.setSubmissionOfMonthlyReturnsRemarks(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_MONTHLY_RETURNS_REMARKS))));
                    td.setIsRegistrationOfExportsDone(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_EXPORTS_DONE))));
                    td.setRegistrationOfExportsDoneMarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_EXPORTS_DONE_MARKS))));
                    td.setRegistrationOfExportsDoneRemarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_EXPORTS_DONE_REMARKS))));
                    td.setIsRegistrationOfImportsDone(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_IMPORTS_DONE))));
                    td.setRegistrationOfImportsDoneMarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_IMPORTS_DONE_MARKS))));
                    td.setRegistrationOfImportsDoneRemarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_IMPORTS_DONE_REMARKS))));
                    td.setIsImportsAccompaniedByCoc(c.getString((c.getColumnIndex(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC))));
                    td.setImportsAccompaniedByCocMarks(c.getString((c.getColumnIndex(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_MARKS))));
                    td.setImportsAccompaniedByCocRemarks(c.getString((c.getColumnIndex(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_REMARKS))));
                    td.setIsReexportOfImportedTea(c.getString((c.getColumnIndex(KEY_REEXPORT_OF_IMPORTED_TEAS))));
                    td.setReexportOfImportedTeaMarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OF_IMPORTED_TEAS_MARKS))));
                    td.setReexportOfImportedTeaRemarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OF_IMPORTED_TEAS_REMARKS))));
                    td.setIsReexportOrDestruction(c.getString((c.getColumnIndex(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS))));
                    td.setReexportOrDestructionMarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_MARKS))));
                    td.setReexportOrDestructionRemarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_REMARKS))));
                    td.setIsExternalSiteStandards(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS))));
                    td.setExternalSiteStandardsMarks(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS_MARKS))));
                    td.setExternalSiteStandardsRemarks(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS_REMARKS))));
                    td.setIsSecurityAccessControl(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL))));
                    td.setSecurityAccessControlMarks(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL_MARKS))));
                    td.setSecurityAccessControlRemarks(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL_REMARKS))));
                    td.setIsLayoutProductFlow(c.getString((c.getColumnIndex(KEY_LAYOUT_PRODUCT_FLOW))));
                    td.setLayoutProductFlowMarks(c.getString((c.getColumnIndex(KEY_LAYOUT_PRODUCT_FLOW_MARKS))));
                    td.setLayoutProductFlowRemarks(c.getString((c.getColumnIndex(KEY_LAYOUT_PRODUCT_FLOW_REMARKS))));
                    td.setIsWalls(c.getString((c.getColumnIndex(KEY_WALLS))));
                    td.setWallsMarks(c.getString((c.getColumnIndex(KEY_WALLS_MARKS))));
                    td.setWallsRemarks(c.getString((c.getColumnIndex(KEY_WALLS_REMARKS))));
                    td.setIsFloors(c.getString((c.getColumnIndex(KEY_FLOORS))));
                    td.setFloorsMarks(c.getString((c.getColumnIndex(KEY_FLOORS_MARKS))));
                    td.setFloorsRemarks(c.getString((c.getColumnIndex(KEY_FLOORS_REMARKS))));
                    td.setIsRoofCeilingAndOverhead(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD))));
                    td.setRoofCeilingAndOverheadMarks(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD_MARKS))));
                    td.setRoofCeilingAndOverheadRemarks(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS))));
                    td.setIsWindows(c.getString((c.getColumnIndex(KEY_WINDOWS))));
                    td.setWindowsMarks(c.getString((c.getColumnIndex(KEY_WINDOWS_MARKS))));
                    td.setWindowsRemarks(c.getString((c.getColumnIndex(KEY_WINDOWS_REMARKS))));
                    td.setIsDoors(c.getString((c.getColumnIndex(KEY_DOORS))));
                    td.setDoorsMarks(c.getString((c.getColumnIndex(KEY_DOORS_MARKS))));
                    td.setDoorsRemarks(c.getString((c.getColumnIndex(KEY_DOORS_REMARKS))));
                    td.setIsAdequateLighting(c.getString((c.getColumnIndex(KEY_ADEQUATE_LIGHTING))));
                    td.setAdequateLightingMarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_LIGHTING_MARKS))));
                    td.setAdequateLightingRemarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_LIGHTING_REMARKS))));
                    td.setIsVentilation(c.getString((c.getColumnIndex(KEY_VENTILATION))));
                    td.setVentilationMarks(c.getString((c.getColumnIndex(KEY_VENTILATION_MARKS))));
                    td.setVentilationRemarks(c.getString((c.getColumnIndex(KEY_VENTILATION_REMARKS))));
                    td.setIsEquipmentCleanliness(c.getString((c.getColumnIndex(KEY_EQUIPMENT_CLEANLINESS))));
                    td.setEquipmentCleanlinessMarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_CLEANLINESS_MARKS))));
                    td.setEquipmentCleanlinessRemarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_CLEANLINESS_REMARKS))));
                    td.setIsChangingRoomsAndToilets(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS))));
                    td.setChangingRoomsAndToiletsMarks(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS_MARKS))));
                    td.setChangingRoomsAndToiletsRemarks(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS))));
                    td.setIsRiskOfContaminants(c.getString((c.getColumnIndex(KEY_RISK_OF_CONTAMINANTS))));
                    td.setRiskOfContaminantsMarks(c.getString((c.getColumnIndex(KEY_RISK_OF_CONTAMINANTS_MARKS))));
                    td.setRiskOfContaminantsRemarks(c.getString((c.getColumnIndex(KEY_RISK_OF_CONTAMINANTS_REMARKS))));
                    td.setIsWasteTeasDisposal(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_DISPOSAL))));
                    td.setWasteTeasDisposalMarks(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_DISPOSAL_MARKS))));
                    td.setWasteTeasDisposalRemarks(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_DISPOSAL_REMARKS))));
                    td.setIsPestControlPrograms(c.getString((c.getColumnIndex(KEY_PEST_CONTROL_PROGRAMS))));
                    td.setPestControlProgramsMarks(c.getString((c.getColumnIndex(KEY_PEST_CONTROL_PROGRAMS_MARKS))));
                    td.setPestControlProgramsRemarks(c.getString((c.getColumnIndex(KEY_PEST_CONTROL_PROGRAMS_REMARKS))));
                    td.setIsProperStorage(c.getString((c.getColumnIndex(KEY_PROPER_STORAGE_TRANSPORTATION))));
                    td.setProperStorageMarks(c.getString((c.getColumnIndex(KEY_PROPER_STORAGE_TRANSPORTATION_MARKS))));
                    td.setProperStorageRemarks(c.getString((c.getColumnIndex(KEY_PROPER_STORAGE_TRANSPORTATION_REMARKS))));
                    td.setIsPackagingMaterial(c.getString((c.getColumnIndex(KEY_PACKAGING_MATERIAL_CONFORMITY))));
                    td.setPackagingMaterialMarks(c.getString((c.getColumnIndex(KEY_PACKAGING_MATERIAL_CONFORMITY_MARKS))));
                    td.setPackagingMaterialRemarks(c.getString((c.getColumnIndex(KEY_PACKAGING_MATERIAL_CONFORMITY_REMARKS))));
                    td.setIsNonConformingProduct(c.getString((c.getColumnIndex(KEY_NON_CONFORMING_PRODUCT_HANDLING))));
                    td.setNonConformingProductMarks(c.getString((c.getColumnIndex(KEY_NON_CONFORMING_PRODUCT_HANDLING_MARKS))));
                    td.setNonConformingProductRemarks(c.getString((c.getColumnIndex(KEY_NON_CONFORMING_PRODUCT_HANDLING_REMARKS))));
                    td.setIsPalletsAreHeatTreated(c.getString((c.getColumnIndex(KEY_PALLETS_ARE_HEAT_TREATED))));
                    td.setPalletsAreHeatTreatedMarks(c.getString((c.getColumnIndex(KEY_PALLETS_ARE_HEAT_TREATED_MARKS))));
                    td.setPalletsAreHeatTreatedRemarks(c.getString((c.getColumnIndex(KEY_PALLETS_ARE_HEAT_TREATED_REMARKS))));
                    td.setIsTeaDispatchRecordsMaintained(c.getString((c.getColumnIndex(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED))));
                    td.setTeaDispatchRecordsMaintainedMarks(c.getString((c.getColumnIndex(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_MARKS))));
                    td.setTeaDispatchRecordsMaintainedRemarks(c.getString((c.getColumnIndex(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_REMARKS))));
                    td.setIsEquipmentIdentification(c.getString((c.getColumnIndex(KEY_EQUIPMENT_IDENTIFICATION))));
                    td.setEquipmentIdentificationMarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_IDENTIFICATION_MARKS))));
                    td.setEquipmentIdentificationRemarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_IDENTIFICATION_REMARKS))));
                    td.setIsTraceabilitySystem(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM))));
                    td.setTraceabilitySystemMarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM_MARKS))));
                    td.setTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setIsFoodSafetyHazardsIdentified(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARDS))));
                    td.setFoodSafetyHazardsIdentifiedMarks(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARDS_MARKS))));
                    td.setFoodSafetyHazardsIdentifiedRemarks(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARDS_REMARKS))));
                    td.setIsCustomerFeedbackRecords(c.getString((c.getColumnIndex(KEY_CUSTOMER_FEEDBACK_RECORDS))));
                    td.setCustomerFeedbackRecordsMarks(c.getString((c.getColumnIndex(KEY_CUSTOMER_FEEDBACK_RECORDS_MARKS))));
                    td.setCustomerFeedbackRecordsRemarks(c.getString((c.getColumnIndex(KEY_CUSTOMER_FEEDBACK_RECORDS_REMARKS))));
                    td.setIsProcessDocumentsAndRecords(c.getString((c.getColumnIndex(KEY_PROCESS_DOCUMENTS_AND_RECORDS))));
                    td.setProcessDocumentsAndRecordsMarks(c.getString((c.getColumnIndex(KEY_PROCESS_DOCUMENTS_AND_RECORDS_MARKS))));
                    td.setProcessDocumentsAndRecordsRemarks(c.getString((c.getColumnIndex(KEY_PROCESS_DOCUMENTS_AND_RECORDS_REMARKS))));
                    td.setIsDocumentedPersonalHygiene(c.getString((c.getColumnIndex(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE))));
                    td.setDocumentedPersonalHygieneMarks(c.getString((c.getColumnIndex(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_MARKS))));
                    td.setDocumentedPersonalHygieneRemarks(c.getString((c.getColumnIndex(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_REMARKS))));
                    td.setIsMedicalScreening(c.getString((c.getColumnIndex(KEY_MEDICAL_SCREENING))));
                    td.setMedicalScreeningMarks(c.getString((c.getColumnIndex(KEY_MEDICAL_SCREENING_MARKS))));
                    td.setMedicalScreeningRemarks(c.getString((c.getColumnIndex(KEY_MEDICAL_SCREENING_REMARKS))));
                    td.setIsValidMedicalCertificate(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATE))));
                    td.setValidMedicalCertificateMarks(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATE_MARKS))));
                    td.setValidMedicalCertificateRemarks(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATE_REMARKS))));
                    td.setIsAdequateAndCleanPersonal(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL))));
                    td.setAdequateAndCleanPersonalMarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL_MARKS))));
                    td.setAdequateAndCleanPersonalRemarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL_REMARKS))));
                    td.setIsValidCertificateOfRegistration(c.getString((c.getColumnIndex(KEY_VALID_CERTIFICATE_OF_REGISTRATION))));
                    td.setValidCertificateOfRegistrationMarks(c.getString((c.getColumnIndex(KEY_VALID_CERTIFICATE_OF_REGISTRATION_MARKS))));
                    td.setValidCertificateOfRegistrationRemarks(c.getString((c.getColumnIndex(KEY_VALID_CERTIFICATE_OF_REGISTRATION_REMARKS))));
                    td.setIsIncidentAndAccidentReports(c.getString((c.getColumnIndex(KEY_INCIDENT_AND_ACCIDENT_REPORTS))));
                    td.setIncidentAndAccidentReportsMarks(c.getString((c.getColumnIndex(KEY_INCIDENT_AND_ACCIDENT_REPORTS_MARKS))));
                    td.setIncidentAndAccidentReportsRemarks(c.getString((c.getColumnIndex(KEY_INCIDENT_AND_ACCIDENT_REPORTS_REMARKS))));
                    td.setIsFireEquipmentInspection(c.getString((c.getColumnIndex(KEY_FIRE_EQUIPMENT_INSPECTION))));
                    td.setFireEquipmentInspectionMarks(c.getString((c.getColumnIndex(KEY_FIRE_EQUIPMENT_INSPECTION_MARKS))));
                    td.setFireEquipmentInspectionRemarks(c.getString((c.getColumnIndex(KEY_FIRE_EQUIPMENT_INSPECTION_REMARKS))));
                    td.setIsMarkedZonesFireExits(c.getString((c.getColumnIndex(KEY_MARKED_ZONES))));
                    td.setMarkedZonesFireExitsMarks(c.getString((c.getColumnIndex(KEY_MARKED_ZONES_MARKS))));
                    td.setMarkedZonesFireExitsRemarks(c.getString((c.getColumnIndex(KEY_MARKED_ZONES_REMARKS))));
                    td.setIsCompliancewithLabourRules(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_LABOUR_RULES))));
                    td.setCompliancewithLabourRulesMarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_LABOUR_RULES_MARKS))));
                    td.setCompliancewithLabourRulesRemarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_LABOUR_RULES_REMARKS))));
                    td.setIsComplianceToOhsAct(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_OHS_ACT))));
                    td.setComplianceToOhsActMarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_OHS_ACT_MARKS))));
                    td.setComplianceToOhsActRemarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_OHS_ACT_REMARKS))));
                    td.setIsCorrectionOfPreviousInspection(c.getString((c.getColumnIndex(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS))));
                    td.setCorrectionOfPreviousInspectionMarks(c.getString((c.getColumnIndex(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_MARKS))));
                    td.setCorrectionOfPreviousInspectionRemarks(c.getString((c.getColumnIndex(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_REMARKS))));
                    td.setDocumentStatus(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list
                    teaBuyerImporterExporterDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking teaBuyerImporterExporterDetailsList data from the db" + teaBuyerImporterExporterDetailsList.size());
        return teaBuyerImporterExporterDetailsList;
    }

    public List<TeaBuyerImporterExporterDetails> getTeaBuyerImporterExporterDoneList() {

        List<TeaBuyerImporterExporterDetails> teaBuyerImporterExporterDetailsList = new ArrayList<>();
        TeaBuyerImporterExporterDetails td = new TeaBuyerImporterExporterDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_TEA_BUYER_IMPORTER_EXPORTER + " where " + KEY_INSPECTION_DONE + " =" + "'Y'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Tea Buyer Importer Exporter data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new TeaBuyerImporterExporterDetails();
                    td.setAFA_TD_Inspection_Checklist_ID(c.getString(c.getColumnIndex(KEY_TEA_BUYER_IMPORTER_EXPORTER_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicenseNumber((c.getString((c.getColumnIndex(KEY_REF_LETTER_OF_COMFORT)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setIsValidTbk(c.getString((c.getColumnIndex(KEY_VALID_TBK))));
                    td.setValidTbkMarks(c.getString((c.getColumnIndex(KEY_VALID_TBK_MARKS))));
                    td.setValidTbkRemarks(c.getString((c.getColumnIndex(KEY_VALID_TBK_REMARKS))));
                    td.setIsBusinessPermit(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT))));
                    td.setBusinessPermitMarks(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT_MARKS))));
                    td.setBusinessPermitRemarks(c.getString((c.getColumnIndex(KEY_BUSINESS_PERMIT_REMARKS))));
                    td.setIsHealthCertificate(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE))));
                    td.setHealthCertificateMarks(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE_MARKS))));
                    td.setHealthCertificateRemarks(c.getString((c.getColumnIndex(KEY_HEALTH_CERTIFICATE_REMARKS))));
                    td.setIsSubmissionOfMonthlyReturns(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_MONTHLY_RETURNS))));
                    td.setSubmissionOfMonthlyReturnsMarks(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_MONTHLY_RETURNS_MARKS))));
                    td.setSubmissionOfMonthlyReturnsRemarks(c.getString((c.getColumnIndex(KEY_SUBMISSION_OF_MONTHLY_RETURNS_REMARKS))));
                    td.setIsRegistrationOfExportsDone(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_EXPORTS_DONE))));
                    td.setRegistrationOfExportsDoneMarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_EXPORTS_DONE_MARKS))));
                    td.setRegistrationOfExportsDoneRemarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_EXPORTS_DONE_REMARKS))));
                    td.setIsRegistrationOfImportsDone(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_IMPORTS_DONE))));
                    td.setRegistrationOfImportsDoneMarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_IMPORTS_DONE_MARKS))));
                    td.setRegistrationOfImportsDoneRemarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_OF_IMPORTS_DONE_REMARKS))));
                    td.setIsImportsAccompaniedByCoc(c.getString((c.getColumnIndex(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC))));
                    td.setImportsAccompaniedByCocMarks(c.getString((c.getColumnIndex(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_MARKS))));
                    td.setImportsAccompaniedByCocRemarks(c.getString((c.getColumnIndex(KEY_ARE_IMPORTS_ACCOMPANIED_BY_COC_REMARKS))));
                    td.setIsReexportOfImportedTea(c.getString((c.getColumnIndex(KEY_REEXPORT_OF_IMPORTED_TEAS))));
                    td.setReexportOfImportedTeaMarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OF_IMPORTED_TEAS_MARKS))));
                    td.setReexportOfImportedTeaRemarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OF_IMPORTED_TEAS_REMARKS))));
                    td.setIsReexportOrDestruction(c.getString((c.getColumnIndex(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS))));
                    td.setReexportOrDestructionMarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_MARKS))));
                    td.setReexportOrDestructionRemarks(c.getString((c.getColumnIndex(KEY_REEXPORT_OR_DESTRUCTION_OF_IMPORTS_REMARKS))));
                    td.setIsExternalSiteStandards(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS))));
                    td.setExternalSiteStandardsMarks(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS_MARKS))));
                    td.setExternalSiteStandardsRemarks(c.getString((c.getColumnIndex(KEY_EXTERNAL_SITE_STANDARDS_REMARKS))));
                    td.setIsSecurityAccessControl(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL))));
                    td.setSecurityAccessControlMarks(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL_MARKS))));
                    td.setSecurityAccessControlRemarks(c.getString((c.getColumnIndex(KEY_SECURITY_ACCESS_CONTROL_REMARKS))));
                    td.setIsLayoutProductFlow(c.getString((c.getColumnIndex(KEY_LAYOUT_PRODUCT_FLOW))));
                    td.setLayoutProductFlowMarks(c.getString((c.getColumnIndex(KEY_LAYOUT_PRODUCT_FLOW_MARKS))));
                    td.setLayoutProductFlowRemarks(c.getString((c.getColumnIndex(KEY_LAYOUT_PRODUCT_FLOW_REMARKS))));
                    td.setIsWalls(c.getString((c.getColumnIndex(KEY_WALLS))));
                    td.setWallsMarks(c.getString((c.getColumnIndex(KEY_WALLS_MARKS))));
                    td.setWallsRemarks(c.getString((c.getColumnIndex(KEY_WALLS_REMARKS))));
                    td.setIsFloors(c.getString((c.getColumnIndex(KEY_FLOORS))));
                    td.setFloorsMarks(c.getString((c.getColumnIndex(KEY_FLOORS_MARKS))));
                    td.setFloorsRemarks(c.getString((c.getColumnIndex(KEY_FLOORS_REMARKS))));
                    td.setIsRoofCeilingAndOverhead(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD))));
                    td.setRoofCeilingAndOverheadMarks(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD_MARKS))));
                    td.setRoofCeilingAndOverheadRemarks(c.getString((c.getColumnIndex(KEY_ROOF_CEILING_AND_OVERHEAD_REMARKS))));
                    td.setIsWindows(c.getString((c.getColumnIndex(KEY_WINDOWS))));
                    td.setWindowsMarks(c.getString((c.getColumnIndex(KEY_WINDOWS_MARKS))));
                    td.setWindowsRemarks(c.getString((c.getColumnIndex(KEY_WINDOWS_REMARKS))));
                    td.setIsDoors(c.getString((c.getColumnIndex(KEY_DOORS))));
                    td.setDoorsMarks(c.getString((c.getColumnIndex(KEY_DOORS_MARKS))));
                    td.setDoorsRemarks(c.getString((c.getColumnIndex(KEY_DOORS_REMARKS))));
                    td.setIsAdequateLighting(c.getString((c.getColumnIndex(KEY_ADEQUATE_LIGHTING))));
                    td.setAdequateLightingMarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_LIGHTING_MARKS))));
                    td.setAdequateLightingRemarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_LIGHTING_REMARKS))));
                    td.setIsVentilation(c.getString((c.getColumnIndex(KEY_VENTILATION))));
                    td.setVentilationMarks(c.getString((c.getColumnIndex(KEY_VENTILATION_MARKS))));
                    td.setVentilationRemarks(c.getString((c.getColumnIndex(KEY_VENTILATION_REMARKS))));
                    td.setIsEquipmentCleanliness(c.getString((c.getColumnIndex(KEY_EQUIPMENT_CLEANLINESS))));
                    td.setEquipmentCleanlinessMarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_CLEANLINESS_MARKS))));
                    td.setEquipmentCleanlinessRemarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_CLEANLINESS_REMARKS))));
                    td.setIsChangingRoomsAndToilets(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS))));
                    td.setChangingRoomsAndToiletsMarks(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS_MARKS))));
                    td.setChangingRoomsAndToiletsRemarks(c.getString((c.getColumnIndex(KEY_CHANGING_ROOMS_AND_TOILETS_REMARKS))));
                    td.setIsRiskOfContaminants(c.getString((c.getColumnIndex(KEY_RISK_OF_CONTAMINANTS))));
                    td.setRiskOfContaminantsMarks(c.getString((c.getColumnIndex(KEY_RISK_OF_CONTAMINANTS_MARKS))));
                    td.setRiskOfContaminantsRemarks(c.getString((c.getColumnIndex(KEY_RISK_OF_CONTAMINANTS_REMARKS))));
                    td.setIsWasteTeasDisposal(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_DISPOSAL))));
                    td.setWasteTeasDisposalMarks(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_DISPOSAL_MARKS))));
                    td.setWasteTeasDisposalRemarks(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_DISPOSAL_REMARKS))));
                    td.setIsPestControlPrograms(c.getString((c.getColumnIndex(KEY_PEST_CONTROL_PROGRAMS))));
                    td.setPestControlProgramsMarks(c.getString((c.getColumnIndex(KEY_PEST_CONTROL_PROGRAMS_MARKS))));
                    td.setPestControlProgramsRemarks(c.getString((c.getColumnIndex(KEY_PEST_CONTROL_PROGRAMS_REMARKS))));
                    td.setIsProperStorage(c.getString((c.getColumnIndex(KEY_PROPER_STORAGE_TRANSPORTATION))));
                    td.setProperStorageMarks(c.getString((c.getColumnIndex(KEY_PROPER_STORAGE_TRANSPORTATION_MARKS))));
                    td.setProperStorageRemarks(c.getString((c.getColumnIndex(KEY_PROPER_STORAGE_TRANSPORTATION_REMARKS))));
                    td.setIsPackagingMaterial(c.getString((c.getColumnIndex(KEY_PACKAGING_MATERIAL_CONFORMITY))));
                    td.setPackagingMaterialMarks(c.getString((c.getColumnIndex(KEY_PACKAGING_MATERIAL_CONFORMITY_MARKS))));
                    td.setPackagingMaterialRemarks(c.getString((c.getColumnIndex(KEY_PACKAGING_MATERIAL_CONFORMITY_REMARKS))));
                    td.setIsNonConformingProduct(c.getString((c.getColumnIndex(KEY_NON_CONFORMING_PRODUCT_HANDLING))));
                    td.setNonConformingProductMarks(c.getString((c.getColumnIndex(KEY_NON_CONFORMING_PRODUCT_HANDLING_MARKS))));
                    td.setNonConformingProductRemarks(c.getString((c.getColumnIndex(KEY_NON_CONFORMING_PRODUCT_HANDLING_REMARKS))));
                    td.setIsPalletsAreHeatTreated(c.getString((c.getColumnIndex(KEY_PALLETS_ARE_HEAT_TREATED))));
                    td.setPalletsAreHeatTreatedMarks(c.getString((c.getColumnIndex(KEY_PALLETS_ARE_HEAT_TREATED_MARKS))));
                    td.setPalletsAreHeatTreatedRemarks(c.getString((c.getColumnIndex(KEY_PALLETS_ARE_HEAT_TREATED_REMARKS))));
                    td.setIsTeaDispatchRecordsMaintained(c.getString((c.getColumnIndex(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED))));
                    td.setTeaDispatchRecordsMaintainedMarks(c.getString((c.getColumnIndex(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_MARKS))));
                    td.setTeaDispatchRecordsMaintainedRemarks(c.getString((c.getColumnIndex(KEY_ARE_TEA_DISPATCH_RECORDS_MAINTAINED_REMARKS))));
                    td.setIsEquipmentIdentification(c.getString((c.getColumnIndex(KEY_EQUIPMENT_IDENTIFICATION))));
                    td.setEquipmentIdentificationMarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_IDENTIFICATION_MARKS))));
                    td.setEquipmentIdentificationRemarks(c.getString((c.getColumnIndex(KEY_EQUIPMENT_IDENTIFICATION_REMARKS))));
                    td.setIsTraceabilitySystem(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM))));
                    td.setTraceabilitySystemMarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM_MARKS))));
                    td.setTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setIsFoodSafetyHazardsIdentified(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARDS))));
                    td.setFoodSafetyHazardsIdentifiedMarks(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARDS_MARKS))));
                    td.setFoodSafetyHazardsIdentifiedRemarks(c.getString((c.getColumnIndex(KEY_FOOD_SAFETY_HAZARDS_REMARKS))));
                    td.setIsCustomerFeedbackRecords(c.getString((c.getColumnIndex(KEY_CUSTOMER_FEEDBACK_RECORDS))));
                    td.setCustomerFeedbackRecordsMarks(c.getString((c.getColumnIndex(KEY_CUSTOMER_FEEDBACK_RECORDS_MARKS))));
                    td.setCustomerFeedbackRecordsRemarks(c.getString((c.getColumnIndex(KEY_CUSTOMER_FEEDBACK_RECORDS_REMARKS))));
                    td.setIsProcessDocumentsAndRecords(c.getString((c.getColumnIndex(KEY_PROCESS_DOCUMENTS_AND_RECORDS))));
                    td.setProcessDocumentsAndRecordsMarks(c.getString((c.getColumnIndex(KEY_PROCESS_DOCUMENTS_AND_RECORDS_MARKS))));
                    td.setProcessDocumentsAndRecordsRemarks(c.getString((c.getColumnIndex(KEY_PROCESS_DOCUMENTS_AND_RECORDS_REMARKS))));
                    td.setIsDocumentedPersonalHygiene(c.getString((c.getColumnIndex(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE))));
                    td.setDocumentedPersonalHygieneMarks(c.getString((c.getColumnIndex(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_MARKS))));
                    td.setDocumentedPersonalHygieneRemarks(c.getString((c.getColumnIndex(KEY_DOCUMENTED_PERSONAL_HYGIENE_PROCEDURE_REMARKS))));
                    td.setIsMedicalScreening(c.getString((c.getColumnIndex(KEY_MEDICAL_SCREENING))));
                    td.setMedicalScreeningMarks(c.getString((c.getColumnIndex(KEY_MEDICAL_SCREENING_MARKS))));
                    td.setMedicalScreeningRemarks(c.getString((c.getColumnIndex(KEY_MEDICAL_SCREENING_REMARKS))));
                    td.setIsValidMedicalCertificate(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATE))));
                    td.setValidMedicalCertificateMarks(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATE_MARKS))));
                    td.setValidMedicalCertificateRemarks(c.getString((c.getColumnIndex(KEY_VALID_MEDICAL_CERTIFICATE_REMARKS))));
                    td.setIsAdequateAndCleanPersonal(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL))));
                    td.setAdequateAndCleanPersonalMarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL_MARKS))));
                    td.setAdequateAndCleanPersonalRemarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_AND_CLEAN_PERSONAL_REMARKS))));
                    td.setIsValidCertificateOfRegistration(c.getString((c.getColumnIndex(KEY_VALID_CERTIFICATE_OF_REGISTRATION))));
                    td.setValidCertificateOfRegistrationMarks(c.getString((c.getColumnIndex(KEY_VALID_CERTIFICATE_OF_REGISTRATION_MARKS))));
                    td.setValidCertificateOfRegistrationRemarks(c.getString((c.getColumnIndex(KEY_VALID_CERTIFICATE_OF_REGISTRATION_REMARKS))));
                    td.setIsIncidentAndAccidentReports(c.getString((c.getColumnIndex(KEY_INCIDENT_AND_ACCIDENT_REPORTS))));
                    td.setIncidentAndAccidentReportsMarks(c.getString((c.getColumnIndex(KEY_INCIDENT_AND_ACCIDENT_REPORTS_MARKS))));
                    td.setIncidentAndAccidentReportsRemarks(c.getString((c.getColumnIndex(KEY_INCIDENT_AND_ACCIDENT_REPORTS_REMARKS))));
                    td.setIsFireEquipmentInspection(c.getString((c.getColumnIndex(KEY_FIRE_EQUIPMENT_INSPECTION))));
                    td.setFireEquipmentInspectionMarks(c.getString((c.getColumnIndex(KEY_FIRE_EQUIPMENT_INSPECTION_MARKS))));
                    td.setFireEquipmentInspectionRemarks(c.getString((c.getColumnIndex(KEY_FIRE_EQUIPMENT_INSPECTION_REMARKS))));
                    td.setIsMarkedZonesFireExits(c.getString((c.getColumnIndex(KEY_MARKED_ZONES))));
                    td.setMarkedZonesFireExitsMarks(c.getString((c.getColumnIndex(KEY_MARKED_ZONES_MARKS))));
                    td.setMarkedZonesFireExitsRemarks(c.getString((c.getColumnIndex(KEY_MARKED_ZONES_REMARKS))));
                    td.setIsCompliancewithLabourRules(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_LABOUR_RULES))));
                    td.setCompliancewithLabourRulesMarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_LABOUR_RULES_MARKS))));
                    td.setCompliancewithLabourRulesRemarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_LABOUR_RULES_REMARKS))));
                    td.setIsComplianceToOhsAct(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_OHS_ACT))));
                    td.setComplianceToOhsActMarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_OHS_ACT_MARKS))));
                    td.setComplianceToOhsActRemarks(c.getString((c.getColumnIndex(KEY_COMPLIANCE_WITH_OHS_ACT_REMARKS))));
                    td.setIsCorrectionOfPreviousInspection(c.getString((c.getColumnIndex(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS))));
                    td.setCorrectionOfPreviousInspectionMarks(c.getString((c.getColumnIndex(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_MARKS))));
                    td.setCorrectionOfPreviousInspectionRemarks(c.getString((c.getColumnIndex(KEY_CORRECTION_OF_PREVIOUS_INSPECTION_GAPS_REMARKS))));
                    td.setDocumentStatus(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list
                    teaBuyerImporterExporterDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking teaBuyerImporterExporterDetailsList data from the db" + teaBuyerImporterExporterDetailsList.size());
        return teaBuyerImporterExporterDetailsList;
    }

    /* END OF TEA BUYER IMPORTER EXPORTER*/
    /* START OF PULPING STATION LICENSE APPLICATION*/
    private static final String KEY_PULPING_STAION_LICENSE_APPLICATION_ID = "pulping_staion_license_application_id";
    private static final String KEY_AUTHORITY_TO_ERECT_NUMBER = "authority_to_erect_number";
    private static final String KEY_TOTAL_LAND_AREA = "total_land_area";
    private static final String KEY_TOTAL_NUMBER_OF_TREES = "total_number_of_trees";
    private static final String KEY_AREA_UNDER_MATURE_COFFEE = "area_under_mature_coffee";
    private static final String KEY_FIRST_YEAR = "first_year";
    private static final String KEY_FIRST_YEAR_PRODUCTION = "first_year_production";
    private static final String KEY_SECOND_YEAR = "second_year";
    private static final String KEY_SECOND_YEAR_PRODUCTION = "second_year_production";
    private static final String KEY_THIRD_YEAR = "third_year";
    private static final String KEY_THIRD_YEAR_PRODUCTION = "third_year_production";
    private static final String KEY_CROP_HUSBANDRY_PRACTICES = "crop_husbandry_practices";
    private static final String KEY_OBJECTION_LETTER = "objection_letter";
    private static final String KEY_OBJECTION_LETTER_REMARKS = "objection_letter_remarks";
    private static final String KEY_WASTE_DISPOSAL = "waste_disposal";
    private static final String KEY_WASTE_DISPOSAL_REMARKS = "waste_disposal_remarks";
    private static final String KEY_POLLUTION_MANAGEMENT = "pollution_management";
    private static final String KEY_POLLUTION_MANAGEMENT_REMARKS = "pollution_management_remarks";
    private static final String KEY_WATER = "water";
    private static final String KEY_WATER_REMARKS = "water_remarks";
    private static final String KEY_NEMA_CERTIFICATE = "nema_certificate";
    private static final String KEY_NEMA_CERTIFICATE_REMARKS = "nema_certificate_remarks";
    private static final String KEY_COFFEE_ADVISORY_OFFICER = "coffee_advisory_officer";
    private static final String KEY_COFFEE_WORKING_GROUP = "coffee_working_group";
//    private static final String KEY_DOCUMENT_STATUS = "";

    public static final String TABLE_PULPING_STATION_LICENSE_APPLICATION = "pulping_station_license_application";

    public static final String CREATE_TABLE_PULPING_STATION_LICENSE_APPLICATION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_PULPING_STATION_LICENSE_APPLICATION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_PULPING_STAION_LICENSE_APPLICATION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_APPLICANT_NAME + " TEXT ,"
            + KEY_AUTHORITY_TO_ERECT_NUMBER + " TEXT ,"
            + KEY_TOTAL_LAND_AREA + " TEXT ,"
            + KEY_TOTAL_NUMBER_OF_TREES + " TEXT ,"
            + KEY_AREA_UNDER_MATURE_COFFEE + " TEXT ,"
            + KEY_FIRST_YEAR + " TEXT ,"
            + KEY_FIRST_YEAR_PRODUCTION + " TEXT ,"
            + KEY_SECOND_YEAR + " TEXT ,"
            + KEY_SECOND_YEAR_PRODUCTION + " TEXT ,"
            + KEY_THIRD_YEAR + " TEXT ,"
            + KEY_THIRD_YEAR_PRODUCTION + " TEXT ,"
            + KEY_CROP_HUSBANDRY_PRACTICES + " TEXT ,"
            + KEY_OBJECTION_LETTER + " TEXT ,"
            + KEY_OBJECTION_LETTER_REMARKS + " TEXT ,"
            + KEY_WASTE_DISPOSAL + " TEXT ,"
            + KEY_WASTE_DISPOSAL_REMARKS + " TEXT ,"
            + KEY_POLLUTION_MANAGEMENT + " TEXT ,"
            + KEY_POLLUTION_MANAGEMENT_REMARKS + " TEXT ,"
            + KEY_WATER + " TEXT ,"
            + KEY_WATER_REMARKS + " TEXT ,"
            + KEY_NEMA_CERTIFICATE + " TEXT ,"
            + KEY_NEMA_CERTIFICATE_REMARKS + " TEXT ,"
            + KEY_COFFEE_ADVISORY_OFFICER + " TEXT ,"
            + KEY_COFFEE_WORKING_GROUP + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_DOCUMENT_STATUS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertPulpStationLicenseApplication(PulpingStationLicenseApplicationDetails pulpingStationLicenseApplicationDetails) {

        System.out.println("AFA_CD_Pulp_Ate_Checklist_ID document number:" + pulpingStationLicenseApplicationDetails.getDocumentNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, pulpingStationLicenseApplicationDetails.getLocalID());
        values.put(KEY_PULPING_STAION_LICENSE_APPLICATION_ID, pulpingStationLicenseApplicationDetails.getAFA_CD_Pulp_Ate_Checklist_ID());

        values.put(KEY_DOCUMENT_NUMBER, pulpingStationLicenseApplicationDetails.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, pulpingStationLicenseApplicationDetails.getDocumentDate());

        values.put(KEY_AUTHORITY_TO_ERECT_NUMBER, pulpingStationLicenseApplicationDetails.getAuthorityToErectNumber());


        values.put(KEY_APPLICANT_NAME, pulpingStationLicenseApplicationDetails.getApplicantName());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isPulpingStationLicenseApplicationStored(pulpingStationLicenseApplicationDetails.getAFA_CD_Pulp_Ate_Checklist_ID())) {
            long pulpingStationLicenseApplicationID = db.insertWithOnConflict(TABLE_PULPING_STATION_LICENSE_APPLICATION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("pulpingStationLicenseApplicationID: " + pulpingStationLicenseApplicationID);

            closeDB();
            return pulpingStationLicenseApplicationID;
        } else {
            long pulpingStationLicenseApplicationID = -1;
            System.out.println("pulpingStationLicenseApplicationID: " + pulpingStationLicenseApplicationID);

            closeDB();
            return pulpingStationLicenseApplicationID;
        }

    }


    public void deletePulpingStationLicenseApplication() {
        String deleteQuery = "DELETE FROM " + TABLE_PULPING_STATION_LICENSE_APPLICATION;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isPulpingStationLicenseApplicationStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_PULPING_STATION_LICENSE_APPLICATION + " WHERE " + KEY_PULPING_STAION_LICENSE_APPLICATION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updatePulpingStationLicenseApplicationSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_PULPING_STATION_LICENSE_APPLICATION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long updatePulpingStationLicenseApplication(PulpingStationLicenseApplication pulpingStationLicenseApplication) {


        System.out.println("records  to be saved  ID:" + pulpingStationLicenseApplication.getLocalID());

        System.out.println("document_number to be saved:" + pulpingStationLicenseApplication.getDocumentNumber());

        System.out.println("document_date to be saved:" + pulpingStationLicenseApplication.getDocumentDate());

        System.out.println("authority to erect to be saved:" + pulpingStationLicenseApplication.getAuthorityToErectNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_TOTAL_LAND_AREA, pulpingStationLicenseApplication.getTotalLandArea());
            values.put(KEY_TOTAL_NUMBER_OF_TREES, pulpingStationLicenseApplication.getTotalNumberOfTrees());
            values.put(KEY_AREA_UNDER_MATURE_COFFEE, pulpingStationLicenseApplication.getAreaUnderMatureCoffee());
            values.put(KEY_FIRST_YEAR, pulpingStationLicenseApplication.getFirstYear());
            values.put(KEY_FIRST_YEAR_PRODUCTION, pulpingStationLicenseApplication.getFirstYearProduction());
            values.put(KEY_SECOND_YEAR, pulpingStationLicenseApplication.getSecondYear());
            values.put(KEY_SECOND_YEAR_PRODUCTION, pulpingStationLicenseApplication.getSecondYearProduction());
            values.put(KEY_THIRD_YEAR, pulpingStationLicenseApplication.getThirdYear());
            values.put(KEY_THIRD_YEAR_PRODUCTION, pulpingStationLicenseApplication.getThirdYearProduction());
            values.put(KEY_CROP_HUSBANDRY_PRACTICES, pulpingStationLicenseApplication.getCropHusbandryPractices());
            values.put(KEY_OBJECTION_LETTER, pulpingStationLicenseApplication.getIsObjectionLetter());
            values.put(KEY_OBJECTION_LETTER_REMARKS, pulpingStationLicenseApplication.getIsObjectionLetterRemarks());
            values.put(KEY_WASTE_DISPOSAL, pulpingStationLicenseApplication.getIsWasteDisposal());
            values.put(KEY_WASTE_DISPOSAL_REMARKS, pulpingStationLicenseApplication.getIsWasteDisposalRemarks());
            values.put(KEY_POLLUTION_MANAGEMENT, pulpingStationLicenseApplication.getIsPollutionManagement());
            values.put(KEY_POLLUTION_MANAGEMENT_REMARKS, pulpingStationLicenseApplication.getIsPollutionManagementRemarks());
            values.put(KEY_WATER, pulpingStationLicenseApplication.getIsWater());
            values.put(KEY_WATER_REMARKS, pulpingStationLicenseApplication.getIsWaterRemarks());
            values.put(KEY_NEMA_CERTIFICATE, pulpingStationLicenseApplication.getIsNemaCertificate());
            values.put(KEY_NEMA_CERTIFICATE_REMARKS, pulpingStationLicenseApplication.getIsNemaCertificateRemarks());
            values.put(KEY_COFFEE_ADVISORY_OFFICER, pulpingStationLicenseApplication.getCoffeeAdvisory());
            values.put(KEY_COFFEE_WORKING_GROUP, pulpingStationLicenseApplication.getCoffeeWorking());
            values.put(KEY_OFFICER_RECOMMENDATION, pulpingStationLicenseApplication.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, pulpingStationLicenseApplication.getOfficerrecommendation_remark());
            values.put(KEY_DOCUMENT_STATUS, pulpingStationLicenseApplication.getDocumentStatus());

            result = db.update(TABLE_PULPING_STATION_LICENSE_APPLICATION, values, "id =" + Integer.parseInt(pulpingStationLicenseApplication.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<PulpingStationLicenseApplicationDetails> getPulpingStationLicenseApplicationList() {

        List<PulpingStationLicenseApplicationDetails> pulpingStationLicenseApplicationDetailsList = new ArrayList<>();
        PulpingStationLicenseApplicationDetails td = new PulpingStationLicenseApplicationDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_PULPING_STATION_LICENSE_APPLICATION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking PulpingStationLicenseApplicationDetails data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    td = new PulpingStationLicenseApplicationDetails();
                    td.setAFA_CD_Pulp_Ate_Checklist_ID(c.getString(c.getColumnIndex(KEY_PULPING_STAION_LICENSE_APPLICATION_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setAuthorityToErectNumber((c.getString((c.getColumnIndex(KEY_AUTHORITY_TO_ERECT_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setTotalLandArea(c.getString((c.getColumnIndex(KEY_TOTAL_LAND_AREA))));
                    td.setTotalNumberOfTrees(c.getString((c.getColumnIndex(KEY_TOTAL_NUMBER_OF_TREES))));
                    td.setAreaUnderMatureCoffee(c.getString((c.getColumnIndex(KEY_AREA_UNDER_MATURE_COFFEE))));
                    td.setFirstYear(c.getString((c.getColumnIndex(KEY_FIRST_YEAR))));
                    td.setFirstYearProduction(c.getString((c.getColumnIndex(KEY_FIRST_YEAR_PRODUCTION))));
                    td.setSecondYear(c.getString((c.getColumnIndex(KEY_SECOND_YEAR))));
                    td.setSecondYearProduction(c.getString((c.getColumnIndex(KEY_SECOND_YEAR_PRODUCTION))));
                    td.setThirdYear(c.getString((c.getColumnIndex(KEY_THIRD_YEAR))));
                    td.setThirdYearProduction(c.getString((c.getColumnIndex(KEY_THIRD_YEAR_PRODUCTION))));
                    td.setCropHusbandryPractices(c.getString((c.getColumnIndex(KEY_CROP_HUSBANDRY_PRACTICES))));
                    td.setIsObjectionLetter(c.getString((c.getColumnIndex(KEY_OBJECTION_LETTER))));
                    td.setIsObjectionLetterRemarks(c.getString((c.getColumnIndex(KEY_OBJECTION_LETTER_REMARKS))));
                    td.setIsWasteDisposal(c.getString((c.getColumnIndex(KEY_WASTE_DISPOSAL))));
                    td.setIsWasteDisposalRemarks(c.getString((c.getColumnIndex(KEY_WASTE_DISPOSAL_REMARKS))));
                    td.setIsPollutionManagement(c.getString((c.getColumnIndex(KEY_POLLUTION_MANAGEMENT))));
                    td.setIsPollutionManagementRemarks(c.getString((c.getColumnIndex(KEY_POLLUTION_MANAGEMENT_REMARKS))));
                    td.setIsWater(c.getString((c.getColumnIndex(KEY_WATER))));
                    td.setIsWaterRemarks(c.getString((c.getColumnIndex(KEY_WATER_REMARKS))));
                    td.setIsNemaCertificate(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATE))));
                    td.setIsNemaCertificateRemarks(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATE_REMARKS))));
                    td.setCoffeeAdvisory(c.getString((c.getColumnIndex(KEY_COFFEE_ADVISORY_OFFICER))));
                    td.setCoffeeWorking(c.getString((c.getColumnIndex(KEY_COFFEE_WORKING_GROUP))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setDocumentStatus(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list

                    pulpingStationLicenseApplicationDetailsList.add(td);

                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }

        System.out.println("picking pulpingStationLicenseApplicationDetailsList data from the db" + pulpingStationLicenseApplicationDetailsList.size());
        return pulpingStationLicenseApplicationDetailsList;
    }

    public List<PulpingStationLicenseApplicationDetails> getPulpingStationLicenseApplicationDoneList() {


        List<PulpingStationLicenseApplicationDetails> pulpingStationLicenseApplicationDetails = new ArrayList<>();
        PulpingStationLicenseApplicationDetails td = new PulpingStationLicenseApplicationDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_PULPING_STATION_LICENSE_APPLICATION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Tea Buyer Importer Exporter data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new PulpingStationLicenseApplicationDetails();
                    td.setAFA_CD_Pulp_Ate_Checklist_ID(c.getString(c.getColumnIndex(KEY_PULPING_STAION_LICENSE_APPLICATION_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setAuthorityToErectNumber((c.getString((c.getColumnIndex(KEY_AUTHORITY_TO_ERECT_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setTotalLandArea(c.getString((c.getColumnIndex(KEY_TOTAL_LAND_AREA))));
                    td.setTotalNumberOfTrees(c.getString((c.getColumnIndex(KEY_TOTAL_NUMBER_OF_TREES))));
                    td.setAreaUnderMatureCoffee(c.getString((c.getColumnIndex(KEY_AREA_UNDER_MATURE_COFFEE))));
                    td.setFirstYear(c.getString((c.getColumnIndex(KEY_FIRST_YEAR))));
                    td.setFirstYearProduction(c.getString((c.getColumnIndex(KEY_FIRST_YEAR_PRODUCTION))));
                    td.setSecondYear(c.getString((c.getColumnIndex(KEY_SECOND_YEAR))));
                    td.setSecondYearProduction(c.getString((c.getColumnIndex(KEY_SECOND_YEAR_PRODUCTION))));
                    td.setThirdYear(c.getString((c.getColumnIndex(KEY_THIRD_YEAR))));
                    td.setThirdYearProduction(c.getString((c.getColumnIndex(KEY_THIRD_YEAR_PRODUCTION))));
                    td.setCropHusbandryPractices(c.getString((c.getColumnIndex(KEY_CROP_HUSBANDRY_PRACTICES))));
                    td.setIsObjectionLetter(c.getString((c.getColumnIndex(KEY_OBJECTION_LETTER))));
                    td.setIsObjectionLetterRemarks(c.getString((c.getColumnIndex(KEY_OBJECTION_LETTER_REMARKS))));
                    td.setIsWasteDisposal(c.getString((c.getColumnIndex(KEY_WASTE_DISPOSAL))));
                    td.setIsWasteDisposalRemarks(c.getString((c.getColumnIndex(KEY_WASTE_DISPOSAL_REMARKS))));
                    td.setIsPollutionManagement(c.getString((c.getColumnIndex(KEY_POLLUTION_MANAGEMENT))));
                    td.setIsPollutionManagementRemarks(c.getString((c.getColumnIndex(KEY_POLLUTION_MANAGEMENT_REMARKS))));
                    td.setIsWater(c.getString((c.getColumnIndex(KEY_WATER))));
                    td.setIsWaterRemarks(c.getString((c.getColumnIndex(KEY_WATER_REMARKS))));
                    td.setIsNemaCertificate(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATE))));
                    td.setIsNemaCertificateRemarks(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATE_REMARKS))));
                    td.setCoffeeAdvisory(c.getString((c.getColumnIndex(KEY_COFFEE_ADVISORY_OFFICER))));
                    td.setCoffeeWorking(c.getString((c.getColumnIndex(KEY_COFFEE_WORKING_GROUP))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setDocumentStatus(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list
                    pulpingStationLicenseApplicationDetails.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking pulpingStationLicenseApplicationDetails data from the db" + pulpingStationLicenseApplicationDetails.size());
        return pulpingStationLicenseApplicationDetails;
    }


    /* END OF PULPING STATION LICENSE APPLICATION*/

    /* START OF COFFEE MILLER LICENSE APPLICATION*/
    private static final String KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID = "coffee_miller_license_application_id";
    private static final String KEY_LICENCE_NUMBER = "licence_number";
    private static final String KEY_OFFICE_CONDITION_MARKS = "office_condition_marks";
    private static final String KEY_NEMA_CERTIFICATION = "nema_certification";
    private static final String KEY_NEMA_CERTIFICATION_FINDINGS = "nema_certification_findings";
    private static final String KEY_OCCUPATIONAL_SAFETY = "occupational_safety";
    private static final String KEY_OCCUPATIONAL_SAFETY_FINDINGS = "occupational_safety_findings";
    private static final String KEY_MILLING_MACHINERY = "milling_machinery";
    private static final String KEY_MILLING_MACHINERY_FINDINGS = "milling_machinery_findings";
    private static final String KEY_WASTE_TEAS = "waste_teas";
    private static final String KEY_WASTE_TEAS_FINDINGS = "waste_teas_findings";
    private static final String KEY_LIQUORING_CUPPING = "liquoring_cupping";
    private static final String KEY_LIQUORING_CUPPING_FINDINGS = "liquoring_cupping_findings";
    private static final String KEY_ENGAGEMENT_LIQUORER = "engagement_liquorer";
    private static final String KEY_ENGAGEMENT_LIQUORER_FINDINGS = "engagement_liquorer_findings";
    private static final String KEY_PROTECTIVE_CLOTHING = "protective_clothing";
    private static final String KEY_PROTECTIVE_CLOTHING_FINDINGS = "protective_clothing_findings";
    private static final String KEY_WEIGHING_SCALE = "weighing_scale";
    private static final String KEY_WEIGHING_SCALE_FINDINGS = "weighing_scale_findings";
    private static final String KEY_VALID_INSURANCE = "valid_insurance";
    private static final String KEY_VALID_INSURANCE_FINDINGS = "valid_insurance_findings";
    private static final String KEY_GENERAL_SECURITY = "general_security";
    private static final String KEY_GENERAL_SECURITY_FINDINGS = "general_security_findings";
    private static final String KEY_GROWERS_CONTRACTED = "growers_contracted";
    private static final String KEY_GROWERS_CONTRACTED_FINDINGS = "growers_contracted_findings";
    private static final String KEY_MILLING_RETURN = "milling_return";
    private static final String KEY_MILLING_RETURN_FINDINGS = "milling_return_findings";
    //    private static final String KEY_WALLS = "walls";
    private static final String KEY_WALLS_FINDINGS = "walls_findings";
    //    private static final String KEY_FLOORS = "floors";
    private static final String KEY_FLOORS_FINDINGS = "floors_findings";
    private static final String KEY_ROOF = "roof";
    private static final String KEY_ROOF_FINDINGS = "roof_findings";
    //    private static final String KEY_VENTILATION = "ventilation";
    private static final String KEY_VENTILATION_FINDINGS = "ventilation_findings";
    private static final String KEY_WASHROOMS = "washrooms";
    private static final String KEY_WASHROOMS_FINDINGS = "washrooms_findings";
    private static final String KEY_COFFEE_PACKAGING = "coffee_packaging";
    private static final String KEY_COFFEE_PACKAGING_FINDINGS = "coffee_packaging_findings";
    private static final String KEY_GENERAL_HYGIENE = "general_hygiene";
    private static final String KEY_GENERAL_HYGIENE_FINDINGS = "general_hygiene_findings";
    private static final String KEY_FIREFIGHTING = "firefighting";
    private static final String KEY_FIREFIGHTING_FINDINGS = "firefighting_findings";
    //    private static final String KEY_DOCUMENT_STATUS = "";

    public static final String TABLE_COFFEE_MILLER_LICENSE_APPLICATION = "coffee_miller_license_application";
    public static final String CREATE_TABLE_COFFEE_MILLER_LICENSE_APPLICATION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COFFEE_MILLER_LICENSE_APPLICATION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_APPLICANT_NAME + " TEXT ,"
            + KEY_LICENCE_NUMBER + " TEXT ,"
            + KEY_OFFICE_CONDITION_MARKS + " TEXT ,"
            + KEY_NEMA_CERTIFICATION + " TEXT ,"
            + KEY_NEMA_CERTIFICATION_FINDINGS + " TEXT ,"
            + KEY_OCCUPATIONAL_SAFETY + " TEXT ,"
            + KEY_OCCUPATIONAL_SAFETY_FINDINGS + " TEXT ,"
            + KEY_MILLING_MACHINERY + " TEXT ,"
            + KEY_MILLING_MACHINERY_FINDINGS + " TEXT ,"
            + KEY_WASTE_TEAS + " TEXT ,"
            + KEY_WASTE_TEAS_FINDINGS + " TEXT ,"
            + KEY_LIQUORING_CUPPING + " TEXT ,"
            + KEY_LIQUORING_CUPPING_FINDINGS + " TEXT ,"
            + KEY_ENGAGEMENT_LIQUORER + " TEXT ,"
            + KEY_ENGAGEMENT_LIQUORER_FINDINGS + " TEXT ,"
            + KEY_PROTECTIVE_CLOTHING + " TEXT ,"
            + KEY_PROTECTIVE_CLOTHING_FINDINGS + " TEXT ,"
            + KEY_WEIGHING_SCALE + " TEXT ,"
            + KEY_WEIGHING_SCALE_FINDINGS + " TEXT ,"
            + KEY_VALID_INSURANCE + " TEXT ,"
            + KEY_VALID_INSURANCE_FINDINGS + " TEXT ,"
            + KEY_GENERAL_SECURITY + " TEXT ,"
            + KEY_GENERAL_SECURITY_FINDINGS + " TEXT ,"
            + KEY_GROWERS_CONTRACTED + " TEXT ,"
            + KEY_GROWERS_CONTRACTED_FINDINGS + " TEXT ,"
            + KEY_MILLING_RETURN + " TEXT ,"
            + KEY_MILLING_RETURN_FINDINGS + " TEXT ,"
            + KEY_WALLS + " TEXT ,"
            + KEY_WALLS_FINDINGS + " TEXT ,"
            + KEY_FLOORS + " TEXT ,"
            + KEY_FLOORS_FINDINGS + " TEXT ,"
            + KEY_ROOF + " TEXT ,"
            + KEY_ROOF_FINDINGS + " TEXT ,"
            + KEY_VENTILATION + " TEXT ,"
            + KEY_VENTILATION_FINDINGS + " TEXT ,"
            + KEY_WASHROOMS + " TEXT ,"
            + KEY_WASHROOMS_FINDINGS + " TEXT ,"
            + KEY_COFFEE_PACKAGING + " TEXT ,"
            + KEY_COFFEE_PACKAGING_FINDINGS + " TEXT ,"
            + KEY_GENERAL_HYGIENE + " TEXT ,"
            + KEY_GENERAL_HYGIENE_FINDINGS + " TEXT ,"
            + KEY_FIREFIGHTING + " TEXT ,"
            + KEY_FIREFIGHTING_FINDINGS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_DOCUMENT_STATUS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertCoffeeMillerLicenseApplication(CoffeeMillerLicenceApplicationDetails coffeeMillerLicenceApplicationDetails) {

        System.out.println("AFA_CD_Millerrchecklist_ID document number:" + coffeeMillerLicenceApplicationDetails.getDocumentNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, coffeeMillerLicenceApplicationDetails.getLocalID());
        values.put(KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID, coffeeMillerLicenceApplicationDetails.getAFA_CD_Millerrchecklist_ID());

        values.put(KEY_DOCUMENT_NUMBER, coffeeMillerLicenceApplicationDetails.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, coffeeMillerLicenceApplicationDetails.getDocumentDate());

        values.put(KEY_LICENCE_NUMBER, coffeeMillerLicenceApplicationDetails.getLicenceNumber());


        values.put(KEY_APPLICANT_NAME, coffeeMillerLicenceApplicationDetails.getApplicantName());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCoffeeMillerLicenseApplicationStored(coffeeMillerLicenceApplicationDetails.getAFA_CD_Millerrchecklist_ID())) {
            long coffeeMillerLicenseApplicationID = db.insertWithOnConflict(TABLE_COFFEE_MILLER_LICENSE_APPLICATION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("coffeeMillerLicenseApplicationID: " + coffeeMillerLicenseApplicationID);

            closeDB();
            return coffeeMillerLicenseApplicationID;
        } else {
            long coffeeMillerLicenseApplicationID = -1;
            System.out.println("coffeeMillerLicenseApplicationID: " + coffeeMillerLicenseApplicationID);

            closeDB();
            return coffeeMillerLicenseApplicationID;
        }

    }

    public void deleteCoffeeMillerLicenseApplication() {
        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_MILLER_LICENSE_APPLICATION;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isCoffeeMillerLicenseApplicationStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_COFFEE_MILLER_LICENSE_APPLICATION + " WHERE " + KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCoffeeMillerLicenseSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_COFFEE_MILLER_LICENSE_APPLICATION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long updateCoffeeMillerLicenseApplication(CoffeeMillerLicenceApplication coffeeMillerLicenceApplication) {


        System.out.println("records  to be saved  ID:" + coffeeMillerLicenceApplication.getLocalID());

        System.out.println("document_number to be saved:" + coffeeMillerLicenceApplication.getDocumentNumber());

        System.out.println("document_date to be saved:" + coffeeMillerLicenceApplication.getDocumentDate());

        System.out.println("licence_number to be saved:" + coffeeMillerLicenceApplication.getLicenceNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_OFFICE_CONDITION_MARKS, coffeeMillerLicenceApplication.getOfficeCondition());
            values.put(KEY_NEMA_CERTIFICATION, coffeeMillerLicenceApplication.getNemaCertification());
            values.put(KEY_NEMA_CERTIFICATION_FINDINGS, coffeeMillerLicenceApplication.getNemaCertificationFindings());
            values.put(KEY_OCCUPATIONAL_SAFETY, coffeeMillerLicenceApplication.getOccupationalSafety());
            values.put(KEY_OCCUPATIONAL_SAFETY_FINDINGS, coffeeMillerLicenceApplication.getOccupationalSafetyFindings());
            values.put(KEY_MILLING_MACHINERY, coffeeMillerLicenceApplication.getMillingMachinery());
            values.put(KEY_MILLING_MACHINERY_FINDINGS, coffeeMillerLicenceApplication.getMillingMachineryFindings());
            values.put(KEY_WASTE_TEAS, coffeeMillerLicenceApplication.getWasteTeas());
            values.put(KEY_WASTE_TEAS_FINDINGS, coffeeMillerLicenceApplication.getWasteTeasFindings());
            values.put(KEY_LIQUORING_CUPPING, coffeeMillerLicenceApplication.getLiqouringCupping());
            values.put(KEY_LIQUORING_CUPPING_FINDINGS, coffeeMillerLicenceApplication.getLiqouringCuppingFindings());
            values.put(KEY_ENGAGEMENT_LIQUORER, coffeeMillerLicenceApplication.getEngagementQualified());
            values.put(KEY_ENGAGEMENT_LIQUORER_FINDINGS, coffeeMillerLicenceApplication.getEngagementQualifiedFindings());
            values.put(KEY_PROTECTIVE_CLOTHING, coffeeMillerLicenceApplication.getProtectiveClothing());
            values.put(KEY_PROTECTIVE_CLOTHING_FINDINGS, coffeeMillerLicenceApplication.getProtectiveClothingFindings());
            values.put(KEY_WEIGHING_SCALE, coffeeMillerLicenceApplication.getWeighingScale());
            values.put(KEY_WEIGHING_SCALE_FINDINGS, coffeeMillerLicenceApplication.getWeighingScaleFindings());
            values.put(KEY_VALID_INSURANCE, coffeeMillerLicenceApplication.getValidInsurance());
            values.put(KEY_VALID_INSURANCE_FINDINGS, coffeeMillerLicenceApplication.getValidInsuranceFindings());
            values.put(KEY_GENERAL_SECURITY, coffeeMillerLicenceApplication.getGeneralSecurity());
            values.put(KEY_GENERAL_SECURITY_FINDINGS, coffeeMillerLicenceApplication.getGeneralSecurityFindings());
            values.put(KEY_GROWERS_CONTRACTED, coffeeMillerLicenceApplication.getGrowersContracted());
            values.put(KEY_GROWERS_CONTRACTED_FINDINGS, coffeeMillerLicenceApplication.getGrowersContractedFindings());
            values.put(KEY_MILLING_RETURN, coffeeMillerLicenceApplication.getMillingReturns());
            values.put(KEY_MILLING_RETURN_FINDINGS, coffeeMillerLicenceApplication.getMillingReturnsFindings());
            values.put(KEY_WALLS, coffeeMillerLicenceApplication.getWalls());
            values.put(KEY_WALLS_FINDINGS, coffeeMillerLicenceApplication.getWallsFindings());
            values.put(KEY_FLOORS, coffeeMillerLicenceApplication.getFloors());
            values.put(KEY_FLOORS_FINDINGS, coffeeMillerLicenceApplication.getFloorsFindings());
            values.put(KEY_ROOF, coffeeMillerLicenceApplication.getRoof());
            values.put(KEY_ROOF_FINDINGS, coffeeMillerLicenceApplication.getRoofFindings());
            values.put(KEY_VENTILATION, coffeeMillerLicenceApplication.getVentilation());
            values.put(KEY_VENTILATION_FINDINGS, coffeeMillerLicenceApplication.getVentilationFindings());
            values.put(KEY_WASHROOMS, coffeeMillerLicenceApplication.getWashroom());
            values.put(KEY_WASHROOMS_FINDINGS, coffeeMillerLicenceApplication.getWashroomFindings());
            values.put(KEY_COFFEE_PACKAGING, coffeeMillerLicenceApplication.getCoffeePackaging());
            values.put(KEY_COFFEE_PACKAGING_FINDINGS, coffeeMillerLicenceApplication.getCoffeePackagingFindings());
            values.put(KEY_GENERAL_HYGIENE, coffeeMillerLicenceApplication.getGeneralHygiene());
            values.put(KEY_GENERAL_HYGIENE_FINDINGS, coffeeMillerLicenceApplication.getGeneralHygieneFindings());
            values.put(KEY_FIREFIGHTING, coffeeMillerLicenceApplication.getFirefighting());
            values.put(KEY_FIREFIGHTING_FINDINGS, coffeeMillerLicenceApplication.getFirefightingFindings());
            values.put(KEY_OFFICER_RECOMMENDATION, coffeeMillerLicenceApplication.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, coffeeMillerLicenceApplication.getOfficerrecommendation_remark());

            result = db.update(TABLE_COFFEE_MILLER_LICENSE_APPLICATION, values, "id =" + Integer.parseInt(coffeeMillerLicenceApplication.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<CoffeeMillerLicenceApplicationDetails> getCoffeeMillerLicenseApplicationList() {

        List<CoffeeMillerLicenceApplicationDetails> coffeeMillerLicenceApplicationDetailsList = new ArrayList<>();
        CoffeeMillerLicenceApplicationDetails td = new CoffeeMillerLicenceApplicationDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_MILLER_LICENSE_APPLICATION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking CoffeeMillerLicenceApplicationDetails data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeMillerLicenceApplicationDetails();
                    td.setAFA_CD_Millerrchecklist_ID(c.getString(c.getColumnIndex(KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicenceNumber((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setOfficeCondition(c.getString((c.getColumnIndex(KEY_OFFICE_CONDITION_MARKS))));
                    td.setNemaCertification(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATION))));
                    td.setNemaCertificationFindings(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATION_FINDINGS))));
                    td.setOccupationalSafety(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_SAFETY))));
                    td.setOccupationalSafetyFindings(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_SAFETY_FINDINGS))));
                    td.setMillingMachinery(c.getString((c.getColumnIndex(KEY_MILLING_MACHINERY))));
                    td.setMillingMachineryFindings(c.getString((c.getColumnIndex(KEY_MILLING_MACHINERY_FINDINGS))));
                    td.setWasteTeas(c.getString((c.getColumnIndex(KEY_WASTE_TEAS))));
                    td.setWasteTeasFindings(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_FINDINGS))));
                    td.setLiqouringCupping(c.getString((c.getColumnIndex(KEY_LIQUORING_CUPPING))));
                    td.setLiqouringCuppingFindings(c.getString((c.getColumnIndex(KEY_LIQUORING_CUPPING_FINDINGS))));
                    td.setEngagementQualified(c.getString((c.getColumnIndex(KEY_ENGAGEMENT_LIQUORER))));
                    td.setEngagementQualifiedFindings(c.getString((c.getColumnIndex(KEY_ENGAGEMENT_LIQUORER_FINDINGS))));
                    td.setProtectiveClothing(c.getString((c.getColumnIndex(KEY_PROTECTIVE_CLOTHING))));
                    td.setProtectiveClothingFindings(c.getString((c.getColumnIndex(KEY_PROTECTIVE_CLOTHING_FINDINGS))));
                    td.setWeighingScale(c.getString((c.getColumnIndex(KEY_WEIGHING_SCALE))));
                    td.setWeighingScaleFindings(c.getString((c.getColumnIndex(KEY_WEIGHING_SCALE_FINDINGS))));
                    td.setValidInsurance(c.getString((c.getColumnIndex(KEY_VALID_INSURANCE))));
                    td.setValidInsuranceFindings(c.getString((c.getColumnIndex(KEY_VALID_INSURANCE_FINDINGS))));
                    td.setGeneralSecurity(c.getString((c.getColumnIndex(KEY_GENERAL_SECURITY))));
                    td.setGeneralSecurityFindings(c.getString((c.getColumnIndex(KEY_GENERAL_SECURITY_FINDINGS))));
                    td.setGrowersContracted(c.getString((c.getColumnIndex(KEY_GROWERS_CONTRACTED))));
                    td.setGrowersContractedFindings(c.getString((c.getColumnIndex(KEY_GROWERS_CONTRACTED_FINDINGS))));
                    td.setMillingReturns(c.getString((c.getColumnIndex(KEY_MILLING_RETURN))));
                    td.setMillingReturnsFindings(c.getString((c.getColumnIndex(KEY_MILLING_RETURN_FINDINGS))));
                    td.setWalls(c.getString((c.getColumnIndex(KEY_WALLS))));
                    td.setWallsFindings(c.getString((c.getColumnIndex(KEY_WALLS_FINDINGS))));
                    td.setFloors(c.getString((c.getColumnIndex(KEY_FLOORS))));
                    td.setFloorsFindings(c.getString((c.getColumnIndex(KEY_FLOORS_FINDINGS))));
                    td.setRoof(c.getString((c.getColumnIndex(KEY_ROOF))));
                    td.setRoofFindings(c.getString((c.getColumnIndex(KEY_ROOF_FINDINGS))));
                    td.setVentilation(c.getString((c.getColumnIndex(KEY_VENTILATION))));
                    td.setVentilationFindings(c.getString((c.getColumnIndex(KEY_VENTILATION_FINDINGS))));
                    td.setWashroom(c.getString((c.getColumnIndex(KEY_WASHROOMS))));
                    td.setWashroomFindings(c.getString((c.getColumnIndex(KEY_WASHROOMS_FINDINGS))));
                    td.setCoffeePackaging(c.getString((c.getColumnIndex(KEY_COFFEE_PACKAGING))));
                    td.setCoffeePackagingFindings(c.getString((c.getColumnIndex(KEY_COFFEE_PACKAGING_FINDINGS))));
                    td.setGeneralHygiene(c.getString((c.getColumnIndex(KEY_GENERAL_HYGIENE))));
                    td.setGeneralHygieneFindings(c.getString((c.getColumnIndex(KEY_GENERAL_HYGIENE_FINDINGS))));
                    td.setFirefighting(c.getString((c.getColumnIndex(KEY_FIREFIGHTING))));
                    td.setFirefightingFindings(c.getString((c.getColumnIndex(KEY_FIREFIGHTING_FINDINGS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                  

                    // adding to itinerary list

                    coffeeMillerLicenceApplicationDetailsList.add(td);

                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }

        System.out.println("picking coffeeMillerLicenceApplicationDetailsList data from the db" + coffeeMillerLicenceApplicationDetailsList.size());
        return coffeeMillerLicenceApplicationDetailsList;
    }

    public List<CoffeeMillerLicenceApplicationDetails> getCoffeeMillerLicenseApplicationDoneList() {


        List<CoffeeMillerLicenceApplicationDetails> coffeeMillerLicenceApplicationDetailsList = new ArrayList<>();
        CoffeeMillerLicenceApplicationDetails td = new CoffeeMillerLicenceApplicationDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_MILLER_LICENSE_APPLICATION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Tea Buyer Importer Exporter data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeMillerLicenceApplicationDetails();
                    td.setAFA_CD_Millerrchecklist_ID(c.getString(c.getColumnIndex(KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicenceNumber((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setOfficeCondition(c.getString((c.getColumnIndex(KEY_OFFICE_CONDITION_MARKS))));
                    td.setNemaCertification(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATION))));
                    td.setNemaCertificationFindings(c.getString((c.getColumnIndex(KEY_NEMA_CERTIFICATION_FINDINGS))));
                    td.setOccupationalSafety(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_SAFETY))));
                    td.setOccupationalSafetyFindings(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_SAFETY_FINDINGS))));
                    td.setMillingMachinery(c.getString((c.getColumnIndex(KEY_MILLING_MACHINERY))));
                    td.setMillingMachineryFindings(c.getString((c.getColumnIndex(KEY_MILLING_MACHINERY_FINDINGS))));
                    td.setWasteTeas(c.getString((c.getColumnIndex(KEY_WASTE_TEAS))));
                    td.setWasteTeasFindings(c.getString((c.getColumnIndex(KEY_WASTE_TEAS_FINDINGS))));
                    td.setLiqouringCupping(c.getString((c.getColumnIndex(KEY_LIQUORING_CUPPING))));
                    td.setLiqouringCuppingFindings(c.getString((c.getColumnIndex(KEY_LIQUORING_CUPPING_FINDINGS))));
                    td.setEngagementQualified(c.getString((c.getColumnIndex(KEY_ENGAGEMENT_LIQUORER))));
                    td.setEngagementQualifiedFindings(c.getString((c.getColumnIndex(KEY_ENGAGEMENT_LIQUORER_FINDINGS))));
                    td.setProtectiveClothing(c.getString((c.getColumnIndex(KEY_PROTECTIVE_CLOTHING))));
                    td.setProtectiveClothingFindings(c.getString((c.getColumnIndex(KEY_PROTECTIVE_CLOTHING_FINDINGS))));
                    td.setWeighingScale(c.getString((c.getColumnIndex(KEY_WEIGHING_SCALE))));
                    td.setWeighingScaleFindings(c.getString((c.getColumnIndex(KEY_WEIGHING_SCALE_FINDINGS))));
                    td.setValidInsurance(c.getString((c.getColumnIndex(KEY_VALID_INSURANCE))));
                    td.setValidInsuranceFindings(c.getString((c.getColumnIndex(KEY_VALID_INSURANCE_FINDINGS))));
                    td.setGeneralSecurity(c.getString((c.getColumnIndex(KEY_GENERAL_SECURITY))));
                    td.setGeneralSecurityFindings(c.getString((c.getColumnIndex(KEY_GENERAL_SECURITY_FINDINGS))));
                    td.setGrowersContracted(c.getString((c.getColumnIndex(KEY_GROWERS_CONTRACTED))));
                    td.setGrowersContractedFindings(c.getString((c.getColumnIndex(KEY_GROWERS_CONTRACTED_FINDINGS))));
                    td.setMillingReturns(c.getString((c.getColumnIndex(KEY_MILLING_RETURN))));
                    td.setMillingReturnsFindings(c.getString((c.getColumnIndex(KEY_MILLING_RETURN_FINDINGS))));
                    td.setWalls(c.getString((c.getColumnIndex(KEY_WALLS))));
                    td.setWallsFindings(c.getString((c.getColumnIndex(KEY_WALLS_FINDINGS))));
                    td.setFloors(c.getString((c.getColumnIndex(KEY_FLOORS))));
                    td.setFloorsFindings(c.getString((c.getColumnIndex(KEY_FLOORS_FINDINGS))));
                    td.setRoof(c.getString((c.getColumnIndex(KEY_ROOF))));
                    td.setRoofFindings(c.getString((c.getColumnIndex(KEY_ROOF_FINDINGS))));
                    td.setVentilation(c.getString((c.getColumnIndex(KEY_VENTILATION))));
                    td.setVentilationFindings(c.getString((c.getColumnIndex(KEY_VENTILATION_FINDINGS))));
                    td.setWashroom(c.getString((c.getColumnIndex(KEY_WASHROOMS))));
                    td.setWashroomFindings(c.getString((c.getColumnIndex(KEY_WASHROOMS_FINDINGS))));
                    td.setCoffeePackaging(c.getString((c.getColumnIndex(KEY_COFFEE_PACKAGING))));
                    td.setCoffeePackagingFindings(c.getString((c.getColumnIndex(KEY_COFFEE_PACKAGING_FINDINGS))));
                    td.setGeneralHygiene(c.getString((c.getColumnIndex(KEY_GENERAL_HYGIENE))));
                    td.setGeneralHygieneFindings(c.getString((c.getColumnIndex(KEY_GENERAL_HYGIENE_FINDINGS))));
                    td.setFirefighting(c.getString((c.getColumnIndex(KEY_FIREFIGHTING))));
                    td.setFirefightingFindings(c.getString((c.getColumnIndex(KEY_FIREFIGHTING_FINDINGS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setDocumentStatus(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list
                    coffeeMillerLicenceApplicationDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking coffeeMillerLicenceApplicationDetailsList data from the db" + coffeeMillerLicenceApplicationDetailsList.size());
        return coffeeMillerLicenceApplicationDetailsList;
    }
    /* END OF COFFEE MILLER LICENSE APPLICATION*/

    /* START OF COFFEE GROWER MARKETING AGENT*/
    private static final String KEY_COFFEE_GROWER_MARKETING_AGENT_ID = "coffee_grower_marketing_agent_id";
    //    private static final String KEY_LICENCE_NUMBER = "licence_number";
    private static final String KEY_ARE_MARKINGS_CLEAR = "are_markings_clear";
    private static final String KEY_ARE_MARKINGS_CLEAR_REMARKS = "are_markings_clear_remarks";
    private static final String KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID = "is_coffee_directorate_licence_valid";
    private static final String KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID_REMARKS = "is_coffee_directorate_licence_valid_remarks";
    private static final String KEY_HAS_SINGLE_BUSINESS_PERMIT = "has_single_business_permit";
    private static final String KEY_HAS_SINGLE_BUSINESS_PERMIT_REMARKS = "has_single_business_permit_remarks";
    private static final String KEY_ARE_WASTE_DISPOSAL_SYSTEMS = "are_waste_disposal_systems";
    private static final String KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS = "are_waste_disposal_systems_remarks";
    private static final String KEY_HAS_FIRE_FIGHTING_EQUIPMENT = "has_fire_fighting_equipment";
    private static final String KEY_HAS_FIRE_FIGHTING_EQUIPMENT_REMARKS = "has_fire_fighting_equipment_remarks";
    private static final String KEY_IS_GENERAL_HYGIENE_SATISFACTORY = "is_general_hygiene_satisfactory";
    private static final String KEY_IS_GENERAL_HYGIENE_SATISFACTORY_REMARKS = "is_general_hygiene_satisfactory_remarks";
    private static final String KEY_ARE_WASHING_ROOMS_CLEAN = "are_washing_rooms_clean";
    private static final String KEY_ARE_WASHING_ROOMS_CLEAN_REMARKS = "are_washing_rooms_clean_remarks";
    private static final String KEY_CLEAN_WATER_SUPPLIED = "clean_water_supplied";
    private static final String KEY_CLEAN_WATER_SUPPLIED_REMARKS = "clean_water_supplied_remarks";
    private static final String KEY_ELECTRICITY_SUPPLIED = "electricity_supplied";
    private static final String KEY_ELECTRICITY_SUPPLIED_REMARKS = "electricity_supplied_remarks";
    private static final String KEY_RETURNS_TO_COFFEE_DIRECTORATE = "returns_to_coffee_directorate";
    private static final String KEY_RETURNS_TO_COFFEE_DIRECTORATE_REMARKS = "returns_to_coffee_directorate_remarks";
    private static final String KEY_IS_TRACEABILITY_SYSTEM = "is_traceability_system";
    private static final String KEY_IS_TRACEABILITY_SYSTEM_REMARKS = "is_traceability_system_remarks";
    private static final String KEY_CUPPING_FACILITIES_FOR_COFFEE = "cupping_facilities_for_coffee";
    private static final String KEY_CUPPING_FACILITIES_FOR_COFFEE_REMARKS = "cupping_facilities_for_coffee_remarks";
    private static final String KEY_OCCUPATIONAL_HEALTH = "occupational_health";
    private static final String KEY_OCCUPATIONAL_HEALTH_REMARKS = "occupational_health_remarks";
    private static final String KEY_PAYMENT_TO_GROWERS = "payment_to_growers";
    private static final String KEY_PAYMENT_TO_GROWERS_REMARKS = "payment_to_growers_remarks";
    private static final String KEY_STANDARD_OUT_TURN = "standard_out_turn";
    private static final String KEY_STANDARD_OUT_TURN_REMARKS = "standard_out_turn_remarks";
    private static final String KEY_STANDARD_DIRECT_SALES = "standard_direct_sales";
    private static final String KEY_STANDARD_DIRECT_SALES_REMARKS = "standard_direct_sales_remarks";    //    private static final String KEY_DOCUMENT_STATUS = "";

    public static final String TABLE_COFFEE_GROWER_MARKETING_AGENT = "coffee_grower_marketing_agent";
    public static final String CREATE_TABLE_COFFEE_GROWER_MARKETING_AGENT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COFFEE_GROWER_MARKETING_AGENT + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_GROWER_MARKETING_AGENT_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_APPLICANT_NAME + " TEXT ,"
            + KEY_LICENCE_NUMBER + " TEXT ,"
            + KEY_ARE_MARKINGS_CLEAR + " TEXT ,"
            + KEY_ARE_MARKINGS_CLEAR_REMARKS + " TEXT ,"
            + KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID + " TEXT ,"
            + KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID_REMARKS + " TEXT ,"
            + KEY_HAS_SINGLE_BUSINESS_PERMIT + " TEXT ,"
            + KEY_HAS_SINGLE_BUSINESS_PERMIT_REMARKS + " TEXT ,"
            + KEY_ARE_WASTE_DISPOSAL_SYSTEMS + " TEXT ,"
            + KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS + " TEXT ,"
            + KEY_HAS_FIRE_FIGHTING_EQUIPMENT + " TEXT ,"
            + KEY_HAS_FIRE_FIGHTING_EQUIPMENT_REMARKS + " TEXT ,"
            + KEY_IS_GENERAL_HYGIENE_SATISFACTORY + " TEXT ,"
            + KEY_IS_GENERAL_HYGIENE_SATISFACTORY_REMARKS + " TEXT ,"
            + KEY_ARE_WASHING_ROOMS_CLEAN + " TEXT ,"
            + KEY_ARE_WASHING_ROOMS_CLEAN_REMARKS + " TEXT ,"
            + KEY_CLEAN_WATER_SUPPLIED + " TEXT ,"
            + KEY_CLEAN_WATER_SUPPLIED_REMARKS + " TEXT ,"
            + KEY_ELECTRICITY_SUPPLIED + " TEXT ,"
            + KEY_ELECTRICITY_SUPPLIED_REMARKS + " TEXT ,"
            + KEY_RETURNS_TO_COFFEE_DIRECTORATE + " TEXT ,"
            + KEY_RETURNS_TO_COFFEE_DIRECTORATE_REMARKS + " TEXT ,"
            + KEY_TRACEABILITY_SYSTEM + " TEXT ,"
            + KEY_TRACEABILITY_SYSTEM_REMARKS + " TEXT ,"
            + KEY_CUPPING_FACILITIES_FOR_COFFEE + " TEXT ,"
            + KEY_CUPPING_FACILITIES_FOR_COFFEE_REMARKS + " TEXT ,"
            + KEY_OCCUPATIONAL_HEALTH + " TEXT ,"
            + KEY_OCCUPATIONAL_HEALTH_REMARKS + " TEXT ,"
            + KEY_PAYMENT_TO_GROWERS + " TEXT ,"
            + KEY_PAYMENT_TO_GROWERS_REMARKS + " TEXT ,"
            + KEY_STANDARD_OUT_TURN + " TEXT ,"
            + KEY_STANDARD_OUT_TURN_REMARKS + " TEXT ,"
            + KEY_STANDARD_DIRECT_SALES + " TEXT ,"
            + KEY_STANDARD_DIRECT_SALES_REMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_DOCUMENT_STATUS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertCoffeeGrowerMarketingAgent(CoffeeGrowerMarketingAgentDetails coffeeGrowerMarketingAgentDetails) {

        System.out.println("AFA_CD_Growermarkchecklist_ID document number:" + coffeeGrowerMarketingAgentDetails.getDocumentNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, coffeeGrowerMarketingAgentDetails.getLocalID());
        values.put(KEY_COFFEE_GROWER_MARKETING_AGENT_ID, coffeeGrowerMarketingAgentDetails.getAFA_CD_Growermarkchecklist_ID());

        values.put(KEY_DOCUMENT_NUMBER, coffeeGrowerMarketingAgentDetails.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, coffeeGrowerMarketingAgentDetails.getDocumentDate());

        values.put(KEY_LICENCE_NUMBER, coffeeGrowerMarketingAgentDetails.getLicenceNumber());


        values.put(KEY_APPLICANT_NAME, coffeeGrowerMarketingAgentDetails.getApplicantName());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCoffeeGrowerMarketingAgentStored(coffeeGrowerMarketingAgentDetails.getAFA_CD_Growermarkchecklist_ID())) {
            long coffeeGrowerMarketingAgentID = db.insertWithOnConflict(TABLE_COFFEE_GROWER_MARKETING_AGENT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("coffeeGrowerMarketingAgentID: " + coffeeGrowerMarketingAgentID);

            closeDB();
            return coffeeGrowerMarketingAgentID;
        } else {
            long coffeeGrowerMarketingAgentID = -1;
            System.out.println("coffeeGrowerMarketingAgentID: " + coffeeGrowerMarketingAgentID);

            closeDB();
            return coffeeGrowerMarketingAgentID;
        }

    }

    public void deleteCoffeeGrowerMarketingAgent() {
        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_GROWER_MARKETING_AGENT;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isCoffeeGrowerMarketingAgentStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_COFFEE_GROWER_MARKETING_AGENT + " WHERE " + KEY_COFFEE_GROWER_MARKETING_AGENT_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCoffeeGrowerMarketingAgentSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_COFFEE_GROWER_MARKETING_AGENT, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long updateCoffeeGrowerMarketingAgent(CoffeeGrowerMarketingAgent coffeeGrowerMarketingAgent) {


        System.out.println("records  to be saved  ID:" + coffeeGrowerMarketingAgent.getLocalID());

        System.out.println("document_number to be saved:" + coffeeGrowerMarketingAgent.getDocumentNumber());

        System.out.println("document_date to be saved:" + coffeeGrowerMarketingAgent.getDocumentDate());

        System.out.println("licence_number to be saved:" + coffeeGrowerMarketingAgent.getLicenceNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_ARE_MARKINGS_CLEAR, coffeeGrowerMarketingAgent.getIsMarkings());
            values.put(KEY_ARE_MARKINGS_CLEAR_REMARKS, coffeeGrowerMarketingAgent.getIsMarkingsRemarks());
            values.put(KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID, coffeeGrowerMarketingAgent.getIsCoffeeDirectorate());
            values.put(KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID_REMARKS, coffeeGrowerMarketingAgent.getIsCoffeeDirectorateRemarks());
            values.put(KEY_HAS_SINGLE_BUSINESS_PERMIT, coffeeGrowerMarketingAgent.getIsSingleBusinessPermit());
            values.put(KEY_HAS_SINGLE_BUSINESS_PERMIT_REMARKS, coffeeGrowerMarketingAgent.getIsSingleBusinessPermitRemarks());
            values.put(KEY_ARE_WASTE_DISPOSAL_SYSTEMS, coffeeGrowerMarketingAgent.getIsWasteDisposalSystems());
            values.put(KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS, coffeeGrowerMarketingAgent.getIsWasteDisposalSystemsRemarks());
            values.put(KEY_HAS_FIRE_FIGHTING_EQUIPMENT, coffeeGrowerMarketingAgent.getIsFireFightingEquipment());
            values.put(KEY_HAS_FIRE_FIGHTING_EQUIPMENT_REMARKS, coffeeGrowerMarketingAgent.getIsFireFightingEquipmentRemarks());
            values.put(KEY_IS_GENERAL_HYGIENE_SATISFACTORY, coffeeGrowerMarketingAgent.getIsGeneralHygieneSatisfactory());
            values.put(KEY_IS_GENERAL_HYGIENE_SATISFACTORY_REMARKS, coffeeGrowerMarketingAgent.getIsGeneralHygieneSatisfactoryRemarks());
            values.put(KEY_ARE_WASHING_ROOMS_CLEAN, coffeeGrowerMarketingAgent.getIsWashingRoomsClean());
            values.put(KEY_ARE_WASHING_ROOMS_CLEAN_REMARKS, coffeeGrowerMarketingAgent.getIsWashingRoomsCleanRemarks());
            values.put(KEY_CLEAN_WATER_SUPPLIED, coffeeGrowerMarketingAgent.getIsCleanWaterSupplied());
            values.put(KEY_CLEAN_WATER_SUPPLIED_REMARKS, coffeeGrowerMarketingAgent.getIsCleanWaterSuppliedRemarks());
            values.put(KEY_ELECTRICITY_SUPPLIED, coffeeGrowerMarketingAgent.getIsElectricitySupplied());
            values.put(KEY_ELECTRICITY_SUPPLIED_REMARKS, coffeeGrowerMarketingAgent.getIsElectricitySuppliedRemarks());
            values.put(KEY_RETURNS_TO_COFFEE_DIRECTORATE, coffeeGrowerMarketingAgent.getIsReturnsToCoffeeDirectorate());
            values.put(KEY_RETURNS_TO_COFFEE_DIRECTORATE_REMARKS, coffeeGrowerMarketingAgent.getIsReturnsToCoffeeDirectorateRemarks());
            values.put(KEY_TRACEABILITY_SYSTEM, coffeeGrowerMarketingAgent.getIsTraceabilitySystem());
            values.put(KEY_TRACEABILITY_SYSTEM_REMARKS, coffeeGrowerMarketingAgent.getIsTraceabilitySystemRemarks());
            values.put(KEY_CUPPING_FACILITIES_FOR_COFFEE, coffeeGrowerMarketingAgent.getIsCuppingFacilities());
            values.put(KEY_CUPPING_FACILITIES_FOR_COFFEE_REMARKS, coffeeGrowerMarketingAgent.getIsCuppingFacilitiesRemarks());
            values.put(KEY_OCCUPATIONAL_HEALTH, coffeeGrowerMarketingAgent.getIsOccupationalHealth());
            values.put(KEY_OCCUPATIONAL_HEALTH_REMARKS, coffeeGrowerMarketingAgent.getIsOccupationalHealthRemarks());
            values.put(KEY_PAYMENT_TO_GROWERS, coffeeGrowerMarketingAgent.getIsPayementToGrowers());
            values.put(KEY_PAYMENT_TO_GROWERS_REMARKS, coffeeGrowerMarketingAgent.getIsPayementToGrowersRemarks());
            values.put(KEY_STANDARD_OUT_TURN, coffeeGrowerMarketingAgent.getIsStandardOutTurn());
            values.put(KEY_STANDARD_OUT_TURN_REMARKS, coffeeGrowerMarketingAgent.getIsStandardOutTurnRemarks());
            values.put(KEY_STANDARD_DIRECT_SALES, coffeeGrowerMarketingAgent.getIsStandardDirect());
            values.put(KEY_STANDARD_DIRECT_SALES_REMARKS, coffeeGrowerMarketingAgent.getIsStandardDirectRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, coffeeGrowerMarketingAgent.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, coffeeGrowerMarketingAgent.getOfficerrecommendation_remark());
            values.put(KEY_DOCUMENT_STATUS, coffeeGrowerMarketingAgent.getDocumentStatus());

            result = db.update(TABLE_COFFEE_GROWER_MARKETING_AGENT, values, "id =" + Integer.parseInt(coffeeGrowerMarketingAgent.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<CoffeeGrowerMarketingAgentDetails> getCoffeeGrowerMarketingAgentDetailsList() {

        List<CoffeeGrowerMarketingAgentDetails> coffeeGrowerMarketingAgentDetailsList = new ArrayList<>();
        CoffeeGrowerMarketingAgentDetails td = new CoffeeGrowerMarketingAgentDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_GROWER_MARKETING_AGENT + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking CoffeeGrowerMarketingAgentDetails data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeGrowerMarketingAgentDetails();
                    td.setAFA_CD_Growermarkchecklist_ID(c.getString(c.getColumnIndex(KEY_COFFEE_GROWER_MARKETING_AGENT_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicenceNumber((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLicenceNumber(c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER))));
                    td.setIsMarkings(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR))));
                    td.setIsMarkingsRemarks(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_REMARKS))));
                    td.setIsCoffeeDirectorate(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID))));
                    td.setIsCoffeeDirectorateRemarks(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID_REMARKS))));
                    td.setIsSingleBusinessPermit(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS_PERMIT))));
                    td.setIsSingleBusinessPermitRemarks(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS_PERMIT_REMARKS))));
                    td.setIsWasteDisposalSystems(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS))));
                    td.setIsWasteDisposalSystemsRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS))));
                    td.setIsFireFightingEquipment(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_EQUIPMENT))));
                    td.setIsFireFightingEquipmentRemarks(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_EQUIPMENT_REMARKS))));
                    td.setIsGeneralHygieneSatisfactory(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE_SATISFACTORY))));
                    td.setIsGeneralHygieneSatisfactoryRemarks(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE_SATISFACTORY_REMARKS))));
                    td.setIsWashingRoomsClean(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_CLEAN))));
                    td.setIsWashingRoomsCleanRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_CLEAN_REMARKS))));
                    td.setIsCleanWaterSupplied(c.getString((c.getColumnIndex(KEY_CLEAN_WATER_SUPPLIED))));
                    td.setIsCleanWaterSuppliedRemarks(c.getString((c.getColumnIndex(KEY_CLEAN_WATER_SUPPLIED_REMARKS))));
                    td.setIsElectricitySupplied(c.getString((c.getColumnIndex(KEY_ELECTRICITY_SUPPLIED))));
                    td.setIsElectricitySuppliedRemarks(c.getString((c.getColumnIndex(KEY_ELECTRICITY_SUPPLIED_REMARKS))));
                    td.setIsReturnsToCoffeeDirectorate(c.getString((c.getColumnIndex(KEY_RETURNS_TO_COFFEE_DIRECTORATE))));
                    td.setIsReturnsToCoffeeDirectorateRemarks(c.getString((c.getColumnIndex(KEY_RETURNS_TO_COFFEE_DIRECTORATE_REMARKS))));
                    td.setIsTraceabilitySystem(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM))));
                    td.setIsTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setIsCuppingFacilities(c.getString((c.getColumnIndex(KEY_CUPPING_FACILITIES_FOR_COFFEE))));
                    td.setIsCuppingFacilitiesRemarks(c.getString((c.getColumnIndex(KEY_CUPPING_FACILITIES_FOR_COFFEE_REMARKS))));
                    td.setIsOccupationalHealth(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_HEALTH))));
                    td.setIsOccupationalHealthRemarks(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_HEALTH_REMARKS))));
                    td.setIsPayementToGrowers(c.getString((c.getColumnIndex(KEY_PAYMENT_TO_GROWERS))));
                    td.setIsPayementToGrowersRemarks(c.getString((c.getColumnIndex(KEY_PAYMENT_TO_GROWERS_REMARKS))));
                    td.setIsStandardOutTurn(c.getString((c.getColumnIndex(KEY_STANDARD_OUT_TURN))));
                    td.setIsStandardOutTurnRemarks(c.getString((c.getColumnIndex(KEY_STANDARD_OUT_TURN_REMARKS))));
                    td.setIsStandardDirect(c.getString((c.getColumnIndex(KEY_STANDARD_DIRECT_SALES))));
                    td.setIsStandardDirectRemarks(c.getString((c.getColumnIndex(KEY_STANDARD_DIRECT_SALES_REMARKS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setDocumentStatus(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list

                    coffeeGrowerMarketingAgentDetailsList.add(td);

                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }

        System.out.println("picking coffeeGrowerMarketingAgentDetailsList data from the db" + coffeeGrowerMarketingAgentDetailsList.size());
        return coffeeGrowerMarketingAgentDetailsList;
    }

    public List<CoffeeGrowerMarketingAgentDetails> getCoffeeGrowerMarketingAgentDetailsDoneList() {


        List<CoffeeGrowerMarketingAgentDetails> coffeeGrowerMarketingAgentDetailsList = new ArrayList<>();
        CoffeeGrowerMarketingAgentDetails td = new CoffeeGrowerMarketingAgentDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_GROWER_MARKETING_AGENT + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Coffee Grower Marketing Agent data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeGrowerMarketingAgentDetails();
                    td.setAFA_CD_Growermarkchecklist_ID(c.getString(c.getColumnIndex(KEY_COFFEE_GROWER_MARKETING_AGENT_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicenceNumber((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLicenceNumber(c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER))));
                    td.setIsMarkings(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR))));
                    td.setIsMarkingsRemarks(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_REMARKS))));
                    td.setIsCoffeeDirectorate(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID))));
                    td.setIsCoffeeDirectorateRemarks(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE_LICENCE_VALID_REMARKS))));
                    td.setIsSingleBusinessPermit(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS_PERMIT))));
                    td.setIsSingleBusinessPermitRemarks(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS_PERMIT_REMARKS))));
                    td.setIsWasteDisposalSystems(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS))));
                    td.setIsWasteDisposalSystemsRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS))));
                    td.setIsFireFightingEquipment(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_EQUIPMENT))));
                    td.setIsFireFightingEquipmentRemarks(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_EQUIPMENT_REMARKS))));
                    td.setIsGeneralHygieneSatisfactory(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE_SATISFACTORY))));
                    td.setIsGeneralHygieneSatisfactoryRemarks(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE_SATISFACTORY_REMARKS))));
                    td.setIsWashingRoomsClean(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_CLEAN))));
                    td.setIsWashingRoomsCleanRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_CLEAN_REMARKS))));
                    td.setIsCleanWaterSupplied(c.getString((c.getColumnIndex(KEY_CLEAN_WATER_SUPPLIED))));
                    td.setIsCleanWaterSuppliedRemarks(c.getString((c.getColumnIndex(KEY_CLEAN_WATER_SUPPLIED_REMARKS))));
                    td.setIsElectricitySupplied(c.getString((c.getColumnIndex(KEY_ELECTRICITY_SUPPLIED))));
                    td.setIsElectricitySuppliedRemarks(c.getString((c.getColumnIndex(KEY_ELECTRICITY_SUPPLIED_REMARKS))));
                    td.setIsReturnsToCoffeeDirectorate(c.getString((c.getColumnIndex(KEY_RETURNS_TO_COFFEE_DIRECTORATE))));
                    td.setIsReturnsToCoffeeDirectorateRemarks(c.getString((c.getColumnIndex(KEY_RETURNS_TO_COFFEE_DIRECTORATE_REMARKS))));
                    td.setIsTraceabilitySystem(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM))));
                    td.setIsTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setIsCuppingFacilities(c.getString((c.getColumnIndex(KEY_CUPPING_FACILITIES_FOR_COFFEE))));
                    td.setIsCuppingFacilitiesRemarks(c.getString((c.getColumnIndex(KEY_CUPPING_FACILITIES_FOR_COFFEE_REMARKS))));
                    td.setIsOccupationalHealth(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_HEALTH))));
                    td.setIsOccupationalHealthRemarks(c.getString((c.getColumnIndex(KEY_OCCUPATIONAL_HEALTH_REMARKS))));
                    td.setIsPayementToGrowers(c.getString((c.getColumnIndex(KEY_PAYMENT_TO_GROWERS))));
                    td.setIsPayementToGrowersRemarks(c.getString((c.getColumnIndex(KEY_PAYMENT_TO_GROWERS_REMARKS))));
                    td.setIsStandardOutTurn(c.getString((c.getColumnIndex(KEY_STANDARD_OUT_TURN))));
                    td.setIsStandardOutTurnRemarks(c.getString((c.getColumnIndex(KEY_STANDARD_OUT_TURN_REMARKS))));
                    td.setIsStandardDirect(c.getString((c.getColumnIndex(KEY_STANDARD_DIRECT_SALES))));
                    td.setIsStandardDirectRemarks(c.getString((c.getColumnIndex(KEY_STANDARD_DIRECT_SALES_REMARKS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setDocumentStatus(c.getString((c.getColumnIndex(KEY_DOCUMENT_STATUS))));


                    // adding to itinerary list
                    coffeeGrowerMarketingAgentDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking coffeeGrowerMarketingAgentDetailsList data from the db" + coffeeGrowerMarketingAgentDetailsList.size());
        return coffeeGrowerMarketingAgentDetailsList;
    }

    /* END OF COFFEE GROWER MARKETING AGENT*/

    /* START OF COFFEE EXPORTER DEALER INSPECTION*/
    private static final String KEY_COFFEE_EXPORTER_DEALER_INSPECTION_ID = "coffee_grower_marketing_agent_id";

    private static final String KEY_ARE_OFFICES_IDEAL = "are_offices_ideal";
    private static final String KEY_ARE_OFFICES_IDEAL_REMARKS = "are_offices_ideal_remarks";
    private static final String KEY_IS_COFFEE_DIRECTORATE = "is_coffee_directorate";
    private static final String KEY_IS_COFFEE_DIRECTORATE_REMARKS = "is_coffee_directorate_remarks";
    private static final String KEY_HAS_SINGLE_BUSINESS = "has_single_business";
    private static final String KEY_HAS_SINGLE_BUSINESS_REMARKS = "has_single_business_remarks";
    private static final String KEY_ARE_MARKINGS_CLEAR_PHYSICAL = "are_markings_clear_physical";
    private static final String KEY_ARE_MARKINGS_CLEAR_PHYSICAL_REMARKS = "are_markings_clear_physical_remarks";

    private static final String KEY_HAS_FIRE_FIGHTING = "has_fire_fighting";
    private static final String KEY_HAS_FIRE_FIGHTING_REMARKS = "has_fire_fighting_remarks";
    private static final String KEY_HAS_FIRE_FIGHTING_SERVICED = "has_fire_fighting_serviced";
    private static final String KEY_HAS_FIRE_FIGHTING_SERVICED_REMARKS = "has_fire_fighting_serviced_remarks";
    private static final String KEY_IS_CLEAN_WATER_AVAILABLE = "is_clear_water_available";
    private static final String KEY_IS_CLEAN_WATER_AVAILABLE_REMARKS = "is_clear_water_available_remarks";
    private static final String KEY_IS_GENERAL_HYGIENE = "is_general_hygiene";
    private static final String KEY_IS_GENERAL_HYGIENE_REMARKS = "is_general_hygiene_remarks";
    private static final String KEY_ARE_WASHING_ROOMS = "are_washing_rooms";
    private static final String KEY_ARE_WASHING_ROOMS_REMARKS = "are_washing_rooms_remarks";
    private static final String KEY_IS_CLEAN_WATER_SUPPLIED = "is_clean_water_supplied";
    private static final String KEY_IS_CLEAN_WATER_SUPPLIED_REMARKS = "is_clean_water_supplied_remarks";
    private static final String KEY_IS_ELECTRICITY_SUPPLIED = "is_electricity_supplied";
    private static final String KEY_IS_ELECTRICITY_SUPPLIED_REMARKS = "is_electricity_supplied_remarks";
    private static final String KEY_IS_SAMPLE_ROASTER = "is_sample_roaster";
    private static final String KEY_IS_SAMPLE_ROASTER_REMARKS = "is_sample_roaster_remarks";
    private static final String KEY_IS_SAMPLE_GRINDER = "is_sample_grinder";
    private static final String KEY_IS_SAMPLE_GRINDER_REMARKS = "is_sample_grinder_remarks";
    private static final String KEY_ARE_SPITTING_DRUMS = "are_spitting_drums";
    private static final String KEY_ARE_SPITTING_DRUMS_REMARKS = "are_spitting_drums_remarks";
    private static final String KEY_ARE_TESTING_CUPS = "are_testing_cups";
    private static final String KEY_ARE_TESTING_CUPS_REMARKS = "are_testing_cups_remarks";
    private static final String KEY_IS_SAMPLE_TRAYS = "is_sample_trays";
    private static final String KEY_IS_SAMPLE_TRAYS_REMARKS = "is_sample_trays_remarks";
    private static final String KEY_ARE_SPOONS_IN_PLACE = "are_spoons_in_place";
    private static final String KEY_ARE_SPOONS_IN_PLACE_REMARKS = "are_spoons_in_place_remarks";
    private static final String KEY_IS_WATER_HEATING = "is_water_heating";
    private static final String KEY_IS_WATER_HEATING_REMARKS = "is_water_heating_remarks";
    private static final String KEY_IS_MOISTURE_METER = "is_moisture_meter";
    private static final String KEY_IS_MOISTURE_METER_REMARKS = "is_moisture_meter_remarks";
    private static final String KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY = "is_clean_water_supplied_quality";
    private static final String KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY_REMARKS = "is_clean_water_supplied_quality_remarks";
    private static final String KEY_ARE_WASHING_ROOMS_SATISFACTORY = "are_washing_rooms_satisfactory";
    private static final String KEY_ARE_WASHING_ROOMS_SATISFACTORY_REMARKS = "are_washing_rooms_satisfactory_remarks";
    private static final String KEY_ARE_RETURNS_TO_COFFEE = "are_returns_to_coffee";
    private static final String KEY_ARE_RETURNS_TO_COFFEE_REMARKS = "are_returns_to_coffee_remarks";
    private static final String KEY_IS_LICENSED_LIQUORER = "is_licensed_liquorer";
    private static final String KEY_IS_LICENSED_LIQUORER_REMARKS = "is_licensed_liquorer_remarks";
    private static final String KEY_ARE_ENVIRONMENTAL = "are_environmental";
    private static final String KEY_ARE_ENVIRONMENTAL_REMARKS = "are_environmental_remarks";
    private static final String KEY_IS_VALUE_ADDITION = "is_value_addition";
    private static final String KEY_IS_VALUE_ADDITION_REMARKS = "is_value_addition_remarks";
    private static final String KEY_IS_PACKAGING_QUALITY = "is_packaging_quality";
    private static final String KEY_IS_PACKAGING_QUALITY_REMARKS = "is_packaging_quality_remarks";


    public static final String TABLE_COFFEE_EXPORTER_DEALER_INSPECTION = "coffee_exporter_dealer_inspection";
    public static final String CREATE_TABLE_COFFEE_EXPORTER_DEALER_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COFFEE_EXPORTER_DEALER_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_EXPORTER_DEALER_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT  ,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_APPLICANT_NAME + " TEXT ,"
            + KEY_LICENCE_NUMBER + " TEXT ,"
            + KEY_ARE_MARKINGS_CLEAR + " TEXT ,"
            + KEY_ARE_MARKINGS_CLEAR_REMARKS + " TEXT ,"
            + KEY_ARE_OFFICES_IDEAL + " TEXT ,"
            + KEY_ARE_OFFICES_IDEAL_REMARKS + " TEXT ,"
            + KEY_IS_COFFEE_DIRECTORATE + " TEXT ,"
            + KEY_IS_COFFEE_DIRECTORATE_REMARKS + " TEXT ,"
            + KEY_HAS_SINGLE_BUSINESS + " TEXT ,"
            + KEY_HAS_SINGLE_BUSINESS_REMARKS + " TEXT ,"
            + KEY_ARE_MARKINGS_CLEAR_PHYSICAL + " TEXT ,"
            + KEY_ARE_MARKINGS_CLEAR_PHYSICAL_REMARKS + " TEXT ,"
            + KEY_ARE_WASTE_DISPOSAL_SYSTEMS + " TEXT ,"
            + KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS + " TEXT ,"
            + KEY_HAS_FIRE_FIGHTING + " TEXT ,"
            + KEY_HAS_FIRE_FIGHTING_REMARKS + " TEXT ,"
            + KEY_HAS_FIRE_FIGHTING_SERVICED + " TEXT ,"
            + KEY_HAS_FIRE_FIGHTING_SERVICED_REMARKS + " TEXT ,"
            + KEY_IS_CLEAN_WATER_AVAILABLE + " TEXT ,"
            + KEY_IS_CLEAN_WATER_AVAILABLE_REMARKS + " TEXT ,"
            + KEY_IS_GENERAL_HYGIENE + " TEXT ,"
            + KEY_IS_GENERAL_HYGIENE_REMARKS + " TEXT ,"
            + KEY_ARE_WASHING_ROOMS + " TEXT ,"
            + KEY_ARE_WASHING_ROOMS_REMARKS + " TEXT ,"
            + KEY_IS_CLEAN_WATER_SUPPLIED + " TEXT ,"
            + KEY_IS_CLEAN_WATER_SUPPLIED_REMARKS + " TEXT ,"
            + KEY_IS_ELECTRICITY_SUPPLIED + " TEXT ,"
            + KEY_IS_ELECTRICITY_SUPPLIED_REMARKS + " TEXT ,"
            + KEY_IS_SAMPLE_ROASTER + " TEXT ,"
            + KEY_IS_SAMPLE_ROASTER_REMARKS + " TEXT ,"
            + KEY_IS_SAMPLE_GRINDER + " TEXT ,"
            + KEY_IS_SAMPLE_GRINDER_REMARKS + " TEXT ,"
            + KEY_ARE_SPITTING_DRUMS + " TEXT ,"
            + KEY_ARE_SPITTING_DRUMS_REMARKS + " TEXT ,"
            + KEY_ARE_TESTING_CUPS + " TEXT ,"
            + KEY_ARE_TESTING_CUPS_REMARKS + " TEXT ,"
            + KEY_IS_SAMPLE_TRAYS + " TEXT ,"
            + KEY_IS_SAMPLE_TRAYS_REMARKS + " TEXT ,"
            + KEY_ARE_SPOONS_IN_PLACE + " TEXT ,"
            + KEY_ARE_SPOONS_IN_PLACE_REMARKS + " TEXT ,"
            + KEY_IS_WATER_HEATING + " TEXT ,"
            + KEY_IS_WATER_HEATING_REMARKS + " TEXT ,"
            + KEY_IS_MOISTURE_METER + " TEXT ,"
            + KEY_IS_MOISTURE_METER_REMARKS + " TEXT ,"
            + KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY + " TEXT ,"
            + KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY_REMARKS + " TEXT ,"
            + KEY_ARE_WASHING_ROOMS_SATISFACTORY + " TEXT ,"
            + KEY_ARE_WASHING_ROOMS_SATISFACTORY_REMARKS + " TEXT ,"
            + KEY_ARE_RETURNS_TO_COFFEE + " TEXT ,"
            + KEY_ARE_RETURNS_TO_COFFEE_REMARKS + " TEXT ,"
            + KEY_IS_LICENSED_LIQUORER + " TEXT ,"
            + KEY_IS_LICENSED_LIQUORER_REMARKS + " TEXT ,"
            + KEY_IS_TRACEABILITY_SYSTEM + " TEXT ,"
            + KEY_IS_TRACEABILITY_SYSTEM_REMARKS + " TEXT ,"
            + KEY_ARE_ENVIRONMENTAL + " TEXT ,"
            + KEY_ARE_ENVIRONMENTAL_REMARKS + " TEXT ,"
            + KEY_IS_VALUE_ADDITION + " TEXT ,"
            + KEY_IS_VALUE_ADDITION_REMARKS + " TEXT ,"
            + KEY_IS_PACKAGING_QUALITY + " TEXT ,"
            + KEY_IS_PACKAGING_QUALITY_REMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_DOCUMENT_STATUS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertCoffeeExporterDealerInspection(CoffeeExporterDealerInspectionDetails coffeeExporterDealerInspectionDetails) {

        System.out.println("AFA_CD_DealerChecklist_ID document number:" + coffeeExporterDealerInspectionDetails.getDocumentNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, coffeeExporterDealerInspectionDetails.getLocalID());
        values.put(KEY_COFFEE_EXPORTER_DEALER_INSPECTION_ID, coffeeExporterDealerInspectionDetails.getAFA_CD_DealerChecklist_ID());

        values.put(KEY_DOCUMENT_NUMBER, coffeeExporterDealerInspectionDetails.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, coffeeExporterDealerInspectionDetails.getDocumentDate());

        values.put(KEY_LICENCE_NUMBER, coffeeExporterDealerInspectionDetails.getDealerLicenceNumber());


        values.put(KEY_APPLICANT_NAME, coffeeExporterDealerInspectionDetails.getApplicantName());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCoffeeExporterDealerStored(coffeeExporterDealerInspectionDetails.getAFA_CD_DealerChecklist_ID())) {
            long coffeeExporterDealerInspectionID = db.insertWithOnConflict(TABLE_COFFEE_EXPORTER_DEALER_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("coffeeExporterDealerInspectionID: " + coffeeExporterDealerInspectionID);

            closeDB();
            return coffeeExporterDealerInspectionID;
        } else {
            long coffeeExporterDealerInspectionID = -1;
            System.out.println("coffeeExporterDealerInspectionID: " + coffeeExporterDealerInspectionID);

            closeDB();
            return coffeeExporterDealerInspectionID;
        }

    }

    public void deleteCoffeeExporterDealerInspection() {
        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_EXPORTER_DEALER_INSPECTION;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isCoffeeExporterDealerStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_COFFEE_EXPORTER_DEALER_INSPECTION + " WHERE " + KEY_COFFEE_EXPORTER_DEALER_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCoffeeExporterDealerInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_COFFEE_EXPORTER_DEALER_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long updateCoffeeExporterDealerInspection(CoffeeExporterDealerInspection coffeeExporterDealerInspection) {


        System.out.println("records  to be saved  ID:" + coffeeExporterDealerInspection.getLocalID());

        System.out.println("document_number to be saved:" + coffeeExporterDealerInspection.getDocumentNumber());

        System.out.println("document_date to be saved:" + coffeeExporterDealerInspection.getDocumentDate());

        System.out.println("licence_number to be saved:" + coffeeExporterDealerInspection.getDealerLicenceNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_ARE_MARKINGS_CLEAR, coffeeExporterDealerInspection.getAreMarkingsClear());
            values.put(KEY_ARE_MARKINGS_CLEAR_REMARKS, coffeeExporterDealerInspection.getAreMarkingsClearRemarks());
            values.put(KEY_ARE_OFFICES_IDEAL, coffeeExporterDealerInspection.getAreOfficesPremisesIdeal());
            values.put(KEY_ARE_OFFICES_IDEAL_REMARKS, coffeeExporterDealerInspection.getAreOfficesPremisesIdealRemarks());
            values.put(KEY_IS_COFFEE_DIRECTORATE, coffeeExporterDealerInspection.getIsCoffeeDirectorateLicenceValid());
            values.put(KEY_IS_COFFEE_DIRECTORATE_REMARKS, coffeeExporterDealerInspection.getIsCoffeeDirectorateLicenceValidRemarks());
            values.put(KEY_HAS_SINGLE_BUSINESS, coffeeExporterDealerInspection.getHasSingleBusinessPermit());
            values.put(KEY_HAS_SINGLE_BUSINESS_REMARKS, coffeeExporterDealerInspection.getHasSingleBusinessPermitRemarks());
            values.put(KEY_ARE_MARKINGS_CLEAR_PHYSICAL, coffeeExporterDealerInspection.getAreMarkingsClear2());
            values.put(KEY_ARE_MARKINGS_CLEAR_PHYSICAL_REMARKS, coffeeExporterDealerInspection.getAreMarkingsClear2Remarks());
            values.put(KEY_ARE_WASTE_DISPOSAL_SYSTEMS, coffeeExporterDealerInspection.getAreWasteDisposalSystems());
            values.put(KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS, coffeeExporterDealerInspection.getAreWasteDisposalSystemsRemarks());
            values.put(KEY_HAS_FIRE_FIGHTING, coffeeExporterDealerInspection.getAreFireFightingPlace());
            values.put(KEY_HAS_FIRE_FIGHTING_REMARKS, coffeeExporterDealerInspection.getAreFireFightingPlaceRemarks());
            values.put(KEY_HAS_FIRE_FIGHTING_SERVICED, coffeeExporterDealerInspection.getAreFireFightingServiced());
            values.put(KEY_HAS_FIRE_FIGHTING_SERVICED_REMARKS, coffeeExporterDealerInspection.getAreFireFightingServicedRemakrs());
            values.put(KEY_IS_CLEAN_WATER_AVAILABLE, coffeeExporterDealerInspection.getIsCleanWaterAvailable());
            values.put(KEY_IS_CLEAN_WATER_AVAILABLE_REMARKS, coffeeExporterDealerInspection.getIsCleanWaterAvailableRemarks());
            values.put(KEY_IS_GENERAL_HYGIENE, coffeeExporterDealerInspection.getIsGeneralHygieneSatisfactory());
            values.put(KEY_IS_GENERAL_HYGIENE_REMARKS, coffeeExporterDealerInspection.getIsGeneralHygieneSatisfactoryRemarks());
            values.put(KEY_ARE_WASHING_ROOMS, coffeeExporterDealerInspection.getAreWashingRoomsClean());
            values.put(KEY_ARE_WASHING_ROOMS_REMARKS, coffeeExporterDealerInspection.getAreWashingRoomsCleanRemarks());
            values.put(KEY_IS_CLEAN_WATER_SUPPLIED, coffeeExporterDealerInspection.getIsCleanWaterSupplied());
            values.put(KEY_IS_CLEAN_WATER_SUPPLIED_REMARKS, coffeeExporterDealerInspection.getIsCleanWaterSuppliedRemarks());
            values.put(KEY_IS_ELECTRICITY_SUPPLIED, coffeeExporterDealerInspection.getIsElectricitySupplied());
            values.put(KEY_IS_ELECTRICITY_SUPPLIED_REMARKS, coffeeExporterDealerInspection.getIsElectricitySuppliedRemarks());
            values.put(KEY_IS_SAMPLE_ROASTER, coffeeExporterDealerInspection.getIsSampleRoasterInPlace());
            values.put(KEY_IS_SAMPLE_ROASTER_REMARKS, coffeeExporterDealerInspection.getIsSampleRoasterInPlaceRemarks());
            values.put(KEY_IS_SAMPLE_GRINDER, coffeeExporterDealerInspection.getIsSampleGrinderInPlace());
            values.put(KEY_IS_SAMPLE_GRINDER_REMARKS, coffeeExporterDealerInspection.getIsSampleGrinderInPlaceRemarks());
            values.put(KEY_ARE_SPITTING_DRUMS, coffeeExporterDealerInspection.getAreSpittingDrumsInPlace());
            values.put(KEY_ARE_SPITTING_DRUMS_REMARKS, coffeeExporterDealerInspection.getAreSpittingDrumsInPlaceRemarks());
            values.put(KEY_ARE_TESTING_CUPS, coffeeExporterDealerInspection.getAreTestingCupsInPlace());
            values.put(KEY_ARE_TESTING_CUPS_REMARKS, coffeeExporterDealerInspection.getAreTestingCupsInPlaceRemarks());
            values.put(KEY_IS_SAMPLE_TRAYS, coffeeExporterDealerInspection.getIsSampleTraysInPlace());
            values.put(KEY_IS_SAMPLE_TRAYS_REMARKS, coffeeExporterDealerInspection.getIsSampleTraysInPlaceRemarks());
            values.put(KEY_ARE_SPOONS_IN_PLACE, coffeeExporterDealerInspection.getAreSpoonsInPlace());
            values.put(KEY_ARE_SPOONS_IN_PLACE_REMARKS, coffeeExporterDealerInspection.getAreSpoonsInPlaceRemarks());
            values.put(KEY_IS_WATER_HEATING, coffeeExporterDealerInspection.getIsWaterHeatingSystemInPlace());
            values.put(KEY_IS_WATER_HEATING_REMARKS, coffeeExporterDealerInspection.getIsWaterHeatingSystemInPlaceRemarks());
            values.put(KEY_IS_MOISTURE_METER, coffeeExporterDealerInspection.getIsMoistureMeterInPlace());
            values.put(KEY_IS_MOISTURE_METER_REMARKS, coffeeExporterDealerInspection.getIsMoistureMeterInPlaceRemarks());
            values.put(KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY, coffeeExporterDealerInspection.getGetIsCleanWaterSupplied2());
            values.put(KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY_REMARKS, coffeeExporterDealerInspection.getGetIsCleanWaterSupplied2Remarks());
            values.put(KEY_ARE_WASHING_ROOMS_SATISFACTORY, coffeeExporterDealerInspection.getAreWashingRoomsSatisfactory());
            values.put(KEY_ARE_WASHING_ROOMS_SATISFACTORY_REMARKS, coffeeExporterDealerInspection.getAreWashingRoomsSatisfactoryRemarks());
            values.put(KEY_ARE_RETURNS_TO_COFFEE, coffeeExporterDealerInspection.getAreReturnsToCoffee());
            values.put(KEY_ARE_RETURNS_TO_COFFEE_REMARKS, coffeeExporterDealerInspection.getAreReturnsToCoffeeRemarks());
            values.put(KEY_IS_LICENSED_LIQUORER, coffeeExporterDealerInspection.getIsLicencedLiquorerHired());
            values.put(KEY_IS_LICENSED_LIQUORER_REMARKS, coffeeExporterDealerInspection.getIsLicencedLiquorerHiredRemarks());
            values.put(KEY_IS_TRACEABILITY_SYSTEM, coffeeExporterDealerInspection.getIsTraceabilitySystem());
            values.put(KEY_IS_TRACEABILITY_SYSTEM_REMARKS, coffeeExporterDealerInspection.getIsTraceabilitySystemRemarks());
            values.put(KEY_ARE_ENVIRONMENTAL, coffeeExporterDealerInspection.getAreEnvironmentalEfforts());
            values.put(KEY_ARE_ENVIRONMENTAL_REMARKS, coffeeExporterDealerInspection.getAreEnvironmentalEffortsRemarks());
            values.put(KEY_IS_VALUE_ADDITION, coffeeExporterDealerInspection.getIsValueAddition());
            values.put(KEY_IS_VALUE_ADDITION_REMARKS, coffeeExporterDealerInspection.getIsValueAdditionRemarks());
            values.put(KEY_IS_PACKAGING_QUALITY, coffeeExporterDealerInspection.getIsPackagignQuality());
            values.put(KEY_IS_PACKAGING_QUALITY_REMARKS, coffeeExporterDealerInspection.getIsPackagignQualityRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, coffeeExporterDealerInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, coffeeExporterDealerInspection.getOfficerrecommendation_remark());

            result = db.update(TABLE_COFFEE_EXPORTER_DEALER_INSPECTION, values, "id =" + Integer.parseInt(coffeeExporterDealerInspection.getLocalID()), null);
            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<CoffeeExporterDealerInspectionDetails> getCoffeeExporterDealerInspectionDetailsList() {

        List<CoffeeExporterDealerInspectionDetails> coffeeExporterDealerInspectionDetailsList = new ArrayList<>();
        CoffeeExporterDealerInspectionDetails td = new CoffeeExporterDealerInspectionDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_EXPORTER_DEALER_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking CoffeeExporterDealerInspectionDetails data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeExporterDealerInspectionDetails();
                    td.setAFA_CD_DealerChecklist_ID(c.getString(c.getColumnIndex(KEY_COFFEE_EXPORTER_DEALER_INSPECTION_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setDealerLicenceNumber((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setAreMarkingsClear(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR))));
                    td.setAreMarkingsClearRemarks(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_REMARKS))));
                    td.setAreOfficesPremisesIdeal(c.getString((c.getColumnIndex(KEY_ARE_OFFICES_IDEAL))));
                    td.setAreOfficesPremisesIdealRemarks(c.getString((c.getColumnIndex(KEY_ARE_OFFICES_IDEAL_REMARKS))));
                    td.setIsCoffeeDirectorateLicenceValid(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE))));
                    td.setIsCoffeeDirectorateLicenceValidRemarks(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE_REMARKS))));
                    td.setHasSingleBusinessPermit(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS))));
                    td.setHasSingleBusinessPermitRemarks(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS_REMARKS))));
                    td.setAreMarkingsClear2(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_PHYSICAL))));
                    td.setAreMarkingsClear2Remarks(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_PHYSICAL_REMARKS))));
                    td.setAreWasteDisposalSystems(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS))));
                    td.setAreWasteDisposalSystemsRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS))));
                    td.setAreFireFightingPlace(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING))));
                    td.setAreFireFightingPlaceRemarks(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_REMARKS))));
                    td.setAreFireFightingServiced(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_SERVICED))));
                    td.setAreFireFightingServicedRemakrs(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_SERVICED_REMARKS))));
                    td.setIsCleanWaterAvailable(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_AVAILABLE))));
                    td.setIsCleanWaterAvailableRemarks(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_AVAILABLE_REMARKS))));
                    td.setIsGeneralHygieneSatisfactory(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE))));
                    td.setIsGeneralHygieneSatisfactoryRemarks(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE_REMARKS))));
                    td.setAreWashingRoomsClean(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS))));
                    td.setAreWashingRoomsCleanRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_REMARKS))));
                    td.setIsCleanWaterSupplied(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED))));
                    td.setIsCleanWaterSuppliedRemarks(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED_REMARKS))));
                    td.setIsElectricitySupplied(c.getString((c.getColumnIndex(KEY_IS_ELECTRICITY_SUPPLIED))));
                    td.setIsElectricitySuppliedRemarks(c.getString((c.getColumnIndex(KEY_IS_ELECTRICITY_SUPPLIED_REMARKS))));
                    td.setIsSampleRoasterInPlace(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_ROASTER))));
                    td.setIsSampleRoasterInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_ROASTER_REMARKS))));
                    td.setIsSampleGrinderInPlace(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_GRINDER))));
                    td.setIsSampleGrinderInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_GRINDER_REMARKS))));
                    td.setAreSpittingDrumsInPlace(c.getString((c.getColumnIndex(KEY_ARE_SPITTING_DRUMS))));
                    td.setAreSpittingDrumsInPlaceRemarks(c.getString((c.getColumnIndex(KEY_ARE_SPITTING_DRUMS_REMARKS))));
                    td.setAreTestingCupsInPlace(c.getString((c.getColumnIndex(KEY_ARE_TESTING_CUPS))));
                    td.setAreTestingCupsInPlaceRemarks(c.getString((c.getColumnIndex(KEY_ARE_TESTING_CUPS_REMARKS))));
                    td.setIsSampleTraysInPlace(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_TRAYS))));
                    td.setIsSampleTraysInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_TRAYS_REMARKS))));
                    td.setAreSpoonsInPlace(c.getString((c.getColumnIndex(KEY_ARE_SPOONS_IN_PLACE))));
                    td.setAreSpoonsInPlaceRemarks(c.getString((c.getColumnIndex(KEY_ARE_SPOONS_IN_PLACE_REMARKS))));
                    td.setIsWaterHeatingSystemInPlace(c.getString((c.getColumnIndex(KEY_IS_WATER_HEATING))));
                    td.setIsWaterHeatingSystemInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_WATER_HEATING_REMARKS))));
                    td.setIsMoistureMeterInPlace(c.getString((c.getColumnIndex(KEY_IS_MOISTURE_METER))));
                    td.setIsMoistureMeterInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_MOISTURE_METER_REMARKS))));
                    td.setGetIsCleanWaterSupplied2(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY))));
                    td.setGetIsCleanWaterSupplied2Remarks(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY_REMARKS))));
                    td.setAreWashingRoomsSatisfactory(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_SATISFACTORY))));
                    td.setAreWashingRoomsSatisfactoryRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_SATISFACTORY_REMARKS))));
                    td.setAreReturnsToCoffee(c.getString((c.getColumnIndex(KEY_ARE_RETURNS_TO_COFFEE))));
                    td.setAreReturnsToCoffeeRemarks(c.getString((c.getColumnIndex(KEY_ARE_RETURNS_TO_COFFEE_REMARKS))));
                    td.setIsLicencedLiquorerHired(c.getString((c.getColumnIndex(KEY_IS_LICENSED_LIQUORER))));
                    td.setIsLicencedLiquorerHiredRemarks(c.getString((c.getColumnIndex(KEY_IS_LICENSED_LIQUORER_REMARKS))));
                    td.setIsTraceabilitySystem(c.getString((c.getColumnIndex(KEY_IS_TRACEABILITY_SYSTEM))));
                    td.setIsTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_IS_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setAreEnvironmentalEfforts(c.getString((c.getColumnIndex(KEY_ARE_ENVIRONMENTAL))));
                    td.setAreEnvironmentalEffortsRemarks(c.getString((c.getColumnIndex(KEY_ARE_ENVIRONMENTAL_REMARKS))));
                    td.setIsValueAddition(c.getString((c.getColumnIndex(KEY_IS_VALUE_ADDITION))));
                    td.setIsValueAdditionRemarks(c.getString((c.getColumnIndex(KEY_IS_VALUE_ADDITION_REMARKS))));
                    td.setIsPackagignQuality(c.getString((c.getColumnIndex(KEY_IS_PACKAGING_QUALITY))));
                    td.setIsPackagignQualityRemarks(c.getString((c.getColumnIndex(KEY_IS_PACKAGING_QUALITY_REMARKS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list

                    coffeeExporterDealerInspectionDetailsList.add(td);

                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }

        System.out.println("picking coffeeExporterDealerInspectionDetailsList data from the db" + coffeeExporterDealerInspectionDetailsList.size());
        return coffeeExporterDealerInspectionDetailsList;
    }

    public List<CoffeeExporterDealerInspectionDetails> getCoffeeExporterDealerInspectionDetailsDoneList() {


        List<CoffeeExporterDealerInspectionDetails> coffeeExporterDealerInspectionDetailsList = new ArrayList<>();
        CoffeeExporterDealerInspectionDetails td = new CoffeeExporterDealerInspectionDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_EXPORTER_DEALER_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking CoffeeExporterDealerInspectionDetails data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeExporterDealerInspectionDetails();
                    td.setAFA_CD_DealerChecklist_ID(c.getString(c.getColumnIndex(KEY_COFFEE_EXPORTER_DEALER_INSPECTION_ID)));
                    td.setC_BPartner_ID(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setDealerLicenceNumber((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setApplicantName(c.getString((c.getColumnIndex(KEY_APPLICANT_NAME))));
                    td.setAreMarkingsClear(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR))));
                    td.setAreMarkingsClearRemarks(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_REMARKS))));
                    td.setAreOfficesPremisesIdeal(c.getString((c.getColumnIndex(KEY_ARE_OFFICES_IDEAL))));
                    td.setAreOfficesPremisesIdealRemarks(c.getString((c.getColumnIndex(KEY_ARE_OFFICES_IDEAL_REMARKS))));
                    td.setIsCoffeeDirectorateLicenceValid(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE))));
                    td.setIsCoffeeDirectorateLicenceValidRemarks(c.getString((c.getColumnIndex(KEY_IS_COFFEE_DIRECTORATE_REMARKS))));
                    td.setHasSingleBusinessPermit(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS))));
                    td.setHasSingleBusinessPermitRemarks(c.getString((c.getColumnIndex(KEY_HAS_SINGLE_BUSINESS_REMARKS))));
                    td.setAreMarkingsClear2(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_PHYSICAL))));
                    td.setAreMarkingsClear2Remarks(c.getString((c.getColumnIndex(KEY_ARE_MARKINGS_CLEAR_PHYSICAL_REMARKS))));
                    td.setAreWasteDisposalSystems(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS))));
                    td.setAreWasteDisposalSystemsRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASTE_DISPOSAL_SYSTEMS_REMARKS))));
                    td.setAreFireFightingPlace(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING))));
                    td.setAreFireFightingPlaceRemarks(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_REMARKS))));
                    td.setAreFireFightingServiced(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_SERVICED))));
                    td.setAreFireFightingServicedRemakrs(c.getString((c.getColumnIndex(KEY_HAS_FIRE_FIGHTING_SERVICED_REMARKS))));
                    td.setIsCleanWaterAvailable(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_AVAILABLE))));
                    td.setIsCleanWaterAvailableRemarks(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_AVAILABLE_REMARKS))));
                    td.setIsGeneralHygieneSatisfactory(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE))));
                    td.setIsGeneralHygieneSatisfactoryRemarks(c.getString((c.getColumnIndex(KEY_IS_GENERAL_HYGIENE_REMARKS))));
                    td.setAreWashingRoomsClean(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS))));
                    td.setAreWashingRoomsCleanRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_REMARKS))));
                    td.setIsCleanWaterSupplied(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED))));
                    td.setIsCleanWaterSuppliedRemarks(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED_REMARKS))));
                    td.setIsElectricitySupplied(c.getString((c.getColumnIndex(KEY_IS_ELECTRICITY_SUPPLIED))));
                    td.setIsElectricitySuppliedRemarks(c.getString((c.getColumnIndex(KEY_IS_ELECTRICITY_SUPPLIED_REMARKS))));
                    td.setIsSampleRoasterInPlace(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_ROASTER))));
                    td.setIsSampleRoasterInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_ROASTER_REMARKS))));
                    td.setIsSampleGrinderInPlace(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_GRINDER))));
                    td.setIsSampleGrinderInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_GRINDER_REMARKS))));
                    td.setAreSpittingDrumsInPlace(c.getString((c.getColumnIndex(KEY_ARE_SPITTING_DRUMS))));
                    td.setAreSpittingDrumsInPlaceRemarks(c.getString((c.getColumnIndex(KEY_ARE_SPITTING_DRUMS_REMARKS))));
                    td.setAreTestingCupsInPlace(c.getString((c.getColumnIndex(KEY_ARE_TESTING_CUPS))));
                    td.setAreTestingCupsInPlaceRemarks(c.getString((c.getColumnIndex(KEY_ARE_TESTING_CUPS_REMARKS))));
                    td.setIsSampleTraysInPlace(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_TRAYS))));
                    td.setIsSampleTraysInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_SAMPLE_TRAYS_REMARKS))));
                    td.setAreSpoonsInPlace(c.getString((c.getColumnIndex(KEY_ARE_SPOONS_IN_PLACE))));
                    td.setAreSpoonsInPlaceRemarks(c.getString((c.getColumnIndex(KEY_ARE_SPOONS_IN_PLACE_REMARKS))));
                    td.setIsWaterHeatingSystemInPlace(c.getString((c.getColumnIndex(KEY_IS_WATER_HEATING))));
                    td.setIsWaterHeatingSystemInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_WATER_HEATING_REMARKS))));
                    td.setIsMoistureMeterInPlace(c.getString((c.getColumnIndex(KEY_IS_MOISTURE_METER))));
                    td.setIsMoistureMeterInPlaceRemarks(c.getString((c.getColumnIndex(KEY_IS_MOISTURE_METER_REMARKS))));
                    td.setGetIsCleanWaterSupplied2(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY))));
                    td.setGetIsCleanWaterSupplied2Remarks(c.getString((c.getColumnIndex(KEY_IS_CLEAN_WATER_SUPPLIED_QUALITY_REMARKS))));
                    td.setAreWashingRoomsSatisfactory(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_SATISFACTORY))));
                    td.setAreWashingRoomsSatisfactoryRemarks(c.getString((c.getColumnIndex(KEY_ARE_WASHING_ROOMS_SATISFACTORY_REMARKS))));
                    td.setAreReturnsToCoffee(c.getString((c.getColumnIndex(KEY_ARE_RETURNS_TO_COFFEE))));
                    td.setAreReturnsToCoffeeRemarks(c.getString((c.getColumnIndex(KEY_ARE_RETURNS_TO_COFFEE_REMARKS))));
                    td.setIsLicencedLiquorerHired(c.getString((c.getColumnIndex(KEY_IS_LICENSED_LIQUORER))));
                    td.setIsLicencedLiquorerHiredRemarks(c.getString((c.getColumnIndex(KEY_IS_LICENSED_LIQUORER_REMARKS))));
                    td.setIsTraceabilitySystem(c.getString((c.getColumnIndex(KEY_IS_TRACEABILITY_SYSTEM))));
                    td.setIsTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_IS_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setAreEnvironmentalEfforts(c.getString((c.getColumnIndex(KEY_ARE_ENVIRONMENTAL))));
                    td.setAreEnvironmentalEffortsRemarks(c.getString((c.getColumnIndex(KEY_ARE_ENVIRONMENTAL_REMARKS))));
                    td.setIsValueAddition(c.getString((c.getColumnIndex(KEY_IS_VALUE_ADDITION))));
                    td.setIsValueAdditionRemarks(c.getString((c.getColumnIndex(KEY_IS_VALUE_ADDITION_REMARKS))));
                    td.setIsPackagignQuality(c.getString((c.getColumnIndex(KEY_IS_PACKAGING_QUALITY))));
                    td.setIsPackagignQualityRemarks(c.getString((c.getColumnIndex(KEY_IS_PACKAGING_QUALITY_REMARKS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    // adding to itinerary list

                    coffeeExporterDealerInspectionDetailsList.add(td);

                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }

        System.out.println("picking coffeeExporterDealerInspectionDetailsList data from the db" + coffeeExporterDealerInspectionDetailsList.size());
        return coffeeExporterDealerInspectionDetailsList;
    }

    /* END OF COFFEE EXPORTER DEALER AGENT*/

    /*TABLE TEAPACKER CHECKLIST */
    private static final String KEY_LICENCE_NO = "Licence_no";
    private static final String KEY_AFA_TD_INSPECTION_CHECKLIST_ID = "afa_td_inspection_checklist_id";
    private static final String KEY_TEST_INSPECTION_DONE = "inspection_done";
    private static final String KEY_ISCERTIFICATEOFCOMPANYREG = "iscertificateofcompanyreg";
    private static final String KEY_CERTIFICATEOFCOMPANYREGmarks = "certificateofcompanyregmarks";
    private static final String KEY_CERTIFICATEOFCOMPANYREGremarks = "certificateofcompanyregremarks";
    private static final String KEY_ISBUSINESSPERMIT = "isbusinesspermit";
    private static final String KEY_BUSINESSPERMITmarks = "businesspermitmarks";
    private static final String KEY_BUSINESSPERMITremarks = "businesspermitremarks";
    private static final String KEY_ISHEALTHCERTIFICATE = "ishealthcertificate";
    private static final String KEY_HEALTHCERTIFICATEmarks = "healthcertificatemarks";
    private static final String KEY_HEALTHCERTIFICATEremarks = "healthcertificateremarks";
    private static final String KEY_ISEXTERNALSITES = "isexternalsitestds";
    private static final String KEY_EXTERNALSITESmarks = "externalsitestdsmarks";
    private static final String KEY_EXTERNALSITESremarks = "externalsitestdsremarks";
    private static final String KEY_ISSECURITYACCESS = "issecurityaccess";
    private static final String KEY_SECURITYACCESSmarks = "securityaccessmarks";
    private static final String KEY_SECURITYACCESSremarks = "securityaccessremarks";
    private static final String KEY_ISLAYOUTCALIBRATION = "islayout_CALIBRATION";
    private static final String KEY_LAYOUTCALIBRATIONmarks = "layout_CALIBRATIONmarks";
    private static final String KEY_LAYOUTCALIBRATIONremarks = "layout_CALIBRATIONremarks";
    private static final String KEY_ISWALLS = "iswalls";
    private static final String KEY_WALLSmarks = "wallmarks";
    private static final String KEY_WALLSremarks = "wallremarks";
    private static final String KEY_ISFLOORS = "isfloors";
    private static final String KEY_FLOORSmarks = "floormarks";
    private static final String KEY_FLOORSremarks = "floorremarks";
    private static final String KEY_ISROOFCEILING = "isroof_ceiling";
    private static final String KEY_ROOFCEILINGmarks = "roof_ceiling_marks";
    private static final String KEY_ROOFCEILINGremarks = "roof_ceilingmarks_remarks";
    private static final String KEY_ISWINDOWS = "iswindows";
    private static final String KEY_WINDOWSmarks = "windowmarks";
    private static final String KEY_WINDOWSremarks = "windowremarks";
    private static final String KEY_ISDOORS = "isdoors";
    private static final String KEY_DOORSmarks = "doormarks";
    private static final String KEY_DOORSremarks = "doorremarks";
    private static final String KEY_ISADEQUATELIGHTING = "isadequatelighting";
    private static final String KEY_ADEQUATELIGHTINGmarks = "adequatelightmarks";
    private static final String KEY_ADEQUATELIGHTINGremarks = "adequatelightremarks";
    private static final String KEY_ISVENTILLATION = "isventilation";
    private static final String KEY_VENTILLATIONmarks = "ventillationmarks";
    private static final String KEY_VENTILLATIONremarks = "ventillationremarks";
    private static final String KEY_ISEQUIPMENTCLEANLINESS = "isequipmentcleaniness";
    private static final String KEY_EQUIPMENTCLEANLINESSmarks = "equipmentcleanmarks";
    private static final String KEY_EQUIPMENTCLEANLINESSremarks = "equipmentcleanremarks";
    private static final String KEY_ISCHANGEROOM = "ischangeroom";
    private static final String KEY_CHANGEROOMmarks = "changeroommarks";
    private static final String KEY_CHANGEROOMremarks = "changeroomremarks";
    private static final String KEY_ISRISKOFCHEMS = "isriskofchems";
    private static final String KEY_RISKOFCHEMSmarks = "riskofchemsmarks";
    private static final String KEY_RISKOFCHEMSremarks = "riskofchemsremarks";
    private static final String KEY_ISWASTEDISPOSAL = "iswastedisposal";
    private static final String KEY_WASTEDISPOSALmarks = "wastediposalmarks";
    private static final String KEY_WASTEDISPOSALremarks = "wastedisposalremarks";
    private static final String KEY_ISPESTCONTROL = "ispestcontrol";
    private static final String KEY_PESTCONTROLmarks = "pestcontrolmarks";
    private static final String KEY_PESTCONTROLremarks = "pestcontrolremaks";
    private static final String KEY_ISPROPERSTORAGE = "ispropersttorage";
    private static final String KEY_PROPERSTORAGEmarks = "properstoragemarks";
    private static final String KEY_PROPERSTORAGEremarks = "properstorageremarks";
    private static final String KEY_ISPACKINGCONFORMITY = "ispackconformity";
    private static final String KEY_PACKINGCONFORMITYmarks = "packconformitymarks";
    private static final String KEY_PACKINGCONFORMITYremarks = "packconformityremarks";

    private static final String KEY_ISIDENTITYSEGREGATION = "isidentitySegregation";
    private static final String KEY_IDENTITYSEGREGATIONmarks = "identitySegregationmarks";
    private static final String KEY_IDENTITYSEGREGATIONremarks = "identitySegregationremarks";

    private static final String KEY_ISIDENTITYCALIBRATION = "isidentityCALIBRATION";
    private static final String KEY_IDENTITYCALIBRATIONmarks = "identityCALIBRATIONmarks";
    private static final String KEY_IDENTITYCALIBRATIONremarks = "identityCALIBRATIONremarks";

    private static final String KEY_ISTRACEABILITYSYSTEM = "istracesystem";
    private static final String KEY_TRACEABILITYSYSTEMmarks = "tracesystemmarks";
    private static final String KEY_TRACEABILITYSYSTEMremarks = "tracesystemremarks";
    private static final String KEY_ISPROCESSDOCUMENTS = "isprocessdocuments";
    private static final String KEY_PROCESSDOCUMENTSmarks = "processdocmarks";
    private static final String KEY_PROCESSDOCUMENTSremarks = "processdocremarks";
    private static final String KEY_ISVALIDMEDCERTIFICATE = "ismedicalcert";
    private static final String KEY_VALIDMEDCERTIFICATEmarks = "medicalcertmarks";
    private static final String KEY_VALIDMEDCERTIFICATEremarks = "medicalertremarks";
    private static final String KEY_ISPROTECTIVEEQUIPMENTS = "isprotectiveequips";
    private static final String KEY_PROTECTIVEEQUIPMENTSmarks = "protectiveequipmarks";
    private static final String KEY_PROTECTIVEEQUIPMENTSremarks = "protectiveequipremarks";

    //create table teapacker
    //Create statement query for table afa_td_teapackerinsp_cklst
    public static final String CREATE_TABLE_AFA_TD_TEAPACKERINSPCKLST = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_AFA_TD_TEAPACKERINSPCKLST + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_AFA_TD_INSPECTION_CHECKLIST_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_LICENCE_NO + " TEXT,"
            + KEY_TEST_INSPECTION_DONE + " TEXT,"
            + KEY_ISCERTIFICATEOFCOMPANYREG + " TEXT,"
            + KEY_CERTIFICATEOFCOMPANYREGmarks + " TEXT ,"
            + KEY_CERTIFICATEOFCOMPANYREGremarks + " TEXT ,"
            + KEY_ISBUSINESSPERMIT + " TEXT,"
            + KEY_BUSINESSPERMITmarks + " TEXT,"
            + KEY_BUSINESSPERMITremarks + " TEXT,"
            + KEY_ISHEALTHCERTIFICATE + " TEXT,"
            + KEY_HEALTHCERTIFICATEmarks + " TEXT,"
            + KEY_HEALTHCERTIFICATEremarks + " TEXT,"
            + KEY_ISEXTERNALSITES + " TEXT ,"
            + KEY_EXTERNALSITESmarks + " TEXT ,"
            + KEY_EXTERNALSITESremarks + " TEXT ,"
            + KEY_ISSECURITYACCESS + " TEXT,"
            + KEY_SECURITYACCESSmarks + " TEXT,"
            + KEY_SECURITYACCESSremarks + " TEXT,"
            + KEY_ISLAYOUTCALIBRATION + " TEXT,"
            + KEY_LAYOUTCALIBRATIONmarks + " TEXT,"
            + KEY_LAYOUTCALIBRATIONremarks + " TEXT ,"
            + KEY_ISWALLS + " TEXT ,"
            + KEY_WALLSmarks + " TEXT,"
            + KEY_WALLSremarks + " TEXT,"
            + KEY_ISFLOORS + " TEXT,"
            + KEY_FLOORSmarks + " TEXT,"
            + KEY_FLOORSremarks + " TEXT,"
            + KEY_ISROOFCEILING + " TEXT,"
            + KEY_ROOFCEILINGmarks + " TEXT,"
            + KEY_ROOFCEILINGremarks + " TEXT,"
            + KEY_ISWINDOWS + " TEXT,"
            + KEY_WINDOWSmarks + " TEXT,"
            + KEY_WINDOWSremarks + " TEXT ,"
            + KEY_ISDOORS + " TEXT ,"
            + KEY_DOORSmarks + " TEXT ,"
            + KEY_DOORSremarks + " TEXT ,"
            + KEY_ISADEQUATELIGHTING + " TEXT ,"
            + KEY_ADEQUATELIGHTINGmarks + " TEXT,"
            + KEY_ADEQUATELIGHTINGremarks + " TEXT,"
            + KEY_ISVENTILLATION + " TEXT,"
            + KEY_VENTILLATIONmarks + " TEXT,"
            + KEY_VENTILLATIONremarks + " TEXT ,"
            + KEY_ISEQUIPMENTCLEANLINESS + " TEXT ,"
            + KEY_EQUIPMENTCLEANLINESSmarks + " TEXT ,"
            + KEY_EQUIPMENTCLEANLINESSremarks + " TEXT ,"
            + KEY_ISCHANGEROOM + " TEXT,"
            + KEY_CHANGEROOMmarks + " TEXT,"
            + KEY_CHANGEROOMremarks + " TEXT,"
            + KEY_ISRISKOFCHEMS + " TEXT ,"
            + KEY_RISKOFCHEMSmarks + " TEXT,"
            + KEY_RISKOFCHEMSremarks + " TEXT,"
            + KEY_ISWASTEDISPOSAL + " TEXT,"
            + KEY_WASTEDISPOSALmarks + " TEXT,"
            + KEY_WASTEDISPOSALremarks + " TEXT,"
            + KEY_ISPESTCONTROL + " TEXT,"
            + KEY_PESTCONTROLmarks + " TEXT ,"
            + KEY_PESTCONTROLremarks + " TEXT ,"
            + KEY_ISPROPERSTORAGE + " TEXT ,"
            + KEY_PROPERSTORAGEmarks + " TEXT ,"
            + KEY_PROPERSTORAGEremarks + " TEXT,"
            + KEY_ISPACKINGCONFORMITY + " TEXT,"
            + KEY_PACKINGCONFORMITYmarks + " TEXT,"
            + KEY_PACKINGCONFORMITYremarks + " TEXT,"
            + KEY_ISIDENTITYSEGREGATION + " TEXT,"
            + KEY_IDENTITYSEGREGATIONmarks + " TEXT,"
            + KEY_IDENTITYSEGREGATIONremarks + " TEXT ,"
            + KEY_ISIDENTITYCALIBRATION + " TEXT,"
            + KEY_IDENTITYCALIBRATIONmarks + " TEXT,"
            + KEY_IDENTITYCALIBRATIONremarks + " TEXT ,"
            + KEY_ISTRACEABILITYSYSTEM + " TEXT,"
            + KEY_TRACEABILITYSYSTEMmarks + " TEXT,"
            + KEY_TRACEABILITYSYSTEMremarks + " TEXT,"
            + KEY_ISPROCESSDOCUMENTS + " TEXT,"
            + KEY_PROCESSDOCUMENTSmarks + " TEXT,"
            + KEY_PROCESSDOCUMENTSremarks + " TEXT,"
            + KEY_ISVALIDMEDCERTIFICATE + " TEXT,"
            + KEY_VALIDMEDCERTIFICATEmarks + " TEXT ,"
            + KEY_VALIDMEDCERTIFICATEremarks + " TEXT ,"
            + KEY_ISPROTECTIVEEQUIPMENTS + " TEXT ,"
            + KEY_PROTECTIVEEQUIPMENTSmarks + " TEXT ,"
            + KEY_PROTECTIVEEQUIPMENTSremarks + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertTeaPackerRecord(TeaPackerChecklist teaPackerChecklist) {
        System.out.println("AFA_td_teapacker_id:" + teaPackerChecklist.getAFA_TD_Inspection_Checklist_ID());

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        values.put(KEY_ID, teaPackerChecklist.getLocalID());
        values.put(KEY_AFA_TD_INSPECTION_CHECKLIST_ID, teaPackerChecklist.getAFA_TD_Inspection_Checklist_ID());

        values.put(KEY_DOCUMENT_NUMBER, teaPackerChecklist.getDocumentNo());

        values.put(KEY_DOCUMENT_DATE, teaPackerChecklist.getDocumentDate());

        values.put(KEY_NAME_OF_APPLICANT, teaPackerChecklist.getApplicantName());

        values.put(KEY_LICENCE_NO, teaPackerChecklist.getLicenceNo());

        values.put(KEY_TEST_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isTeapackertored(teaPackerChecklist.getAFA_TD_Inspection_Checklist_ID())) {
            long teapackerID = db.insertWithOnConflict(TABLE_AFA_TD_TEAPACKERINSPCKLST, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("teapackerID" + teapackerID);
            //closeDB();
            closeDB();
            return teapackerID;
        } else {
            long teapackerID = -1;
            System.out.println("teapackerID" + teapackerID);
            //closeDB();
            closeDB();
            return teapackerID;
        }

    }

    public boolean isTeapackertored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_AFA_TD_TEAPACKERINSPCKLST + " WHERE " + KEY_AFA_TD_INSPECTION_CHECKLIST_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long updateTeapackerChecklist(TeaPacker teaPacker) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        int result = 0;
        try {
            values.put(KEY_TEST_INSPECTION_DONE, "Y");
            values.put(KEY_ISCERTIFICATEOFCOMPANYREG, teaPacker.getIsCertCompanyReg());
            values.put(KEY_CERTIFICATEOFCOMPANYREGmarks, teaPacker.getCompanyRegMandatory10mks());
            values.put(KEY_CERTIFICATEOFCOMPANYREGremarks, teaPacker.getCompanyRegRemarks());
            values.put(KEY_ISBUSINESSPERMIT, teaPacker.getIsBusinessPermit());
            values.put(KEY_BUSINESSPERMITmarks, teaPacker.getBusinessPermitMust3mks());
            values.put(KEY_BUSINESSPERMITremarks, teaPacker.getBusinessPermitRemarks());
            values.put(KEY_ISHEALTHCERTIFICATE, teaPacker.getIsHealthCertificate());
            values.put(KEY_HEALTHCERTIFICATEmarks, teaPacker.getHealthCertificateMandatory10mks());
            values.put(KEY_HEALTHCERTIFICATEremarks, teaPacker.getHealthCertificateRemarks());
            values.put(KEY_ISEXTERNALSITES, teaPacker.getIsExternalSiteStandards());
            values.put(KEY_EXTERNALSITESmarks, teaPacker.getExternalSiteStandardsMandatory10mks());
            values.put(KEY_EXTERNALSITESremarks, teaPacker.getExternalSiteStandardsRemarks());
            values.put(KEY_ISSECURITYACCESS, teaPacker.getIsSecurityAccess());
            values.put(KEY_SECURITYACCESSmarks, teaPacker.getSecurityAccessReccomm());
            values.put(KEY_SECURITYACCESSremarks, teaPacker.getSecurityAccessRemarks());
            values.put(KEY_ISLAYOUTCALIBRATION, teaPacker.getIsLayoutCALIBRATION());
            values.put(KEY_LAYOUTCALIBRATIONmarks, teaPacker.getLayoutCALIBRATIONMust2mks());
            values.put(KEY_LAYOUTCALIBRATIONremarks, teaPacker.getLayoutCALIBRATIONRemarks());
            values.put(KEY_ISWALLS, teaPacker.getIsWalls());
            values.put(KEY_WALLSmarks, teaPacker.getWallsMust3mks());
            values.put(KEY_WALLSremarks, teaPacker.getWallsRemarks());
            values.put(KEY_ISFLOORS, teaPacker.getIsFloors());
            values.put(KEY_FLOORSmarks, teaPacker.getFloorsMust3mks());
            values.put(KEY_FLOORSremarks, teaPacker.getFloorsRemarks());
            values.put(KEY_ISROOFCEILING, teaPacker.getIsRoofCeiling());
            values.put(KEY_ROOFCEILINGmarks, teaPacker.getRoofCeilingMust3mks());
            values.put(KEY_ROOFCEILINGremarks, teaPacker.getRoofCeilingRemarks());
            values.put(KEY_ISWINDOWS, teaPacker.getIsWindows());
            values.put(KEY_WINDOWSmarks, teaPacker.getWindowsRecom1mk());
            values.put(KEY_WINDOWSremarks, teaPacker.getWindowsRemarks());
            values.put(KEY_ISDOORS, teaPacker.getIsDoors());
            values.put(KEY_DOORSmarks, teaPacker.getDoorsRecom1mk());
            values.put(KEY_DOORSremarks, teaPacker.getDoorsRemarks());
            values.put(KEY_ISADEQUATELIGHTING, teaPacker.getIsAdequatelighting());
            values.put(KEY_ADEQUATELIGHTINGmarks, teaPacker.getAdequateLightingMust3mks());
            values.put(KEY_ADEQUATELIGHTINGremarks, teaPacker.getAdequateLightingRemarks());
            values.put(KEY_ISVENTILLATION, teaPacker.getIsVentilation());
            values.put(KEY_VENTILLATIONmarks, teaPacker.getVentilationRecom1mks());
            values.put(KEY_VENTILLATIONremarks, teaPacker.getVentilationRemarks());
            values.put(KEY_ISEQUIPMENTCLEANLINESS, teaPacker.getIsEquipmentCleanliness());
            values.put(KEY_EQUIPMENTCLEANLINESSmarks, teaPacker.getEquipmentCleanlinessMust3mks());
            values.put(KEY_EQUIPMENTCLEANLINESSremarks, teaPacker.getEquipmentCleanlinessRemarks());
            values.put(KEY_ISCHANGEROOM, teaPacker.getIsChangingrooms());
            values.put(KEY_CHANGEROOMmarks, teaPacker.getChangingroomsMust3mks());
            values.put(KEY_CHANGEROOMremarks, teaPacker.getChangingroomsRemarks());
            values.put(KEY_ISRISKOFCHEMS, teaPacker.getIsRiskOfChemical());
            values.put(KEY_RISKOFCHEMSmarks, teaPacker.getRiskOfChemicalMust3mks());
            values.put(KEY_RISKOFCHEMSremarks, teaPacker.getRiskOfChemicalRemarks());
            values.put(KEY_ISWASTEDISPOSAL, teaPacker.getIsWasteTeaDisposal());
            values.put(KEY_WASTEDISPOSALmarks, teaPacker.getWasteTeaDisposalMust3mks());
            values.put(KEY_WASTEDISPOSALremarks, teaPacker.getWasteTeaDisposalRemarks());
            values.put(KEY_ISPESTCONTROL, teaPacker.getIsPestControlProgram());
            values.put(KEY_PESTCONTROLmarks, teaPacker.getPestControlProgramMust3mks());
            values.put(KEY_PESTCONTROLremarks, teaPacker.getPestControlProgramRemarks());
            values.put(KEY_ISPROPERSTORAGE, teaPacker.getIsProperStorage());
            values.put(KEY_PROPERSTORAGEmarks, teaPacker.getProperStorageRecom1mk());
            values.put(KEY_PROPERSTORAGEremarks, teaPacker.getProperStorageRemarks());
            values.put(KEY_ISPACKINGCONFORMITY, teaPacker.getIsPackagingMaterialConfirmity());
            values.put(KEY_PACKINGCONFORMITYmarks, teaPacker.getPackagingMaterialConfirmityMust2mks());
            values.put(KEY_PACKINGCONFORMITYremarks, teaPacker.getPackagingMaterialConfirmityRemarks());
            values.put(KEY_ISIDENTITYSEGREGATION, teaPacker.getIsIdentificationAndSegregation());
            values.put(KEY_IDENTITYSEGREGATIONmarks, teaPacker.getIdentificationAndSegregationMust2mks());
            values.put(KEY_IDENTITYSEGREGATIONremarks, teaPacker.getIdentificationAndSegregationRemarks());
            values.put(KEY_ISIDENTITYCALIBRATION, teaPacker.getIsEquipmentIdentificationAndCalibration());
            values.put(KEY_IDENTITYCALIBRATIONmarks, teaPacker.getEquipmentIdentificationAndCalibrationMust3mks());
            values.put(KEY_IDENTITYCALIBRATIONremarks, teaPacker.getEquipmentIdentificationAndCalibrationRemarks());
            values.put(KEY_ISTRACEABILITYSYSTEM, teaPacker.getIsTraceabilitySystem());
            values.put(KEY_TRACEABILITYSYSTEMmarks, teaPacker.getTraceabilitySystemMandatory10mks());
            values.put(KEY_TRACEABILITYSYSTEMremarks, teaPacker.getTraceabilitySystemRemarks());
            values.put(KEY_ISPROCESSDOCUMENTS, teaPacker.getIsProcessDocuments());
            values.put(KEY_PROCESSDOCUMENTSmarks, teaPacker.getProcessDocumentsMust3mks());
            values.put(KEY_PROCESSDOCUMENTSremarks, teaPacker.getProcessDocumentsRemarks());
            values.put(KEY_ISVALIDMEDCERTIFICATE, teaPacker.getIsValidMedicalCert());
            values.put(KEY_VALIDMEDCERTIFICATEmarks, teaPacker.getValidMedicalCertMandatory10mks());
            values.put(KEY_VALIDMEDCERTIFICATEremarks, teaPacker.getValidMedicalCertRemarks());
            values.put(KEY_ISPROTECTIVEEQUIPMENTS, teaPacker.getIsCleanPersonalProtective());
            values.put(KEY_PROTECTIVEEQUIPMENTSmarks, teaPacker.getCleanPersonalProtectiveMndatory10mks());
            values.put(KEY_PROTECTIVEEQUIPMENTSremarks, teaPacker.getCleanPersonalProtectiveRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, teaPacker.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, teaPacker.getOfficerrecommendation_remark());

            result = db.update(TABLE_AFA_TD_TEAPACKERINSPCKLST, values, "id =" + Integer.parseInt(teaPacker.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<TeaPackerChecklist> getTeaPackerChecklistList() {

        List<TeaPackerChecklist> teaPackerChecklistList = new ArrayList<TeaPackerChecklist>();
        TeaPackerChecklist td = new TeaPackerChecklist();

        String selectQuery = "SELECT  * FROM " + TABLE_AFA_TD_TEAPACKERINSPCKLST + " where " + KEY_TEST_INSPECTION_DONE + " =" + "'N'";

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        System.out.println("====================Picking Tea packer data from the database=================" + c.getCount());
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new TeaPackerChecklist();
                    td.setAFA_TD_Inspection_Checklist_ID(c.getString(c.getColumnIndex(KEY_AFA_TD_INSPECTION_CHECKLIST_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentNo(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setLicenceNo((c.getString((c.getColumnIndex(KEY_LICENCE_NO)))));
                    td.setApplicantName((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    // adding to itinerary list
                    teaPackerChecklistList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking teapacker data from the db" + teaPackerChecklistList.size());
        return teaPackerChecklistList;
    }


    public List<TeaPackerChecklist> getTeaPackerChecklistDone() {
        List<TeaPackerChecklist> teaPackerChecklist = new ArrayList<TeaPackerChecklist>();
        TeaPackerChecklist td = new TeaPackerChecklist();

        String selectQuery = "SELECT  * FROM " + TABLE_AFA_TD_TEAPACKERINSPCKLST + " where " + KEY_TEST_INSPECTION_DONE + " =" + "'Y'" +
                " AND " + KEY_UPLOADED + " = 'PENDING'";

        // String selectQuery = "SELECT  * FROM " + TABLE_AFA_TD_TEAPACKERINSPCKLST;

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new TeaPackerChecklist();
                    td.setAFA_TD_Inspection_Checklist_ID(c.getString(c.getColumnIndex(KEY_AFA_TD_INSPECTION_CHECKLIST_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDocumentNo((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setApplicantName((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setLicenceNo((c.getString((c.getColumnIndex(KEY_LICENCE_NO)))));
                    td.setApplicantName((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setIsCertCompanyReg(c.getString((c.getColumnIndex(KEY_ISCERTIFICATEOFCOMPANYREG))));
                    td.setCompanyRegMandatory10mks(c.getString((c.getColumnIndex(KEY_CERTIFICATEOFCOMPANYREGmarks))));
                    td.setCompanyRegRemarks(c.getString((c.getColumnIndex(KEY_CERTIFICATEOFCOMPANYREGremarks))));
                    td.setIsBusinessPermit(c.getString((c.getColumnIndex(KEY_ISBUSINESSPERMIT))));
                    td.setBusinessPermitMust3mks(c.getString((c.getColumnIndex(KEY_BUSINESSPERMITmarks))));
                    td.setBusinessPermitRemarks(c.getString((c.getColumnIndex(KEY_BUSINESSPERMITremarks))));
                    td.setIsHealthCertificate(c.getString((c.getColumnIndex(KEY_ISHEALTHCERTIFICATE))));
                    td.setHealthCertificateMandatory10mks(c.getString((c.getColumnIndex(KEY_HEALTHCERTIFICATEmarks))));
                    td.setHealthCertificateRemarks(c.getString((c.getColumnIndex(KEY_HEALTHCERTIFICATEremarks))));
                    td.setIsExternalSiteStandards(c.getString((c.getColumnIndex(KEY_ISEXTERNALSITES))));
                    td.setExternalSiteStandardsMandatory10mks(c.getString((c.getColumnIndex(KEY_EXTERNALSITESmarks))));
                    td.setExternalSiteStandardsRemarks(c.getString((c.getColumnIndex(KEY_EXTERNALSITESremarks))));
                    td.setIsSecurityAccess(c.getString((c.getColumnIndex(KEY_ISSECURITYACCESS))));
                    td.setSecurityAccessReccomm(c.getString((c.getColumnIndex(KEY_SECURITYACCESSmarks))));
                    td.setSecurityAccessRemarks(c.getString((c.getColumnIndex(KEY_SECURITYACCESSremarks))));
                    td.setIsLayoutCALIBRATION(c.getString((c.getColumnIndex(KEY_ISLAYOUTCALIBRATION))));
                    td.setLayoutCALIBRATIONMust2mks(c.getString((c.getColumnIndex(KEY_LAYOUTCALIBRATIONmarks))));
                    td.setLayoutCALIBRATIONRemarks(c.getString((c.getColumnIndex(KEY_LAYOUTCALIBRATIONremarks))));
                    td.setIsWalls(c.getString((c.getColumnIndex(KEY_ISWALLS))));
                    td.setWallsMust3mks(c.getString((c.getColumnIndex(KEY_WALLSmarks))));
                    td.setWallsRemarks(c.getString((c.getColumnIndex(KEY_WALLSremarks))));
                    td.setIsFloors(c.getString((c.getColumnIndex(KEY_ISFLOORS))));
                    td.setFloorsMust3mks(c.getString((c.getColumnIndex(KEY_FLOORSmarks))));
                    td.setFloorsRemarks(c.getString((c.getColumnIndex(KEY_FLOORSremarks))));

                    td.setIsRoofCeiling(c.getString((c.getColumnIndex(KEY_ISROOFCEILING))));
                    td.setRoofCeilingMust3mks(c.getString((c.getColumnIndex(KEY_ROOFCEILINGmarks))));
                    td.setRoofCeilingRemarks(c.getString((c.getColumnIndex(KEY_ROOFCEILINGremarks))));
                    td.setIsWindows(c.getString((c.getColumnIndex(KEY_ISWINDOWS))));
                    td.setWindowsRecom1mk(c.getString((c.getColumnIndex(KEY_WINDOWSmarks))));
                    td.setWindowsRemarks(c.getString((c.getColumnIndex(KEY_WINDOWSremarks))));
                    td.setIsDoors(c.getString((c.getColumnIndex(KEY_ISDOORS))));
                    td.setDoorsRecom1mk(c.getString((c.getColumnIndex(KEY_DOORSmarks))));
                    td.setDoorsRemarks(c.getString((c.getColumnIndex(KEY_DOORSremarks))));
                    td.setIsAdequatelighting(c.getString((c.getColumnIndex(KEY_ISADEQUATELIGHTING))));
                    td.setAdequateLightingMust3mks(c.getString((c.getColumnIndex(KEY_ADEQUATELIGHTINGmarks))));
                    td.setAdequateLightingRemarks(c.getString((c.getColumnIndex(KEY_ADEQUATELIGHTINGremarks))));
                    td.setIsVentilation(c.getString((c.getColumnIndex(KEY_ISVENTILLATION))));
                    td.setVentilationRecom1mks(c.getString((c.getColumnIndex(KEY_VENTILLATIONmarks))));
                    td.setVentilationRemarks(c.getString((c.getColumnIndex(KEY_VENTILLATIONremarks))));
                    td.setIsEquipmentCleanliness(c.getString((c.getColumnIndex(KEY_ISEQUIPMENTCLEANLINESS))));
                    td.setEquipmentCleanlinessMust3mks(c.getString((c.getColumnIndex(KEY_EQUIPMENTCLEANLINESSmarks))));
                    td.setEquipmentCleanlinessRemarks(c.getString((c.getColumnIndex(KEY_EQUIPMENTCLEANLINESSremarks))));
                    td.setIsChangingrooms(c.getString((c.getColumnIndex(KEY_ISCHANGEROOM))));
                    td.setChangingroomsMust3mks(c.getString((c.getColumnIndex(KEY_CHANGEROOMmarks))));
                    td.setChangingroomsRemarks(c.getString((c.getColumnIndex(KEY_CHANGEROOMremarks))));
                    td.setIsRiskOfChemical(c.getString((c.getColumnIndex(KEY_ISRISKOFCHEMS))));
                    td.setRiskOfChemicalMust3mks(c.getString((c.getColumnIndex(KEY_RISKOFCHEMSmarks))));
                    td.setRiskOfChemicalRemarks(c.getString((c.getColumnIndex(KEY_RISKOFCHEMSremarks))));
                    td.setIsWasteTeaDisposal(c.getString((c.getColumnIndex(KEY_ISWASTEDISPOSAL))));
                    td.setWasteTeaDisposalMust3mks(c.getString((c.getColumnIndex(KEY_WASTEDISPOSALmarks))));
                    td.setWasteTeaDisposalRemarks(c.getString((c.getColumnIndex(KEY_WASTEDISPOSALremarks))));
                    td.setIsPestControlProgram(c.getString((c.getColumnIndex(KEY_ISPESTCONTROL))));
                    td.setPestControlProgramMust3mks(c.getString((c.getColumnIndex(KEY_PESTCONTROLmarks))));
                    td.setPestControlProgramRemarks(c.getString((c.getColumnIndex(KEY_PESTCONTROLremarks))));
                    td.setIsProperStorage(c.getString((c.getColumnIndex(KEY_ISPROPERSTORAGE))));
                    td.setProperStorageRecom1mk(c.getString((c.getColumnIndex(KEY_PROPERSTORAGEmarks))));
                    td.setProperStorageRemarks(c.getString((c.getColumnIndex(KEY_PROPERSTORAGEremarks))));
                    td.setIsPackagingMaterialConfirmity(c.getString((c.getColumnIndex(KEY_ISPACKINGCONFORMITY))));
                    td.setPackagingMaterialConfirmityMust2mks(c.getString((c.getColumnIndex(KEY_PACKINGCONFORMITYmarks))));
                    td.setPackagingMaterialConfirmityRemarks(c.getString((c.getColumnIndex(KEY_PACKINGCONFORMITYremarks))));
                    td.setIsIdentificationAndSegregation(c.getString((c.getColumnIndex(KEY_ISIDENTITYSEGREGATION))));
                    td.setIdentificationAndSegregationMust2mks(c.getString((c.getColumnIndex(KEY_IDENTITYSEGREGATIONmarks))));
                    td.setIdentificationAndSegregationRemarks(c.getString((c.getColumnIndex(KEY_IDENTITYSEGREGATIONremarks))));
                    td.setIsEquipmentIdentificationAndCalibration(c.getString((c.getColumnIndex(KEY_ISIDENTITYCALIBRATION))));
                    td.setEquipmentIdentificationAndCalibrationMust3mks(c.getString((c.getColumnIndex(KEY_IDENTITYCALIBRATIONmarks))));
                    td.setEquipmentIdentificationAndCalibrationRemarks(c.getString((c.getColumnIndex(KEY_IDENTITYCALIBRATIONremarks))));
                    td.setIsTraceabilitySystem(c.getString((c.getColumnIndex(KEY_ISTRACEABILITYSYSTEM))));
                    td.setTraceabilitySystemMandatory10mks(c.getString((c.getColumnIndex(KEY_TRACEABILITYSYSTEMmarks))));
                    td.setTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITYSYSTEMremarks))));
                    td.setIsProcessDocuments(c.getString((c.getColumnIndex(KEY_ISPROCESSDOCUMENTS))));
                    td.setProcessDocumentsMust3mks(c.getString((c.getColumnIndex(KEY_PROCESSDOCUMENTSmarks))));
                    td.setProcessDocumentsRemarks(c.getString((c.getColumnIndex(KEY_PROCESSDOCUMENTSremarks))));
                    td.setIsValidMedicalCert(c.getString((c.getColumnIndex(KEY_ISVALIDMEDCERTIFICATE))));
                    td.setValidMedicalCertMandatory10mks(c.getString((c.getColumnIndex(KEY_VALIDMEDCERTIFICATEmarks))));
                    td.setValidMedicalCertRemarks(c.getString((c.getColumnIndex(KEY_VALIDMEDCERTIFICATEremarks))));
                    td.setIsCleanPersonalProtective(c.getString((c.getColumnIndex(KEY_ISPROTECTIVEEQUIPMENTS))));
                    td.setCleanPersonalProtectiveMndatory10mks(c.getString((c.getColumnIndex(KEY_PROTECTIVEEQUIPMENTSmarks))));
                    td.setCleanPersonalProtectiveRemarks(c.getString((c.getColumnIndex(KEY_PROTECTIVEEQUIPMENTSremarks))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    // adding to itinerary list
                    teaPackerChecklist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + teaPackerChecklist.size());
        return teaPackerChecklist;
    }


    public void deleteTeapackerInspection() {

        String deleteQuery = "DELETE FROM " + TABLE_AFA_TD_TEAPACKERINSPCKLST;
        db = dbHelper.getReadableDatabase();
        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean updateTeapackerSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_AFA_TD_TEAPACKERINSPCKLST, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }

        // updating row
      /*  return db.update(tableName, values, KEY_SHOP_ID + " = ?",
                new String[] { String.valueOf(shopID) });*/
    }


    //the user table
    // TODO: Create public field for each column in your table.
    // SQL Statement to create a new database.
    // Variable to hold the database instance
    public static SQLiteDatabase db;
    // Database open/upgrade helper
    private static DatabaseHelper dbHelper;
    String ok = "OK";
    // Context of the application using the database.
    private Context context = null;

    public AFADatabaseAdapter(Context _context) {
        context = _context;
        dbHelper = new DatabaseHelper(context, DATABASE_NAME, null, DATABASE_VERSION);
    }


    //local brand Stocked

    // Method to openthe Database
    public AFADatabaseAdapter open() throws SQLException {
        db = dbHelper.getWritableDatabase();
        return this;

    }

    // Method to close the Database
    public void close() {

        db.close();
    }

    // method returns an Instance of the Database
    public SQLiteDatabase getDatabaseInstance() {
        return db;
    }


// LocalSugarImport

    public long insertShopRecords(String shopName, String longitude,
                                  String latitude, String afa_sd_sugarprices_survey_id) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        values.put(KEY_SHOPNAME, shopName);
        values.put(KEY_LATITUDE, String.valueOf(latitude));
        values.put(KEY_LONGITUDE, String.valueOf(longitude));
        values.put(KEY_SURVEY_ID, afa_sd_sugarprices_survey_id);
        values.put(KEY_UPLOADED, "N");
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long shop_id = db.insertWithOnConflict(TABLE_shop, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return shop_id;
    }

    public List<Shop> getAllUnSentShop() {
        List<Shop> shopList = new ArrayList<Shop>();
        String selectQuery = "SELECT  * FROM " + TABLE_shop + " WHERE " + KEY_UPLOADED + " = 'N'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        //db.beginTransaction();
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    Shop td = new Shop();
                    td.setAfa_sd_sugarprices_survey_id(c.getString((c.getColumnIndex(KEY_SURVEY_ID))));
                    td.setLongitude(c.getString(c.getColumnIndex(KEY_LONGITUDE)));
                    td.setLatitude(c.getString(c.getColumnIndex(KEY_LATITUDE)));
                    td.setName(c.getString(c.getColumnIndex(KEY_SHOPNAME)));
                    td.setShopID(c.getString(c.getColumnIndex(KEY_SHOP_ID)));
                    td.setSentStatus(c.getString(c.getColumnIndex(KEY_UPLOADED)));
                    //  td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    shopList.add(td);
                } while (c.moveToNext());
            }

        } finally {

            // db.endTransaction();
            //  db.close();
            if (c != null)

                c.close();
            closeDB();
            // RIGHT: ensure resource is always recovered
        }
        return shopList;
    }

    public Shop getSentShopID(String shopID) {
        List<Shop> shopList = new ArrayList<Shop>();
        String selectQuery = "SELECT  * FROM " + TABLE_shop + " WHERE " + KEY_SHOP_ID + " =" + shopID;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        Shop td = new Shop();
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {


                td.setAfa_sd_sugarprices_survey_id(c.getString((c.getColumnIndex(KEY_SURVEY_ID))));
                td.setLongitude(c.getString(c.getColumnIndex(KEY_LONGITUDE)));
                td.setLatitude(c.getString(c.getColumnIndex(KEY_LATITUDE)));
                td.setName(c.getString(c.getColumnIndex(KEY_SHOPNAME)));
                td.setShopID(c.getString(c.getColumnIndex(KEY_SHOP_ID)));
                td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                // adding to itinerary list


            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }

    public long insertADUser(ADUser adUser) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        values.put(KEY_NAME, adUser.getAd_user_name());
        values.put(KEY_EMAIL, adUser.getAd_user_email());
        values.put(KEY_AD_USER_ID, adUser.getAd_user_id());
        values.put(KEY_C_BPARTNER_ID, adUser.getC_bpartner_id());
        values.put(KEY_C_ACTIVITY_ID, adUser.getC_activity_id());

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long login_id = db.insertWithOnConflict(TABLE_AD_USER, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return login_id;
    }


    public void deleteADUser() {
        db = dbHelper.getReadableDatabase();
        //db.delete(TABLE_LOCAL_IMPORT_STOCKED ,null, null);
        db.delete(TABLE_AD_USER, null, null);

        closeDB();
    }


    public ADUser getADUser() {
        List<ADUser> shopList = new ArrayList<ADUser>();
        String selectQuery = "SELECT  * FROM " + TABLE_AD_USER + "";

        ADUser td = new ADUser();

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {

                td.setAd_user_name((c.getString((c.getColumnIndex(KEY_NAME)))));
                td.setAd_user_email((c.getString((c.getColumnIndex(KEY_EMAIL)))));
                td.setAd_user_id(c.getString(c.getColumnIndex(KEY_AD_USER_ID)));
                td.setC_bpartner_id(c.getString(c.getColumnIndex(KEY_C_BPARTNER_ID)));
                td.setC_activity_id(c.getString(c.getColumnIndex(KEY_C_ACTIVITY_ID)));


            } else {
                td = null;
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //  closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }


    public String getADUserID(String email) {
        String selectQuery = "SELECT  * FROM " + TABLE_AD_USER + " WHERE " + KEY_EMAIL + " =" + email;

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {


                return c.getString((c.getColumnIndex(KEY_AD_USER_ID)));


            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return null;
    }

//Imported Sugar Stocked

    // LocalSugarImport

    public long insertUserRecords(String name, String password
    ) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);
        values.put(KEY_PASSWORD, String.valueOf(password));

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long login_id = db.insertWithOnConflict(TABLE_login, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return login_id;
    }

    public User getLogin() {
        List<Shop> shopList = new ArrayList<Shop>();
        String selectQuery = "SELECT  * FROM " + TABLE_login + "";

        User td = new User();

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {


                td.setUsername((c.getString((c.getColumnIndex(KEY_NAME)))));
                td.setPassword(c.getString(c.getColumnIndex(KEY_PASSWORD)));


            } else {
                td = null;
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //  closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }

    public long insertLocalBrand(String brandName, String twentyKg,
                                 String twentyForKg, String fiftykg, int shop_id, String serverRecordID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_BRAND_NAME, brandName);
        values.put(KEY_PRICE_TWENTY__FOUR_KG, String.valueOf(twentyForKg));
        values.put(KEY_PRICE_TWENTY_KG, String.valueOf(twentyKg));
        values.put(KEY_PRICE_FIFTY_KG, String.valueOf(fiftykg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_LOCALBRAND, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return shop_id;
    }

    public List<WholeSaleBrandLocal> getAllUnSentLocalBrand() {
        List<WholeSaleBrandLocal> wholeSaleBrandLocalList = new ArrayList<WholeSaleBrandLocal>();
        String selectQuery = "SELECT  * FROM " + TABLE_LOCALBRAND + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    WholeSaleBrandLocal td = new WholeSaleBrandLocal();
                    td.setBrand(c.getString((c.getColumnIndex(KEY_BRAND_NAME))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setPriceOfTwentykgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY_KG)))));
                    td.setPriceOfTwentyFOurkgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY__FOUR_KG)))));
                    td.setServerRecordID((c.getString((c.getColumnIndex(KEY_SERVER_ID)))));
                    td.setPriceOfFiftykgBag((c.getString(c.getColumnIndex(KEY_PRICE_FIFTY_KG))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));

                    // adding to itinerary list
                    wholeSaleBrandLocalList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return wholeSaleBrandLocalList;
    }


    //retail


    public long insertRetailLocalBrand(String brandName, String oneKg,
                                       String twoKg, int shop_id, String serverRecordID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_BRAND_NAME, brandName);
        values.put(KEY_PRICE_ONE_KG, String.valueOf(oneKg));
        values.put(KEY_PRICE_TWO_KG, String.valueOf(twoKg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_RETAIL_LOCALBRAND, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return localbrandID;
    }

    public List<RetailSugarPricesRangeLocal> getAllUnSentRetailSugarPricesRangeLocal() {
        List<RetailSugarPricesRangeLocal> retailSugarPricesRangeLocalList = new ArrayList<RetailSugarPricesRangeLocal>();
        String selectQuery = "SELECT  * FROM " + TABLE_RETAIL_LOCALBRAND + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    RetailSugarPricesRangeLocal td = new RetailSugarPricesRangeLocal();
                    td.setBrand(c.getString((c.getColumnIndex(KEY_BRAND_NAME))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLooseSugarLocal1kg((c.getString((c.getColumnIndex(KEY_PRICE_ONE_KG)))));
                    td.setLooseSugarLocal2kg(c.getString((c.getColumnIndex(KEY_PRICE_TWO_KG))));
                    //  td.setServerRecordID((c.getString((c.getColumnIndex(KEY_SERVER_ID)))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));

                    // adding to itinerary list
                    retailSugarPricesRangeLocalList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }

        return retailSugarPricesRangeLocalList;
    }


    //end


    //retail loose sugar


    public long insertRetailLooseSugarPricesRangeLocal(String brandName, String oneKg,
                                                       String twoKg, int shop_id, String serverRecordID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_BRAND_NAME, brandName);
        values.put(KEY_PRICE_ONE_KG, String.valueOf(oneKg));
        values.put(KEY_PRICE_TWO_KG, String.valueOf(twoKg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        // values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_RETAIL_LOOSE_BRAND, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return localbrandID;
    }

    public List<RetailLooseSugarPricesRangeLocal> getAllUnSentRetailLooseSugarPricesRangeLocal() {
        List<RetailLooseSugarPricesRangeLocal> retailLooseSugarPricesRangeLocalList = new ArrayList<RetailLooseSugarPricesRangeLocal>();
        String selectQuery = "SELECT  * FROM " + TABLE_RETAIL_LOOSE_BRAND + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    RetailLooseSugarPricesRangeLocal td = new RetailLooseSugarPricesRangeLocal();
                    td.setBrand(c.getString((c.getColumnIndex(KEY_BRAND_NAME))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLooseSugarLocal1kg((c.getString((c.getColumnIndex(KEY_PRICE_ONE_KG)))));
                    td.setLooseSugarLocal2kg(c.getString((c.getColumnIndex(KEY_PRICE_TWO_KG))));
                    // td.setServerRecordID((c.getString((c.getColumnIndex(KEY_SERVER_ID)))));
                    td.setShopID(c.getString(c.getColumnIndex(KEY_SHOP_ID)));
                    td.setLocalID(c.getString(c.getColumnIndex(KEY_BRAND_ID)));

                    // adding to itinerary list
                    retailLooseSugarPricesRangeLocalList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();

            // closeDB();

            // RIGHT: ensure resource is always recovered
        }

        return retailLooseSugarPricesRangeLocalList;
    }


    //end


    public long insertLocalBrandStocked(String brandName, String twentyKg,
                                        String twentyForKg, String fiftykg, int shop_id, int serverRecordID) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_BRAND_NAME, brandName);
        values.put(KEY_PRICE_TWENTY__FOUR_KG, String.valueOf(twentyForKg));
        values.put(KEY_PRICE_TWENTY_KG, String.valueOf(twentyKg));
        values.put(KEY_PRICE_FIFTY_KG, String.valueOf(fiftykg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_LOCALBRAND_STOCKED, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return shop_id;
    }

    public List<WholeSaleStockedBrandLocal> getAllUnSentLocalBrandStocked() {
        List<WholeSaleStockedBrandLocal> wholeSaleBrandLocalList = new ArrayList<WholeSaleStockedBrandLocal>();
        String selectQuery = "SELECT  * FROM " + TABLE_LOCALBRAND_STOCKED + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    WholeSaleStockedBrandLocal td = new WholeSaleStockedBrandLocal();
                    td.setBrand(c.getString((c.getColumnIndex(KEY_BRAND_NAME))));
//                     td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setPriceOf20kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY_KG)))));
                    td.setPriceOf24kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY__FOUR_KG)))));
                    td.setServerRecordID((c.getString((c.getColumnIndex(KEY_SERVER_ID)))));
                    td.setPriceOf50kgBag((c.getString(c.getColumnIndex(KEY_PRICE_FIFTY_KG))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));


                    // adding to itinerary list
                    wholeSaleBrandLocalList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();

            //  closeDB();

            // RIGHT: ensure resource is always recovered
        }
        return wholeSaleBrandLocalList;
    }

    //Localstocked


    //ratail sotcked local brand


    public long insertRetailStockedSugarPricesRangeLocal(String brandName, String twentyKg,
                                                         String twentyForKg, String fiftykg, int shop_id, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_BRAND_NAME, brandName);
        values.put(KEY_PRICE_TWENTY__FOUR_KG, String.valueOf(twentyForKg));
        values.put(KEY_PRICE_TWENTY_KG, String.valueOf(twentyKg));
        values.put(KEY_PRICE_FIFTY_KG, String.valueOf(fiftykg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_RETAIL_LOCALBRAND_STOCKED, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return shop_id;
    }

    public List<RetailStockedSugarPricesRangeLocal> getAllUnSentRetailStockedSugarPricesRangeLocal() {
        List<RetailStockedSugarPricesRangeLocal> wholeSaleBrandLocalList = new ArrayList<RetailStockedSugarPricesRangeLocal>();
        String selectQuery = "SELECT  * FROM " + TABLE_RETAIL_LOCALBRAND_STOCKED + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    RetailStockedSugarPricesRangeLocal td = new RetailStockedSugarPricesRangeLocal();
                    td.setBrand(c.getString((c.getColumnIndex(KEY_BRAND_NAME))));
                    //  td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLocalSugar20kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY_KG)))));
                    td.setLocalSugar24kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY__FOUR_KG)))));
                    //td.setServerRecordID((c.getString((c.getColumnIndex(KEY_SERVER_ID)))));;
                    td.setLocalSugar50kgBag((c.getString(c.getColumnIndex(KEY_PRICE_FIFTY_KG))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));


                    // adding to itinerary list
                    wholeSaleBrandLocalList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }
        return wholeSaleBrandLocalList;
    }

    //Localstocked


    public long insertLocalImportBrand(String country, String twentyKg,
                                       String twentyForKg, String fiftykg, int shop_id, int recordServerID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_COUNTRY_ID, country);
        values.put(KEY_PRICE_TWENTY__FOUR_KG, String.valueOf(twentyForKg));
        values.put(KEY_PRICE_TWENTY_KG, String.valueOf(twentyKg));
        values.put(KEY_PRICE_FIFTY_KG, String.valueOf(fiftykg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        // values.put(KEY_SERVER_ID, recordServerID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_LOCAL_IMPORT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return shop_id;
    }

    public List<WholeSaleImportedSugar> getAllUnSentLocalImportBrand() {
        List<WholeSaleImportedSugar> wholeSaleBrandLocalList = new ArrayList<WholeSaleImportedSugar>();
        String selectQuery = "SELECT  * FROM " + TABLE_LOCAL_IMPORT + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    WholeSaleImportedSugar td = new WholeSaleImportedSugar();
                    td.setC_country_id(c.getString((c.getColumnIndex(KEY_COUNTRY_ID))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setPriceOf20kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY_KG)))));
                    td.setPriceOf24kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY__FOUR_KG)))));
                    td.setServerRecordID((c.getString(c.getColumnIndex(KEY_SERVER_ID))));
                    td.setPriceOf50kgBag((c.getString(c.getColumnIndex(KEY_PRICE_FIFTY_KG))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));

                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));


                    // adding to itinerary list
                    wholeSaleBrandLocalList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //  closeDB();
            // RIGHT: ensure resource is always recovered
        }
        return wholeSaleBrandLocalList;
    }
    //Start of retail stocked imported sugar
    //Localstocked


    public long insertRetailStockedSugarPricesRangeImported(String country, String twentyKg,
                                                            String twentyForKg, String fiftykg, int shop_id, int recordServerID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_COUNTRY_ID, country);
        values.put(KEY_PRICE_TWENTY__FOUR_KG, String.valueOf(twentyForKg));
        values.put(KEY_PRICE_TWENTY_KG, String.valueOf(twentyKg));
        values.put(KEY_PRICE_FIFTY_KG, String.valueOf(fiftykg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        // values.put(KEY_SERVER_ID, recordServerID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_RETAIL_LOCAL_IMPORT_STOCKED, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return shop_id;
    }

    public List<RetailStockedSugarPricesRangeImported> getAllUnSentRetailStockedSugarPricesRangeImported() {
        List<RetailStockedSugarPricesRangeImported> retailStockedSugarPricesRangeImportedList = new ArrayList<RetailStockedSugarPricesRangeImported>();
        String selectQuery = "SELECT  * FROM " + TABLE_RETAIL_LOCAL_IMPORT_STOCKED + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);


        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    RetailStockedSugarPricesRangeImported td = new RetailStockedSugarPricesRangeImported();
                    td.setCountryID(c.getString((c.getColumnIndex(KEY_COUNTRY_ID))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLocalSugar20kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY_KG)))));
                    td.setLocalSugar24kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY__FOUR_KG)))));
                    // td.setServerRecordID((c.getString(c.getColumnIndex(KEY_SERVER_ID))));
                    td.setLocalSugar50kgBag((c.getString(c.getColumnIndex(KEY_PRICE_FIFTY_KG))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));
                    ;
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));


                    // adding to itinerary list
                    retailStockedSugarPricesRangeImportedList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();

            // RIGHT: ensure resource is always recovered
        }
        return retailStockedSugarPricesRangeImportedList;
    }


    //end

    //start of Retail Loose Sugar Imported
    public long insertRetailLooseSugarPricesRangeImported(String country, String oneKg,
                                                          String twoKg, int shop_id, int recordServerID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_COUNTRY_ID, country);
        values.put(KEY_PRICE_ONE_KG, String.valueOf(oneKg));
        values.put(KEY_PRICE_TWO_KG, String.valueOf(twoKg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        // values.put(KEY_SERVER_ID, recordServerID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_RETAIL_LOOSE_IMPORT, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return shop_id;
    }

    public List<RetailLooseSugarPricesRangeImported> getAllUnSentRetailLooseSugarPricesRangeImported() {
        List<RetailLooseSugarPricesRangeImported> retailLooseSugarPricesRangeImportedList = new ArrayList<RetailLooseSugarPricesRangeImported>();
        String selectQuery = "SELECT  * FROM " + TABLE_RETAIL_LOOSE_IMPORT + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);


        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    RetailLooseSugarPricesRangeImported td = new RetailLooseSugarPricesRangeImported();
                    td.setCountryID(c.getString((c.getColumnIndex(KEY_COUNTRY_ID))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLooseSugarLocal1kg((c.getString((c.getColumnIndex(KEY_PRICE_ONE_KG)))));
                    td.setLooseSugarLocal2kg((c.getString((c.getColumnIndex(KEY_PRICE_TWO_KG)))));
                    //td.setServerRecordID((c.getString(c.getColumnIndex(KEY_SERVER_ID))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));
                    ;
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));


                    // adding to itinerary list
                    retailLooseSugarPricesRangeImportedList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }
        return retailLooseSugarPricesRangeImportedList;
    }


    //end

    public long insertLocalImportBrandStocked(String country, String twentyKg,
                                              String twentyForKg, String fiftykg, int shop_id, int recordServerID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_COUNTRY_ID, country);
        values.put(KEY_PRICE_TWENTY__FOUR_KG, String.valueOf(twentyForKg));
        values.put(KEY_PRICE_TWENTY_KG, String.valueOf(twentyKg));
        values.put(KEY_PRICE_FIFTY_KG, String.valueOf(fiftykg));
        values.put(KEY_SHOP_ID, shop_id);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_SERVER_ID, recordServerID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long localbrandID = db.insertWithOnConflict(TABLE_LOCAL_IMPORT_STOCKED, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return shop_id;
    }

    public List<WholeSaleImportedStockedSugar> getAllUnSentLocalImportBrandStocked() {
        List<WholeSaleImportedStockedSugar> wholeSaleBrandLocalList = new ArrayList<WholeSaleImportedStockedSugar>();
        String selectQuery = "SELECT  * FROM " + TABLE_LOCAL_IMPORT_STOCKED + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
//        wholeSaleBrandLocalList.add(new WholeSaleImportedStockedSugar());

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    WholeSaleImportedStockedSugar td = new WholeSaleImportedStockedSugar();
                    td.setC_country_id(c.getString((c.getColumnIndex(KEY_COUNTRY_ID))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setPriceOf20kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY_KG)))));
                    td.setPriceOf24kgBale((c.getString((c.getColumnIndex(KEY_PRICE_TWENTY__FOUR_KG)))));
                    td.setServerRecordID((c.getString((c.getColumnIndex(KEY_SERVER_ID)))));
                    td.setPriceOf50kgBag((c.getString(c.getColumnIndex(KEY_PRICE_FIFTY_KG))));
                    td.setShopID((c.getString(c.getColumnIndex(KEY_SHOP_ID))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_BRAND_ID))));

                    // adding to itinerary list
                    wholeSaleBrandLocalList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }
        return wholeSaleBrandLocalList;
    }

    public boolean updateShopSent(String tableName, String shopID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        //  db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_SERVER_ID, serverRecordID);

            int result = db.update(tableName, values, "shop_id=" + shopID, null);

            if (result == 0) {
                return false;
            } else {
//                db.setTransactionSuccessful();
                return true;
            }
        } finally {
            closeDB();
        }

        // updating row
      /*  return db.update(tableName, values, KEY_SHOP_ID + " = ?",
                new String[] { String.valueOf(shopID) });*/
    }

    public boolean updateRecordsSent(String tableName, String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_SERVER_ID, serverRecordID);

            // updating row
            int result = db.update(tableName, values, KEY_BRAND_ID + " = ?",
                    new String[]{String.valueOf(localID)});
            if (result == 0) {
                return false;
            } else {
//                db.setTransactionSuccessful();
                return true;
            }
        } finally {
            closeDB();

        }
    }

    public void onCreate() {
        db = dbHelper.getReadableDatabase();

        // creating required tables
        db.execSQL(CREATE_TABLE_SHOP);
        db.execSQL(CREATE_TABLE_CITY);
        db.execSQL(CREATE_TABLE_COUNTRY);
        db.execSQL(CREATE_TABLE_LOCAL_BRAND);
        db.execSQL(CREATE_TABLE_LOCAL_BRAND_STOCKED);
        db.execSQL(CREATE_TABLE_LOCAL_IMPORT_BRAND);
        db.execSQL(CREATE_TABLE_LOCAL_IMPORT_BRAND_STOCKED);
        db.execSQL(CREATE_TABLE_USER);
        db.execSQL(CREATE_TABLE_ADUSER);
        db.execSQL(CREATE_TABLE_SUGAR_COMPANY);
        db.execSQL(CREATE_TABLE_C_BPARTNER);
        db.execSQL(CREATE_TABLE_COUNTY);
        db.execSQL(CREATE_TABLE_CROPS_DETAILS);
        db.execSQL(CREATE_TABLE_MILLING);
        db.execSQL(CREATE_TABLE_FARMER);
        db.execSQL(CREATE_TABLE_RETAIL_LOCAL_BRAND);
        db.execSQL(CREATE_TABLE_RETAIL_LOCAL_BRAND_STOCKED);
        db.execSQL(CREATE_TABLE_RETAIL_LOCAL_IMPORT_BRAND);
        db.execSQL(CREATE_TABLE_RETAIL_LOCAL_IMPORT_BRAND_STOCKED);
        db.execSQL(CREATE_TABLE_RETAIL_LOOSE_BRAND);
        db.execSQL(CREATE_TABLE_SUB_COUNTY);
        db.execSQL(CREATE_TABLE_PRODUCT);
        db.execSQL(CREATE_TABLE_PAY_CATEGORY);
        db.execSQL(CREATE_TABLE_PRODUCT_CATEGORY);
        db.execSQL(CREATE_TABLE_NOCD_PRODUCT);
        db.execSQL(CREATE_TABLE_COLD_STORAGE_PRODUCT);
        db.execSQL(CREATE_TABLE_SUGAR_MILL);
        db.execSQL(CREATE_TABLE_PYRETHRUM_INSPECTION);
        db.execSQL(CREATE_TABLE_TEA_WAREHOUSEMAN_INSPECTION);
        db.execSQL(CREATE_TABLE_TEA_BUYER_IMPORTER_EXPORTER);
        db.execSQL(CREATE_TABLE_PULPING_STATION_LICENSE_APPLICATION);
        db.execSQL(CREATE_TABLE_AFA_TD_TEAPACKERINSPCKLST);
        db.execSQL(CREATE_TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION);
        db.execSQL(CREATE_TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL);
        db.execSQL(CREATE_TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST);
        db.execSQL(CREATE_TABLE_COFFEE_MILLER_LICENSE_APPLICATION);
        db.execSQL(CREATE_TABLE_COFFEE_GROWER_MARKETING_AGENT);
        db.execSQL(CREATE_TABLE_COFFEE_EXPORTER_DEALER_INSPECTION);
        db.execSQL(CREATE_TABLE_NUTS_AND_OILS_MARKET_LOCATION);
        db.execSQL(CREATE_TABLE_NUTS_AND_OILS_MARKET_PRICE);
        db.execSQL(CREATE_TABLE_HORTICULTURE_LICENCE_FARM_INSPECTION);
        db.execSQL(CREATE_TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING);
        db.execSQL(CREATE_TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST);
        db.execSQL(CREATE_TABLE_COFFEE_COMMERCIAL_MARKET_AGENT);
        db.execSQL(CREATE_TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION);
        db.execSQL(CREATE_TABLE_NURSERY_INSPECTION);
        db.execSQL(CREATE_TABLE_PARKHOUSE_WAREHOUSE_INSPECTION);
        db.execSQL(CREATE_TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING);
        db.execSQL(CREATE_TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING);
        db.execSQL(CREATE_TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION);
        db.execSQL(CREATE_TABLE_HCD_COLD_ROOM_TEMPERATURE_DETAILS);
        db.execSQL(CREATE_TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER);
        db.execSQL(CREATE_TABLE_HORTICULTURE_COLD_STORAGE_IN);
        db.execSQL(CREATE_TABLE_HORTICULTURE_COLD_STORAGE_OUT);
        db.execSQL(CREATE_TABLE_HORTICULTURE_COLD_STORAGE_CHARGES);
        db.execSQL(CREATE_TABLE_HCD_MANGO_QUALITY_INSPECTION);
        db.execSQL(CREATE_TABLE_HCD_AVOCADO_QUALITY_INSPECTION);
        db.execSQL(CREATE_TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT);
        db.execSQL(CREATE_TABLE_HCD_PERSONAL_HYGIENE);
        db.execSQL(CREATE_TABLE_HCD_PERSONAL_HYGIENE_DETAILS);
        db.execSQL(CREATE_TABLE_FCD_SISAL_FACTORY_INSPECTION);
        db.execSQL(CREATE_TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION);
        db.execSQL(CREATE_TABLE_FCD_COTTON_BUYING_STORE_INSPECTION);
        db.execSQL(CREATE_TABLE_FCD_COTTON_GINNERY_INSPECTION);
        db.execSQL(CREATE_TABLE_FCD_COTTON_LINT_CLASSING_REPORT);
        db.execSQL(CREATE_TABLE_FOOD_PROCESSING_INSPECCTION);
        db.execSQL(CREATE_TABLE_FOOD_WAREHOUSE_INSPECCTION);
        db.execSQL(CREATE_TABLE_FOOD_CROP_INSPECCTION);
        db.execSQL(CREATE_TABLE_MILLING_TARIFFS);
        /*
         * db.execSQL(CREATE_TABLE_TAG); db.execSQL(CREATE_TABLE_TODO_TAG);
         */
    }

    public void onUpgrade(int oldVersion, int newVersion) {
        // on upgrade drop older tables

        db = dbHelper.getReadableDatabase();
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_shop);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_country);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_city);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOCAL_IMPORT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOCAL_IMPORT_STOCKED);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOCALBRAND_STOCKED);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_LOCALBRAND);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_login);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_AD_USER);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COUNTY);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_SUGAR_COMPANY);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_C_BPARTNER);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MILLING);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_CROP_DETAIL);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FARMER);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_SUB_COUNTY);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PRODUCT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PAY_CATEGORY);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PRODUCT_CATEGORY);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NOCD_PRODUCT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COLD_STORAGE_PRODUCT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_SUGAR_MILL);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PYRETHRUM_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_TEA_WAREHOUSE_MAN_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_TEA_BUYER_IMPORTER_EXPORTER);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PULPING_STATION_LICENSE_APPLICATION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_AFA_TD_TEAPACKERINSPCKLST);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COFFEE_EXPORTER_DEALER_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COFFEE_GROWER_MARKETING_AGENT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COFFEE_MILLER_LICENSE_APPLICATION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NUTS_AND_OILS_MARKET_LOCATION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NUTS_AND_OILS_MARKET_PRICE);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HCD_COLD_ROOM_TEMPERATURE_DETAILS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_COFFEE_COMMERCIAL_MARKET_AGENT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NURSERY_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_PARKHOUSE_WAREHOUSE_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HORTICULTURE_COLD_STORAGE_IN);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HORTICULTURE_COLD_STORAGE_OUT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HORTICULTURE_COLD_STORAGE_CHARGES);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HCD_MANGO_QUALITY_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HCD_PERSONAL_HYGIENE);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_HCD_PERSONAL_HYGIENE_DETAILS);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FCD_SISAL_FACTORY_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FCD_COTTON_BUYING_STORE_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FCD_COTTON_GINNERY_INSPECTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FCD_COTTON_LINT_CLASSING_REPORT);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FOOD_PROCESSING_INSPECCTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FOOD_WAREHOUSE_INSPECCTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FOOD_CROP_INSPECCTION);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_MILLING_TARIFFS);


        // create new tables
        onCreate();
    }

    /**
     * Creating a country
     */
    public long createCountry(String name, String countryID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_COUNTRY_ID, countryID);
        values.put(KEY_NAME, name);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long itinerary_id = db.insertWithOnConflict(TABLE_country, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        // [{"itineraryMeterId":1,"readingStatus":null,"meterNumber":"12345","accountNumber":
        // "12345","minLimit":0.0,"maxLimit":1000.0,"itinerary":null,"itineraryId":1}

        /*
         * // insert tag_ids for (long tag_id : tag_ids) {
         * createTodoTag(todo_id, tag_id); }
         */
        closeDB();

        return itinerary_id;
    }

    public List<Country> getCountryList() {


        List<Country> countryList = new ArrayList<Country>();
        Country td = new Country();
        td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_country + "";

        System.out.println("picking data from the db");
        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new Country();
                    td.setC_country_id(c.getString((c.getColumnIndex(KEY_COUNTRY_ID))));
                    td.setName((c.getString((c.getColumnIndex(KEY_NAME)))));


                    // adding to itinerary list
                    countryList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + countryList.size());
        return countryList;
    }


    //the sugar company details

    /**
     * Creating a city
     */
    public long createCity(String name, String cityID) {
        db = dbHelper.getReadableDatabase();


        ContentValues values = new ContentValues();

        values.put(KEY_CITY_ID, cityID);
        values.put(KEY_NAME, name);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long itinerary_id = db.insertWithOnConflict(TABLE_city, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        // [{"itineraryMeterId":1,"readingStatus":null,"meterNumber":"12345","accountNumber":
        // "12345","minLimit":0.0,"maxLimit":1000.0,"itinerary":null,"itineraryId":1}

        /*
         * // insert tag_ids for (long tag_id : tag_ids) {
         * createTodoTag(todo_id, tag_id); }
         */
        closeDB();

        return itinerary_id;
    }

    public List<City> getCityList() {
        List<City> cityList = new ArrayList<City>();
        String selectQuery = "SELECT  * FROM " + TABLE_city + "";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);

        cityList.add(new City());

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    City td = new City();
                    td.setC_city_id(c.getString((c.getColumnIndex(KEY_CITY_ID))));
                    td.setName((c.getString((c.getColumnIndex(KEY_NAME)))));


                    // adding to itinerary list
                    cityList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();

            // RIGHT: ensure resource is always recovered
        }

        return cityList;
    }

    /**
     * getting itinerary count
     */
    public int getTableCount(String tableName) {
        String countQuery = "SELECT  * FROM " + tableName;
        db = dbHelper.getReadableDatabase();
        Cursor cursor = db.rawQuery(countQuery, null);

        int count = cursor.getCount();
        cursor.close();
        closeDB();
        // return count
        return count;
    }

    /**
     * Deleting a itinerary
     */
    public void deleteLogin() {
        db = dbHelper.getReadableDatabase();
        //db.delete(TABLE_LOCAL_IMPORT_STOCKED ,null, null);
        db.delete(TABLE_login, null, null);

        closeDB();
    }

    /**
     * Deleting a itinerary
     */
    public void deleteSentRecords(String tableName, String shopID, String serverRecordID) {
        String deleteQuery = "DELETE FROM " + tableName + " WHERE " + KEY_UPLOADED + " = 'SENT' and " + KEY_BRAND_ID + " =" + shopID;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);

        closeDB();


    }


    /**
     * Deleting a itinerary
     */
    public void deleteSentCensusRecords(String tableName) {
        String deleteQuery = "DELETE FROM " + tableName + " WHERE " + KEY_UPLOADED + " = 'SENT' ";
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_UPLOADED, "SENT");
        // values.put(KEY_SHOP_ID ,shopID);

        // updating row
        db.execSQL(deleteQuery);
        closeDB();
        //  closeDB();


    }


    public long insertSugarCompany(String name, String serverID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_SUGAR_COMPANY, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        //closeDB();
        closeDB();
        return companyID;
    }


    public long insertCBPartner(String name, String serverID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_C_BPARTNER, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        //closeDB();
        closeDB();
        return companyID;
    }

    //end of the sugar company

    public List<CBPartner> getAllCompanys() {
        List<CBPartner> cbPartnerList = new ArrayList<CBPartner>();
        String selectQuery = "SELECT  * FROM " + TABLE_SUGAR_COMPANY;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        cbPartnerList.add(new CBPartner());

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    CBPartner td = new CBPartner();
                    td.setC_bpartner_id(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    cbPartnerList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();
            // RIGHT: ensure resource is always recovered

            // RIGHT: ensure resource is always recovered
        }
        return cbPartnerList;
    }

    public List<CBPartner> getAllCPartners() {
        List<CBPartner> cbPartnerList = new ArrayList<CBPartner>();
        String selectQuery = "SELECT  * FROM " + TABLE_C_BPARTNER;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    CBPartner td = new CBPartner();
                    td.setC_bpartner_id(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    cbPartnerList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();
            // RIGHT: ensure resource is always recovered

            // RIGHT: ensure resource is always recovered
        }
        return cbPartnerList;
    }


    public List<SugarMillDetails> getAllSugarCompanymilllist() {
        List<SugarMillDetails> sugarcompanysList = new ArrayList<SugarMillDetails>();

        System.out.println("list of sugar Companys" + sugarcompanysList.size());
        String selectQuery = "SELECT  * FROM " + TABLE_SUGAR_COMPANY;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        SugarMillDetails td = new SugarMillDetails();
        td.setServerRecordID("- Required -");
        try {
            // looping through all rows and adding to list
            if (c.moveToFirst()) {
                do {
                    td = new SugarMillDetails();
                    td.setServerRecordID(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    sugarcompanysList.add(td);
                } while (c.moveToNext());
            }


        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();// RIGHT: ensure resource is always recovered
        }

        return sugarcompanysList;
    }


//start of sugar company cane census

    public long insertCounty(String name, String serverID
    ) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_COUNTY, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return companyID;
    }


    public List<County> getAllCounty() {
        List<County> countyList = new ArrayList<County>();
        String selectQuery = "SELECT  * FROM " + TABLE_COUNTY;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        County td = new County();
        td.setCountyName("- Required -");
        try {
            // looping through all rows and adding to list
            if (c.moveToFirst()) {
                do {
                    td = new County();
                    td.setCountyId(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setCountyName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    countyList.add(td);
                } while (c.moveToNext());
            }


        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();// RIGHT: ensure resource is always recovered
        }

        return countyList;
    }

    //start of

    public long insertProduct(String name, String serverID) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_PRODUCT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyID;
    }

    public long insertPayCategory(String name, String serverID) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_PAY_CATEGORY, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyID;
    }

    public long insertColdStorageProduct(String name, String productCategory, String serverID) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_PRODUCT_CATEGORY, productCategory);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_COLD_STORAGE_PRODUCT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyID;
    }

    public long insertProductCategory(String name, String serverID) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_PRODUCT_CATEGORY, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyID;
    }

    public long insertNOCDProduct(String name, String serverID) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SERVER_ID, serverID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_NOCD_PRODUCT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        System.out.println(" companyID" + companyID);
        return companyID;
    }

    public List<Product> getAllProduct() {
        List<Product> productList = new ArrayList<Product>();
        String selectQuery = "SELECT  * FROM " + TABLE_PRODUCT;

        Product td = new Product();
        td.setName("- Required -");
        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new Product();
                    td.setProductID(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    productList.add(td);
                } while (c.moveToNext());
            }

        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();// RIGHT: ensure resource is always recovered
        }


        return productList;
    }

    public List<PayCategory> getAllPayCategory() {
        List<PayCategory> payCategoryList = new ArrayList<PayCategory>();
        String selectQuery = "SELECT  * FROM " + TABLE_PAY_CATEGORY;

        PayCategory td = new PayCategory();
        td.setName("- Required -");
        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new PayCategory();
                    td.setPayCategoryID(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    payCategoryList.add(td);
                } while (c.moveToNext());
            }

        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();// RIGHT: ensure resource is always recovered
        }


        return payCategoryList;
    }

    public List<ProductCategory> getAllProductCategory() {
        List<ProductCategory> productList = new ArrayList<ProductCategory>();
        String selectQuery = "SELECT  * FROM " + TABLE_PRODUCT_CATEGORY;

        ProductCategory td = new ProductCategory();
        td.setName("- Required -");
        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new ProductCategory();
                    td.setProductCategoryID(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    productList.add(td);
                } while (c.moveToNext());
            }

        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();// RIGHT: ensure resource is always recovered
        }


        return productList;
    }


    public List<Product> getAllNOCDProduct() {
        List<Product> productList = new ArrayList<Product>();
        String selectQuery = "SELECT  * FROM " + TABLE_NOCD_PRODUCT;

        Product td = new Product();
        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new Product();
                    td.setProductID(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    productList.add(td);
                } while (c.moveToNext());
            }

        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();// RIGHT: ensure resource is always recovered
        }

        return productList;
    }

    public List<Product> getAllColdStorageProduct() {
        List<Product> productList = new ArrayList<Product>();
        String selectQuery = "SELECT  * FROM " + TABLE_COLD_STORAGE_PRODUCT;

        Product td = new Product();
        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new Product();
                    td.setProductID(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));
                    // adding to itinerary list
                    productList.add(td);
                } while (c.moveToNext());
            }

        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();// RIGHT: ensure resource is always recovered
        }

        return productList;
    }

    public List<Product> getColdStorageProduct(String productCategory) {
        List<Product> productList = new ArrayList<Product>();
        String selectQuery = "SELECT  * FROM " + TABLE_COLD_STORAGE_PRODUCT + " where " + KEY_PRODUCT_CATEGORY + " =" + productCategory;

        Product td = new Product();
        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new Product();
                    td.setProductID(c.getString((c.getColumnIndex(KEY_SERVER_ID))));
                    td.setName(c.getString(c.getColumnIndex(KEY_NAME)));

                    // adding to itinerary list
                    productList.add(td);
                } while (c.moveToNext());
            }

        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();// RIGHT: ensure resource is always recovered
        }

        return productList;
    }


    public long insertSubCounty(String name, String serverID, String countyID
    ) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_NAME, name);

        values.put(KEY_SUB_COUNTY_ID, serverID);

        values.put(KEY_SERVER_ID, serverID);


        values.put(KEY_COUNTY_ID, countyID);

        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyID = db.insertWithOnConflict(TABLE_SUB_COUNTY, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyID;
    }

    public List<SubCounty> getAllSubCounty(String countyID) {
        List<SubCounty> subCountyList = new ArrayList<SubCounty>();
        String selectQuery = "SELECT  * FROM " + TABLE_SUB_COUNTY + " where " + KEY_COUNTY_ID + " = " + countyID;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        subCountyList.add(new SubCounty());
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    SubCounty td = new SubCounty();
                    td.setCountyId(c.getString((c.getColumnIndex(KEY_COUNTY_ID))));
                    td.setSubCountyName(c.getString(c.getColumnIndex(KEY_NAME)));

                    td.setSubCountyId(c.getString(c.getColumnIndex(KEY_SUB_COUNTY_ID)));
                    // adding to itinerary list
                    subCountyList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();// RIGHT: ensure resource is always recovered
        }

        return subCountyList;
    }


    public List<SubCounty> getAllLocalSubCounty() {
        List<SubCounty> subCountyList = new ArrayList<SubCounty>();
        String selectQuery = "SELECT  * FROM " + TABLE_SUB_COUNTY;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        try { // looping through all rows and adding to list
            if (c.moveToFirst()) {
                do {
                    SubCounty td = new SubCounty();
                    td.setCountyId(c.getString((c.getColumnIndex(KEY_COUNTY_ID))));
                    td.setSubCountyName(c.getString(c.getColumnIndex(KEY_NAME)));

                    td.setSubCountyId(c.getString(c.getColumnIndex(KEY_SUB_COUNTY_ID)));
                    // adding to itinerary list
                    subCountyList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();// RIGHT: ensure resource is always recovered
        }

        return subCountyList;
    }


    /**
     * Deleting a itinerary
     */
    public void deleteAllRecord(String sugar_company) {
        String deleteQuery = "DELETE FROM " + sugar_company;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();


    }

    // ------------------------ "todo_tags" table methods ----------------//


    //wholesale insert shop details

    public long insertShop(String ShopName) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        System.out.println("data passed ShopName" + ShopName);
        values.put(KEY_SHOPNAME, String.valueOf(ShopName));
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_CREATED_AT, getDateTime());
        // insert row
        long shopid = db.insertWithOnConflict(TABLE_shop, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();
        return shopid;
    }
    //Farmer Details

    public long insertMillingCompany(String countyID, String companyID,
                                     String longitude, String latitude) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        System.out.println("data passed  companyID" + companyID);
        System.out.println("data passed countyID" + countyID);


        values.put(KEY_COMPANY_ID, String.valueOf(companyID));
        values.put(KEY_COUNTY_ID, String.valueOf(countyID));
        values.put(KEY_LONGITUDE, String.valueOf(longitude));
        values.put(KEY_LATITUDE, String.valueOf(latitude));

        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyid = db.insertWithOnConflict(TABLE_MILLING, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyid;
    }


    public List<CaneCensusDataCollection> getUnsentCaneCensusDataCollection() {
        List<CaneCensusDataCollection> caneCensusDataCollections = new ArrayList<CaneCensusDataCollection>();
        String selectQuery = "SELECT  * FROM " + TABLE_MILLING + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        //db.beginTransaction();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    CaneCensusDataCollection td = new CaneCensusDataCollection();
                    td.setC_bpartnerID(c.getString((c.getColumnIndex(KEY_COMPANY_ID))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setCountyID((c.getString((c.getColumnIndex(KEY_COUNTY_ID)))));
                    ;
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_ID))));
                    td.setLongitude(c.getString(c.getColumnIndex(KEY_LONGITUDE)));
                    td.setLatitude(c.getString(c.getColumnIndex(KEY_LATITUDE)));

                    // adding to itinerary list
                    caneCensusDataCollections.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return caneCensusDataCollections;
    }


    public long insertFarmerDetails(String countyID, String subCountyID, String companyID,
                                    String farmerName, String phoneNo, String censusID, String IDNo, String gender) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_SUB_COUNTY_ID, String.valueOf(subCountyID));
        values.put(KEY_FARMER_NAME, String.valueOf(farmerName));
        values.put(KEY_FARMER_PHONE, String.valueOf(phoneNo));
        values.put(KEY_BRAND_ID, String.valueOf(censusID));
        //  values.put(KEY_AFA_SD_Canefarmerdetails_ID, String.valueOf(companyID));

        values.put(KEY_COMPANY_ID, String.valueOf(companyID));
        values.put(KEY_COUNTY_ID, String.valueOf(countyID));
        values.put(KEY_ID_NO, String.valueOf(IDNo));
        values.put(KEY_GENDER, String.valueOf(gender));

        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyid = db.insertWithOnConflict(TABLE_FARMER, null, values, SQLiteDatabase.CONFLICT_REPLACE);

        closeDB();
        return companyid;
    }

    //end of Farmer Details


    //the start crop details

    public List<CaneCensusFarmer> getUnsentCaneCensusFarmer() {
        List<CaneCensusFarmer> caneCensusFarmerList = new ArrayList<CaneCensusFarmer>();
        String selectQuery = "SELECT  * FROM " + TABLE_FARMER + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    CaneCensusFarmer td = new CaneCensusFarmer();
                    td.setFarmerName(c.getString((c.getColumnIndex(KEY_FARMER_NAME))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setParentID(c.getString((c.getColumnIndex(KEY_BRAND_ID))));
                    td.setFarmerPhoneNo((c.getString((c.getColumnIndex(KEY_FARMER_PHONE)))));

                    td.setCountyID((c.getString(c.getColumnIndex(KEY_COUNTY_ID))));
                    td.setSubCountyID(c.getString(c.getColumnIndex(KEY_SUB_COUNTY_ID)));


                    td.setIdNo((c.getString(c.getColumnIndex(KEY_ID_NO))));
                    td.setGender(c.getString(c.getColumnIndex(KEY_GENDER)));
                    //td.setLatitude(c.getString(c.getColumnIndex(KEY_LATITUDE)));

                    // adding to itinerary list
                    caneCensusFarmerList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return caneCensusFarmerList;
    }

    public long inserCropDetails(String cropClass,
                                 String variety,
                                 String hectares,
                                 String aGEmonths,
                                 String cropVigour,
                                 String cropColour,
                                 String cropDensity,
                                 String pestsDiseaseWeeds,
                                 String expectedTCH, String parentID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_cropClass, String.valueOf(cropClass));
        values.put(KEY_variety, String.valueOf(variety));
        values.put(KEY_hectares, String.valueOf(hectares));
        values.put(KEY_aGEmonths, String.valueOf(aGEmonths));
        values.put(KEY_cropVigour, String.valueOf(cropVigour));

        values.put(KEY_cropColour, String.valueOf(pestsDiseaseWeeds));
        values.put(KEY_cropDensity, String.valueOf(cropDensity));

        values.put(KEY_pestsDiseaseWeeds, String.valueOf(pestsDiseaseWeeds));
        values.put(KEY_expectedTCH, String.valueOf(expectedTCH));

        values.put(KEY_BRAND_ID, String.valueOf(parentID));
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyid = db.insertWithOnConflict(TABLE_CROP_DETAIL, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();
        return companyid;
    }

    public List<CaneCensusCropDetails> getUnsentCaneCensusCropDetails() {
        List<CaneCensusCropDetails> caneCensusCropDetailsList = new ArrayList<CaneCensusCropDetails>();
        String selectQuery = "SELECT  * FROM " + TABLE_CROP_DETAIL + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    CaneCensusCropDetails td = new CaneCensusCropDetails();
                    td.setExpectedTCH(c.getString((c.getColumnIndex(KEY_expectedTCH))));
                    td.setPestsDiseaseWeeds(c.getString((c.getColumnIndex(KEY_pestsDiseaseWeeds))));
                    td.setAFA_SD_Canefarmerdetails_ID(c.getString((c.getColumnIndex(KEY_AFA_SD_Canefarmerdetails_ID))));
                    td.setVariety(c.getString((c.getColumnIndex(KEY_variety))));
                    td.setHectares(c.getString(c.getColumnIndex(KEY_hectares)));
                    td.setCropVigour(c.getString(c.getColumnIndex(KEY_cropVigour)));
                    td.setCropColour(c.getString(c.getColumnIndex(KEY_cropColour)));
                    td.setCropClass(c.getString(c.getColumnIndex(KEY_cropClass)));
                    td.setCropDensity(c.getString(c.getColumnIndex(KEY_cropDensity)));
                    td.setaGEmonths(c.getString(c.getColumnIndex(KEY_aGEmonths)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setParentID(c.getString(c.getColumnIndex(KEY_BRAND_ID)));

                    //td.setLatitude(c.getString(c.getColumnIndex(KEY_LATITUDE)));

                    // adding to itinerary list
                    caneCensusCropDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return caneCensusCropDetailsList;
    }


    /**
     * Deleting a itineraryshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopIDshopID
     */
    public void deleteCaneCensus(String tableName, String localID) {
        String deleteQuery = "DELETE FROM " + tableName + " WHERE " + KEY_UPLOADED + " = 'SENT' and " + KEY_ID + " =" + localID;
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_UPLOADED, "SENT");
        values.put(KEY_SHOP_ID, localID);

        // updating row
        db.execSQL(deleteQuery);

        closeDB();


    }

    public String getCaneCensusServerID(String localID, String tableName) {
        String selectQuery = "SELECT  * FROM " + tableName + " WHERE " + KEY_ID + " =" + localID;

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        CaneCensusDataCollection td = new CaneCensusDataCollection();

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {


                return c.getString((c.getColumnIndex(KEY_SERVER_ID)));


            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return null;
    }


    public boolean updateCaneCensusSent(String tableName, String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_SERVER_ID, serverRecordID);

            // updating row
            int result = db.update(tableName, values, KEY_ID + " = ?",
                    new String[]{String.valueOf(localID)});

            if (result == 0) {
                return false;
            } else {
//                db.setTransactionSuccessful();
                return true;
            }
        } finally {
            // db.endTransaction();
            closeDB();
        }
    }

    //end of the crop details
    // closing database
    public void closeDB() {
       /* db = dbHelper.getReadableDatabase();
        if (db != null && db.isOpen())
            db.close();*/
    }

    /**
     * get datetime
     */
    private String getDateTime() {
        SimpleDateFormat dateFormat = new SimpleDateFormat(
                "yyyy-MM-dd HH:mm:ss", Locale.getDefault());
        Date date = new Date();
        return dateFormat.format(date);
    }


    //Coffee Nursery Certificate Field Inspection Checklist
    // private static final String KEY_DOCUMENT_NUMBER = "document_number";
    // private static final String KEY_DOCUMENT_DATE = "document_date";
    private static final String KEY_CERTIFICATE_NO = "certificae_number";
    // private static final String KEY_NAME_OF_APPLICANT = "name_of_applicant";
    private static final String KEY_COUNTY = "county";
    private static final String KEY_COUNTYISCORRECT = "county_is_correct";
    private static final String KEY_COUNTYREMARKS = "county_remarks";
    private static final String KEY_SUB_COUNTY = "sub_county";
    private static final String KEY_SUB_COUNTYISCORRECT = "sub_county_is_correct";
    private static final String KEY_SUB_COUNTYREMARKS = "sub_county_remarks";
    private static final String KEY_LOCATION = "location";
    private static final String KEY_LOCATIONISCORRECT = "location_is_correct";
    private static final String KEY_LOCATIONREMARKS = "location_remarks";
    private static final String KEY_SUBLOCATION = "sublocation";
    private static final String KEY_SUBLOCATIONISCORRECT = "sublocation_is_correct";
    private static final String KEY_SUBLOCATIONREMARKS = "sublocation_remarks";
    private static final String KEY_VILLAGE = "village";
    private static final String KEY_VILLAGEISCORRECT = "village_is_correct";
    private static final String KEY_VILLAGEREMARKS = "village_remarks";
    private static final String KEY_TITLEDEED = "title_deeds";
    private static final String KEY_ISTITLEDEED = "is_title_deeds";
    private static final String KEY_TITLEDEEDSREMARKS = "title_deeds_remarks";
    private static final String KEY_COFFEEEACREAGE = "coffee_acreage";
    private static final String KEY_PRODUCTION = "production";
    private static final String KEY_NURSERYCATEGORY = "nursery_category";
    private static final String KEY_ISNURSERYCATEGORY = "isnursery_category";
    private static final String KEY_NURSERYCATEGORYREMARKS = "nursery_category_remarks";
    private static final String KEY_SITE_SUITABILITY = "site_suitability";
    private static final String KEY_SITE_ACCESSIBILITY = "site_accessibility";
    private static final String KEY_WATER_AVAILABILITY = "wate_availability";
    private static final String KEY_TECHNICAL_KNOW_HOW = "technical_know_how";
    private static final String KEY_ADVISORY_OFFICERS = "advisory_officers";
    private static final String KEY_GROUP_RECOMMENDATIONS = "group_reccomendations";
    private static final String KEY_IS_SELECTED = "is_selected";
    private static final String KEY_COFFEE_NURSERY_CERTIFICATE_ID = "coffe_nursery_id";
    private static final String KEY_DONE = "inspection_done";


    public static final String TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION = "coffee_nursery_certificate_inspection";

    public static final String CREATE_TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_NURSERY_CERTIFICATE_ID + " TEXT UNIQUE ,"
            + KEY_DOCUMENT_NUMBER + " TEXT UNIQUE,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_NAME_OF_APPLICANT + " TEXT ,"
            + KEY_CERTIFICATE_NO + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_COUNTY + " TEXT ,"
            + KEY_COUNTYISCORRECT + " TEXT ,"
            + KEY_COUNTYREMARKS + " TEXT ,"
            + KEY_SUB_COUNTY + " TEXT ,"
            + KEY_SUB_COUNTYISCORRECT + " TEXT ,"
            + KEY_SUB_COUNTYREMARKS + " TEXT ,"
            + KEY_LOCATION + " TEXT ,"
            + KEY_LOCATIONISCORRECT + " TEXT ,"
            + KEY_LOCATIONREMARKS + " TEXT ,"
            + KEY_SUBLOCATION + " TEXT ,"
            + KEY_SUBLOCATIONISCORRECT + " TEXT ,"
            + KEY_SUBLOCATIONREMARKS + " TEXT ,"
            + KEY_VILLAGE + " TEXT ,"
            + KEY_VILLAGEISCORRECT + " TEXT ,"
            + KEY_VILLAGEREMARKS + " TEXT ,"
            + KEY_TITLE_DEED + " TEXT ,"
            + KEY_ISTITLEDEED + " TEXT ,"
            + KEY_TITLEDEEDSREMARKS + " TEXT ,"
            + KEY_COFFEEEACREAGE + " TEXT ,"
            + KEY_PRODUCTION + " TEXT ,"
            + KEY_NURSERYCATEGORY + " TEXT ,"
            + KEY_ISNURSERYCATEGORY + " TEXT ,"
            + KEY_NURSERYCATEGORYREMARKS + " TEXT ,"
            + KEY_SITE_SUITABILITY + " TEXT ,"
            + KEY_SITE_ACCESSIBILITY + " TEXT ,"
            + KEY_WATER_AVAILABILITY + " TEXT ,"
            + KEY_TECHNICAL_KNOW_HOW + " TEXT ,"
            + KEY_ADVISORY_OFFICERS + " TEXT ,"
            + KEY_GROUP_RECOMMENDATIONS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_IS_SELECTED + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertcoffeerecords(CoffeeNursercertInsp coffeeNursercertInsp) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, coffeeNursercertInsp.getLocalID());
        values.put(KEY_COFFEE_NURSERY_CERTIFICATE_ID, coffeeNursercertInsp.getAfa_cd_inspection_id());

        values.put(KEY_DOCUMENT_NUMBER, coffeeNursercertInsp.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, coffeeNursercertInsp.getDocumentaDate());

        values.put(KEY_NAME_OF_APPLICANT, coffeeNursercertInsp.getApplicantName());

        values.put(KEY_CERTIFICATE_NO, coffeeNursercertInsp.getCertificateNumber());

        values.put(KEY_COUNTY, coffeeNursercertInsp.getCounty());

        values.put(KEY_SUB_COUNTY, coffeeNursercertInsp.getSub_county());

        values.put(KEY_LOCATION, coffeeNursercertInsp.getLocation());

        values.put(KEY_SUBLOCATION, coffeeNursercertInsp.getSub_location());

        values.put(KEY_VILLAGE, coffeeNursercertInsp.getVillage());

        values.put(KEY_TITLE_DEED, coffeeNursercertInsp.getTitleDeed());

        values.put(KEY_NURSERYCATEGORY, coffeeNursercertInsp.getNurserycategory());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_IS_SELECTED, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCoffeeRecordsStored(coffeeNursercertInsp.getAfa_cd_inspection_id())) {
            long coffeeinpsID = db.insertWithOnConflict(TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("coffeeinpsID" + coffeeinpsID);
            closeDB();
            return coffeeinpsID;
        } else {
            long coffeeinpsID = -1;
            System.out.println("coffeeinpsID" + coffeeinpsID);
            closeDB();
            return coffeeinpsID;
        }

    }

    public void deletenurseryinspections() {
        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isCoffeeRecordsStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION + " WHERE " + KEY_COFFEE_NURSERY_CERTIFICATE_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long UpdateCoffeeRecords(CoffeeNurseryCert coffeeNurseryCert) {
        System.out.println("Local id:" + coffeeNurseryCert.getLocalID());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_IS_SELECTED, "N");
            values.put(KEY_COUNTYISCORRECT, coffeeNurseryCert.getCountyIsCorrect());
            values.put(KEY_COUNTYREMARKS, coffeeNurseryCert.getCountyRemarks());
            values.put(KEY_SUB_COUNTYISCORRECT, coffeeNurseryCert.getSub_countyIsCorrect());
            values.put(KEY_SUB_COUNTYREMARKS, coffeeNurseryCert.getSub_countyRemarks());
            values.put(KEY_LOCATIONISCORRECT, coffeeNurseryCert.getLocationIsCorrect());
            values.put(KEY_LOCATIONREMARKS, coffeeNurseryCert.getLocationRemarks());
            values.put(KEY_SUBLOCATIONISCORRECT, coffeeNurseryCert.getSub_locationIsCorrect());
            values.put(KEY_SUBLOCATIONREMARKS, coffeeNurseryCert.getSub_locationRemarks());
            values.put(KEY_VILLAGEISCORRECT, coffeeNurseryCert.getVillageIsCorrect());
            values.put(KEY_VILLAGEREMARKS, coffeeNurseryCert.getVillageRemarks());
            values.put(KEY_ISTITLEDEED, coffeeNurseryCert.getTitledeedIsTitledeed());
            values.put(KEY_TITLEDEEDSREMARKS, coffeeNurseryCert.getTitledeedRemarks());
            values.put(KEY_COFFEEEACREAGE, coffeeNurseryCert.getCoffeeacreage());
            values.put(KEY_PRODUCTION, coffeeNurseryCert.getProduction());
//            values.put(KEY_NURSERYCATEGORY, coffeeNurseryCert.getNurserycategory());
            values.put(KEY_ISNURSERYCATEGORY, coffeeNurseryCert.getNaurseryCategoryIsNursery());
            values.put(KEY_NURSERYCATEGORYREMARKS, coffeeNurseryCert.getNurserycategoryRemarks());
            values.put(KEY_SITE_SUITABILITY, coffeeNurseryCert.getSiteSuitability());
            values.put(KEY_SITE_ACCESSIBILITY, coffeeNurseryCert.getSiteAccessibilty());
            values.put(KEY_WATER_AVAILABILITY, coffeeNurseryCert.getWaterAvailability());
            values.put(KEY_TECHNICAL_KNOW_HOW, coffeeNurseryCert.getTechnicalKnowHow());
            values.put(KEY_ADVISORY_OFFICERS, coffeeNurseryCert.getAdvisoryOfficers());
            values.put(KEY_GROUP_RECOMMENDATIONS, coffeeNurseryCert.getGroupReccomendations());
            values.put(KEY_OFFICER_RECOMMENDATION, coffeeNurseryCert.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, coffeeNurseryCert.getOfficerrecommendation_remark());

            result = db.update(TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION, values, "id =" + Integer.parseInt(coffeeNurseryCert.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public CoffeeNursercertInsp getCoffeeNurseryInspSelected() {
        CoffeeNursercertInsp td = new CoffeeNursercertInsp();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION + " where " + KEY_IS_SELECTED + " = " + "'Y'";

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeNursercertInsp();
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocumentaDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setCertificateNumber((c.getString((c.getColumnIndex(KEY_CERTIFICATE_NO)))));
                    td.setApplicantName((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setAfa_cd_inspection_id(c.getString(c.getColumnIndex(KEY_COFFEE_NURSERY_CERTIFICATE_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setCounty(c.getString(c.getColumnIndex(KEY_COUNTY)));
                    td.setSub_county((c.getString((c.getColumnIndex(KEY_SUB_COUNTY)))));
                    td.setLocation(c.getString((c.getColumnIndex(KEY_LOCATION))));
                    td.setSub_location((c.getString((c.getColumnIndex(KEY_SUBLOCATION)))));
                    td.setVillage(c.getString((c.getColumnIndex(KEY_VILLAGE))));
                    td.setTitleDeed(c.getString((c.getColumnIndex(KEY_TITLE_DEED))));
                    td.setNurserycategory(c.getString((c.getColumnIndex(KEY_NURSERYCATEGORY))));

                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }


        return td;
    }

    public void unselectCoffeeNurseryInsp() {
        String updateQuery = "UPDATE " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION + " SET " + KEY_IS_SELECTED + " = " + "'N'";
        db = dbHelper.getReadableDatabase();
        db.execSQL(updateQuery);
        System.out.println(updateQuery);
    }

    public void selectCoffeeNurseryInsp(String localID) {
        String updateQuery = "UPDATE " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION + " SET " + KEY_IS_SELECTED + " = " + "'Y'" + " where " + KEY_ID + " = " + localID;
        db = dbHelper.getReadableDatabase();
        db.execSQL(updateQuery);
        System.out.println(updateQuery);
    }


    public List<CoffeeNursercertInsp> getCoffeeNursercertInspList() {


        List<CoffeeNursercertInsp> coffeeNursercertInsplist = new ArrayList<CoffeeNursercertInsp>();
        CoffeeNursercertInsp td = new CoffeeNursercertInsp();

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION + " where " + KEY_INSPECTION_DONE + " = " + "'N'";

        System.out.println("Picking coffeeNursercertInsplistdata from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeNursercertInsp();
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocumentaDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setCertificateNumber((c.getString((c.getColumnIndex(KEY_CERTIFICATE_NO)))));
                    td.setApplicantName((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setAfa_cd_inspection_id(c.getString(c.getColumnIndex(KEY_COFFEE_NURSERY_CERTIFICATE_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setCounty(c.getString(c.getColumnIndex(KEY_COUNTY)));
                    td.setSub_county((c.getString((c.getColumnIndex(KEY_SUB_COUNTY)))));
                    td.setLocation(c.getString((c.getColumnIndex(KEY_LOCATION))));
                    td.setSub_location((c.getString((c.getColumnIndex(KEY_SUBLOCATION)))));
                    td.setVillage(c.getString((c.getColumnIndex(KEY_VILLAGE))));

                    // adding to itinerary list
                    coffeeNursercertInsplist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        //System.out.println("picking data from the db" + sugarMillDetailsList.size());
        return coffeeNursercertInsplist;
    }

    public void deletenurseryinspectiondata() {

        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean updateCoffeeNurseyInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public List<CoffeeNursercertInsp> getCoffeeNursercertInspDone() {

        List<CoffeeNursercertInsp> coffeeNursercertInspList = new ArrayList<CoffeeNursercertInsp>();
        CoffeeNursercertInsp td = new CoffeeNursercertInsp();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_NURSERY_CERTIFICATE_INSPECTION + " where " + KEY_INSPECTION_DONE + " = " + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeNursercertInsp();
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocumentaDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setCertificateNumber((c.getString((c.getColumnIndex(KEY_CERTIFICATE_NO)))));
                    td.setAfa_cd_inspection_id(c.getString(c.getColumnIndex(KEY_COFFEE_NURSERY_CERTIFICATE_ID)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setCountyIsCorrect(c.getString((c.getColumnIndex(KEY_COUNTYISCORRECT))));
                    td.setCountyRemarks((c.getString((c.getColumnIndex(KEY_COUNTYREMARKS)))));
                    td.setSub_countyIsCorrect((c.getString((c.getColumnIndex(KEY_SUB_COUNTYISCORRECT)))));
                    td.setSub_countyRemarks(c.getString(c.getColumnIndex(KEY_SUB_COUNTYREMARKS)));
                    td.setLocationIsCorrect(c.getString(c.getColumnIndex(KEY_LOCATIONISCORRECT)));
                    td.setLocationRemarks(c.getString((c.getColumnIndex(KEY_LOCATIONREMARKS))));
                    td.setSub_locationIsCorrect((c.getString((c.getColumnIndex(KEY_SUBLOCATIONISCORRECT)))));
                    td.setSub_locationRemarks(c.getString(c.getColumnIndex(KEY_SUBLOCATIONREMARKS)));
                    td.setVillageIsCorrect(c.getString(c.getColumnIndex(KEY_VILLAGEISCORRECT)));
                    td.setVillageRemarks(c.getString((c.getColumnIndex(KEY_VILLAGEREMARKS))));

                    td.setTitledeedIsTitledeed(c.getString(c.getColumnIndex(KEY_ISTITLEDEED)));
                    td.setTitledeedRemarks(c.getString((c.getColumnIndex(KEY_TITLEDEEDSREMARKS))));
                    td.setCoffeeacreage(c.getString(c.getColumnIndex(KEY_COFFEEEACREAGE)));
                    td.setProduction((c.getString((c.getColumnIndex(KEY_PRODUCTION)))));
                    td.setNurserycategory(c.getString(c.getColumnIndex(KEY_NURSERYCATEGORY)));
                    td.setNaurseryCategoryIsNursery(c.getString((c.getColumnIndex(KEY_ISNURSERYCATEGORY))));
                    td.setNurserycategoryRemarks(c.getString(c.getColumnIndex(KEY_NURSERYCATEGORYREMARKS)));
                    td.setSiteSuitability(c.getString((c.getColumnIndex(KEY_SITE_SUITABILITY))));
                    td.setSiteAccessibilty(c.getString(c.getColumnIndex(KEY_SITE_ACCESSIBILITY)));
                    td.setWaterAvailability(c.getString((c.getColumnIndex(KEY_WATER_AVAILABILITY))));
                    td.setTechnicalKnowHow(c.getString(c.getColumnIndex(KEY_TECHNICAL_KNOW_HOW)));
                    td.setAdvisoryOfficers((c.getString((c.getColumnIndex(KEY_ADVISORY_OFFICERS)))));
                    td.setGroupReccomendations(c.getString(c.getColumnIndex(KEY_GROUP_RECOMMENDATIONS)));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    coffeeNursercertInspList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + coffeeNursercertInspList.size());
        return coffeeNursercertInspList;
    }


    public static final String TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL = "coffee_pupling_station_lice_applic_psl";

    private static final String KEY_DATEVISITED = "date_visted";
    private static final String KEY_COFFEE_PULPING_STATION_LICE_APPLICATION_ID = "coffee_pulping_station_lice_application_id";


    //    private static final String KEY_LICENCE_NUMBER = "licence_number";
    private static final String KEY_AREA_UNDER_COFFEE = "area_under_cane";
    private static final String KEY_PULPING_MACHINE = "pulping_machine";
    private static final String KEY_APPROVED_DATE_BY_BOARD = "approved_date";
    private static final String KEY_ISSKINDRYINGTABLES = "skin_drying_tables";
    private static final String KEY_ISSKINDRYINGTABLESREMARKS = "skin_drying_tables_remarks";
    private static final String KEY_DRYINGTABLES = "drying_tables";
    private static final String KEY_DRYINGTABLESREMARKS = "drying_tables_remarks";
    private static final String KEY_FERMMENTATIONTANKS = "fermentations_tanks";
    private static final String KEY_FERMMENTATIONTANKSREMARKS = "fermentations_tanks_remarks";
    private static final String KEY_SOAKTANKS = "soak_tanks";
    private static final String KEY_SOAKTANKSREMARKS = "soak_tanks_remarks";
    private static final String KEY_PARCHMENTBUNISTORE = "parchment_buni_store";
    private static final String KEY_PARCHMENTBUNISTOREREMARKS = "parchment_buni_store_remarks";
    private static final String KEY_WASTEPOLLUTION = "waste_population";
    private static final String KEY_COFFEEADVISORYOFFICER = "coffee_advisory_officer";
    private static final String KEY_RECCOMMENDATIONSCCWG = "recommendations_from_ccwg";
    private static final String KEY_OTHERREMARKS = "other_remarks";
    // private static final String KEY_STATUS = "is_title_deeds";


    public static final String CREATE_TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_PULPING_STATION_LICE_APPLICATION_ID + " TEXT UNIQUE ,"
            + KEY_DOCUMENT_NUMBER + " TEXT UNIQUE ,"
            + KEY_DATEVISITED + " TEXT ,"
            + KEY_NAME_OF_APPLICANT + " TEXT ,"
            + KEY_LICENCE_NUMBER + " TEXT ,"
            + KEY_AREA_UNDER_COFFEE + " TEXT ,"
            + KEY_PULPING_MACHINE + " TEXT ,"
            + KEY_APPROVED_DATE_BY_BOARD + " TEXT ,"
            + KEY_ISSKINDRYINGTABLES + " TEXT ,"
            + KEY_ISSKINDRYINGTABLESREMARKS + " TEXT ,"
            + KEY_DRYINGTABLES + " TEXT ,"
            + KEY_DRYINGTABLESREMARKS + " TEXT ,"
            + KEY_FERMMENTATIONTANKS + " TEXT ,"
            + KEY_FERMMENTATIONTANKSREMARKS + " TEXT ,"
            + KEY_SOAKTANKS + " TEXT ,"
            + KEY_SOAKTANKSREMARKS + " TEXT ,"
            + KEY_PARCHMENTBUNISTORE + " TEXT ,"
            + KEY_PARCHMENTBUNISTOREREMARKS + " TEXT ,"
            + KEY_WASTEPOLLUTION + " TEXT ,"
            + KEY_COFFEE_ADVISORY_OFFICER + " TEXT ,"
            + KEY_RECCOMMENDATIONSCCWG + " TEXT ,"
            + KEY_OTHERREMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_STATUS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertcoffeePulpingPSLrecords(CoffeePulpinglicenceApllPSL coffeePulpinglicenceApllPSL) {
        System.out.println("AFA_td_teapacker_id:" + coffeePulpinglicenceApllPSL.getAfa_cd_PSL_id());
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, coffeePulpinglicenceApllPSL.getLocalID());
        values.put(KEY_COFFEE_PULPING_STATION_LICE_APPLICATION_ID, coffeePulpinglicenceApllPSL.getAfa_cd_PSL_id());
        values.put(KEY_DOCUMENT_NUMBER, coffeePulpinglicenceApllPSL.getDocument_number());
        values.put(KEY_DATEVISITED, coffeePulpinglicenceApllPSL.getVisited_date());
        values.put(KEY_NAME_OF_APPLICANT, coffeePulpinglicenceApllPSL.getName_of_applicant());
        values.put(KEY_AREA_UNDER_COFFEE, coffeePulpinglicenceApllPSL.getAreaUnderCoffee());
        values.put(KEY_PULPING_MACHINE, coffeePulpinglicenceApllPSL.getPulpingMachine());
        values.put(KEY_APPROVED_DATE_BY_BOARD, coffeePulpinglicenceApllPSL.getDateApprovedByTheBoard());
        values.put(KEY_LICENCE_NUMBER, coffeePulpinglicenceApllPSL.getLicence_number());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");
        // insert row
        if (!isCoffeePulpingPSLStored(coffeePulpinglicenceApllPSL.getAfa_cd_PSL_id())) {
            long pslID = db.insertWithOnConflict(TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("pslID" + pslID);
            //closeDB();
            closeDB();
            return pslID;
        } else {
            long pslID = -1;
            System.out.println("pslID" + pslID);
            //closeDB();
            closeDB();
            return pslID;
        }

    }

    public void deletecoffeePulpingPSLrecords() {
        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isCoffeePulpingPSLStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL + " WHERE " + KEY_COFFEE_PULPING_STATION_LICE_APPLICATION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCoffeePulpingPSLSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long updateCoffeePSLLicenceAppPSL(CoffeePulpingStationPSL coffeePulpingStationPSL) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {


            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_AREA_UNDER_COFFEE, coffeePulpingStationPSL.getAreaUnderCoffee());
            values.put(KEY_PULPING_MACHINE, coffeePulpingStationPSL.getPulpingMachine());
            values.put(KEY_ISSKINDRYINGTABLES, coffeePulpingStationPSL.getIsSkinDryingTable());
            values.put(KEY_ISSKINDRYINGTABLESREMARKS, coffeePulpingStationPSL.getSkinDryingTableremarks());
            values.put(KEY_DRYINGTABLES, coffeePulpingStationPSL.getIsDryingTable());
            values.put(KEY_DRYINGTABLESREMARKS, coffeePulpingStationPSL.getDryingTableremarks());
            values.put(KEY_FERMMENTATIONTANKS, coffeePulpingStationPSL.getIsFarmentationTable());
            values.put(KEY_FERMMENTATIONTANKSREMARKS, coffeePulpingStationPSL.getFarmentationTableremarks());
            values.put(KEY_SOAKTANKS, coffeePulpingStationPSL.getIsSoaktanks());
            values.put(KEY_SOAKTANKSREMARKS, coffeePulpingStationPSL.getSoakTanksremarks());
            values.put(KEY_PARCHMENTBUNISTORE, coffeePulpingStationPSL.getIsParcmentBuniStore());
            values.put(KEY_PARCHMENTBUNISTOREREMARKS, coffeePulpingStationPSL.getParcmentBuniStoreremarks());
            values.put(KEY_WASTEPOLLUTION, coffeePulpingStationPSL.getWasteAndPollutionsremarks());
            values.put(KEY_COFFEE_ADVISORY_OFFICER, coffeePulpingStationPSL.getCoffeeAdvisoryOfficers());
            values.put(KEY_RECCOMMENDATIONSCCWG, coffeePulpingStationPSL.getReccommendationsFromCOWG());
            values.put(KEY_OTHERREMARKS, coffeePulpingStationPSL.getOthersRemrks());
            values.put(KEY_OFFICER_RECOMMENDATION, coffeePulpingStationPSL.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, coffeePulpingStationPSL.getOfficerrecommendation_remark());
            values.put(KEY_STATUS, coffeePulpingStationPSL.getStatus());

            result = db.update(TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL, values, "id =" + Integer.parseInt(coffeePulpingStationPSL.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<CoffeePulpinglicenceApllPSL> getCoffeePulpinglicenceApllPSL() {

        List<CoffeePulpinglicenceApllPSL> coffeePulpinglicenceApllPSLlist = new ArrayList<CoffeePulpinglicenceApllPSL>();
        CoffeePulpinglicenceApllPSL td = new CoffeePulpinglicenceApllPSL();
        // td.setName("- Required -");
        //String selectQuery = "SELECT  * FROM " + TABLE_SUGAR_MILL + " where "+KEY_INSPECTION_DONE+" =" +"'N'";
        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL + " where " + KEY_INSPECTION_DONE + " =" + "'N'";


        //System.out.println(selectQuery.toString());
        System.out.println("Picking Coffee Pulping Licence PSL data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeePulpinglicenceApllPSL();
                    td.setAfa_cd_PSL_id(c.getString((c.getColumnIndex(KEY_COFFEE_PULPING_STATION_LICE_APPLICATION_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setVisited_date((c.getString((c.getColumnIndex(KEY_DATEVISITED)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setDateApprovedByTheBoard((c.getString((c.getColumnIndex(KEY_APPROVED_DATE_BY_BOARD)))));
                    td.setLicence_number((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setPulpingMachine(c.getString(c.getColumnIndex(KEY_PULPING_MACHINE)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAreaUnderCoffee(c.getString(c.getColumnIndex(KEY_AREA_UNDER_COFFEE)));
                    td.setIsSkinDryingTable(c.getString((c.getColumnIndex(KEY_ISSKINDRYINGTABLES))));
                    td.setSkinDryingTableremarks((c.getString((c.getColumnIndex(KEY_ISSKINDRYINGTABLESREMARKS)))));
                    td.setIsDryingTable((c.getString((c.getColumnIndex(KEY_DRYINGTABLES)))));
                    td.setDryingTableremarks((c.getString((c.getColumnIndex(KEY_DRYINGTABLESREMARKS)))));
                    td.setIsFarmentationTable(c.getString(c.getColumnIndex(KEY_FERMMENTATIONTANKS)));
                    td.setFarmentationTableremarks(c.getString((c.getColumnIndex(KEY_FERMMENTATIONTANKSREMARKS))));
                    td.setIsSoaktanks(c.getString(c.getColumnIndex(KEY_SOAKTANKS)));
                    td.setSoakTanksremarks(c.getString((c.getColumnIndex(KEY_SOAKTANKSREMARKS))));
                    td.setIsParcmentBuniStore((c.getString((c.getColumnIndex(KEY_PARCHMENTBUNISTORE)))));
                    td.setParcmentBuniStoreremarks((c.getString((c.getColumnIndex(KEY_PARCHMENTBUNISTOREREMARKS)))));
                    td.setWasteAndPollutionsremarks(c.getString(c.getColumnIndex(KEY_WASTEPOLLUTION)));
                    td.setCoffeeAdvisoryOfficers(c.getString((c.getColumnIndex(KEY_COFFEE_ADVISORY_OFFICER))));
                    td.setReccommendationsFromCOWG(c.getString(c.getColumnIndex(KEY_RECCOMMENDATIONSCCWG)));
                    td.setOthersRemrks(c.getString(c.getColumnIndex(KEY_OTHERREMARKS)));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setStatus(c.getString((c.getColumnIndex(KEY_STATUS))));


                    // adding to itinerary list
                    coffeePulpinglicenceApllPSLlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        //System.out.println("picking data from the db" + sugarMillDetailsList.size());
        return coffeePulpinglicenceApllPSLlist;
    }

    public List<CoffeePulpinglicenceApllPSL> getCoffeePulpinglicenceApllPSLDone() {

        List<CoffeePulpinglicenceApllPSL> coffeePulpinglicenceApllPSLList = new ArrayList<CoffeePulpinglicenceApllPSL>();
        CoffeePulpinglicenceApllPSL td = new CoffeePulpinglicenceApllPSL();
        // td.setName("- Required -");
        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_PULPING_STATION_LICE_APPLICATION_PSL + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeePulpinglicenceApllPSL();
                    td.setAfa_cd_PSL_id(c.getString((c.getColumnIndex(KEY_COFFEE_PULPING_STATION_LICE_APPLICATION_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setVisited_date((c.getString((c.getColumnIndex(KEY_DATEVISITED)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setDateApprovedByTheBoard((c.getString((c.getColumnIndex(KEY_APPROVED_DATE_BY_BOARD)))));
                    td.setLicence_number((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setPulpingMachine(c.getString(c.getColumnIndex(KEY_PULPING_MACHINE)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAreaUnderCoffee(c.getString(c.getColumnIndex(KEY_AREA_UNDER_COFFEE)));
                    td.setIsSkinDryingTable(c.getString((c.getColumnIndex(KEY_ISSKINDRYINGTABLES))));
                    td.setSkinDryingTableremarks((c.getString((c.getColumnIndex(KEY_ISSKINDRYINGTABLESREMARKS)))));
                    td.setIsDryingTable((c.getString((c.getColumnIndex(KEY_DRYINGTABLES)))));
                    td.setDryingTableremarks((c.getString((c.getColumnIndex(KEY_DRYINGTABLESREMARKS)))));
                    td.setIsFarmentationTable(c.getString(c.getColumnIndex(KEY_FERMMENTATIONTANKS)));
                    td.setFarmentationTableremarks(c.getString((c.getColumnIndex(KEY_FERMMENTATIONTANKSREMARKS))));
                    td.setIsSoaktanks(c.getString(c.getColumnIndex(KEY_SOAKTANKS)));
                    td.setSoakTanksremarks(c.getString((c.getColumnIndex(KEY_SOAKTANKSREMARKS))));
                    td.setIsParcmentBuniStore((c.getString((c.getColumnIndex(KEY_PARCHMENTBUNISTORE)))));
                    td.setParcmentBuniStoreremarks((c.getString((c.getColumnIndex(KEY_PARCHMENTBUNISTOREREMARKS)))));
                    td.setWasteAndPollutionsremarks(c.getString(c.getColumnIndex(KEY_WASTEPOLLUTION)));
                    td.setCoffeeAdvisoryOfficers(c.getString((c.getColumnIndex(KEY_COFFEE_ADVISORY_OFFICER))));
                    td.setReccommendationsFromCOWG(c.getString(c.getColumnIndex(KEY_RECCOMMENDATIONSCCWG)));
                    td.setOthersRemrks(c.getString(c.getColumnIndex(KEY_OTHERREMARKS)));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setStatus(c.getString((c.getColumnIndex(KEY_STATUS))));


                    coffeePulpinglicenceApllPSLList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking psl data from the db" + coffeePulpinglicenceApllPSLList.size());
        return coffeePulpinglicenceApllPSLList;
    }


    public static final String TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST = "coffee_management_agent_checklist";

    private static final String KEY_COFFEE_MANGEMENT_AGENT_CHECKLIST_ID = "coffee_mangement_agent_checklist_id";
    private static final String KEY_MANAGEMENT_PERFORMANCE = "management_performance";
    private static final String KEY_PRINCIPAL_OFFICE = "principal_office";
    private static final String KEY_FINANCIAL_POSITION = "financial_position";
    private static final String KEY_RELEVANT_EQUIPMENT = "relevant_equipment";
    private static final String KEY_SERVICES = "services";
    private static final String KEY_DOCSTATUS = "doc_status";

    public static final String CREATE_TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_MANGEMENT_AGENT_CHECKLIST_ID + " TEXT UNIQUE ,"
            + KEY_DOCUMENT_NUMBER + " TEXT UNIQUE ,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_NAME_OF_APPLICANT + " TEXT ,"
            + KEY_PRINCIPAL_OFFICE + " TEXT ,"
            + KEY_LICENCE_NUMBER + " TEXT ,"
            + KEY_MANAGEMENT_PERFORMANCE + " TEXT ,"
            + KEY_FINANCIAL_POSITION + " TEXT ,"
            + KEY_RELEVANT_EQUIPMENT + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_SERVICES + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_DOC_STATUS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertcoffeeManagementAgentrecords(CoffeeManagementAgentInsp coffeeManagementAgentInsp) {
        System.out.println("AFA_CD_Mgtagentchcklist_ID_Coffee:" + coffeeManagementAgentInsp.getAFA_CD_Mgtagentchcklist_ID_Coffee());
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, coffeeManagementAgentInsp.getLocalID());
        values.put(KEY_COFFEE_MANGEMENT_AGENT_CHECKLIST_ID, coffeeManagementAgentInsp.getAFA_CD_Mgtagentchcklist_ID_Coffee());
        values.put(KEY_DOCUMENT_NUMBER, coffeeManagementAgentInsp.getDocumnet_number());
        values.put(KEY_DOCUMENT_DATE, coffeeManagementAgentInsp.getDocument_date());
        values.put(KEY_NAME_OF_APPLICANT, coffeeManagementAgentInsp.getC_BPartner_ID());
        values.put(KEY_LICENCE_NUMBER, coffeeManagementAgentInsp.getLicence_no());
        values.put(KEY_PRINCIPAL_OFFICE, coffeeManagementAgentInsp.getPrincipal_office());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCoffeeManagementAgentStored(coffeeManagementAgentInsp.getAFA_CD_Mgtagentchcklist_ID_Coffee())) {
            long pslID = db.insertWithOnConflict(TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("sugarMillID" + pslID);
            //closeDB();
            closeDB();
            return pslID;
        } else {
            long pslID = -1;
            System.out.println("sugarMillID" + pslID);
            //closeDB();
            closeDB();
            return pslID;
        }

    }

    public void deletecoffeeManagementAgentrecords() {
        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isCoffeeManagementAgentStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST + " WHERE " + KEY_COFFEE_MANGEMENT_AGENT_CHECKLIST_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCoffeeManagementAgentrecordsSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long updateCoffeeManagementAgent(CoffeeManagementAgent coffeeManagementAgent) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {


            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_MANAGEMENT_PERFORMANCE, coffeeManagementAgent.getManagementPerformanceProf());
            values.put(KEY_FINANCIAL_POSITION, coffeeManagementAgent.getFinancialPosition());
            values.put(KEY_RELEVANT_EQUIPMENT, coffeeManagementAgent.getRelevantEquipments());
            values.put(KEY_SERVICES, coffeeManagementAgent.getServices());
            values.put(KEY_OFFICER_RECOMMENDATION, coffeeManagementAgent.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, coffeeManagementAgent.getOfficerrecommendation_remark());
            values.put(KEY_DOC_STATUS, coffeeManagementAgent.getStatus());


            result = db.update(TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST, values, "id =" + Integer.parseInt(coffeeManagementAgent.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<CoffeeManagementAgentInsp> getcoffeeManagementAgent() {

        List<CoffeeManagementAgentInsp> coffeeManagementAgentInsplist = new ArrayList<CoffeeManagementAgentInsp>();
        CoffeeManagementAgentInsp td = new CoffeeManagementAgentInsp();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST + " where " + KEY_INSPECTION_DONE + " =" + "'N'";


        //System.out.println(selectQuery.toString());
        System.out.println("Picking COFFEE_MANGEMENT_AGENT data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeManagementAgentInsp();
                    td.setDocumnet_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setAFA_CD_Mgtagentchcklist_ID_Coffee(c.getString((c.getColumnIndex(KEY_COFFEE_MANGEMENT_AGENT_CHECKLIST_ID))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setC_BPartner_ID((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setLicence_no((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setPrincipal_office(c.getString(c.getColumnIndex(KEY_PRINCIPAL_OFFICE)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setManagementPerformanceProf(c.getString(c.getColumnIndex(KEY_MANAGEMENT_PERFORMANCE)));
                    td.setFinancialPosition(c.getString((c.getColumnIndex(KEY_FINANCIAL_POSITION))));
                    td.setRelevantEquipments((c.getString((c.getColumnIndex(KEY_RELEVANT_EQUIPMENT)))));
                    td.setServices((c.getString((c.getColumnIndex(KEY_SERVICES)))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setStatus((c.getString((c.getColumnIndex(KEY_DOC_STATUS)))));


                    // adding to itinerary list
                    coffeeManagementAgentInsplist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + coffeeManagementAgentInsplist.size());
        return coffeeManagementAgentInsplist;
    }

    public List<CoffeeManagementAgentInsp> getCoffeeManagementAgentInspDone() {

        List<CoffeeManagementAgentInsp> coffeeManagementAgentInspList = new ArrayList<CoffeeManagementAgentInsp>();
        CoffeeManagementAgentInsp td = new CoffeeManagementAgentInsp();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_MANGEMENT_AGENT_CHECKLIST + " where " + KEY_INSPECTION_DONE + " = 'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeManagementAgentInsp();
                    td.setDocumnet_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setAFA_CD_Mgtagentchcklist_ID_Coffee(c.getString((c.getColumnIndex(KEY_COFFEE_MANGEMENT_AGENT_CHECKLIST_ID))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setC_BPartner_ID((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setLicence_no((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setPrincipal_office(c.getString(c.getColumnIndex(KEY_PRINCIPAL_OFFICE)));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setManagementPerformanceProf(c.getString(c.getColumnIndex(KEY_MANAGEMENT_PERFORMANCE)));
                    td.setFinancialPosition(c.getString((c.getColumnIndex(KEY_FINANCIAL_POSITION))));
                    td.setRelevantEquipments((c.getString((c.getColumnIndex(KEY_RELEVANT_EQUIPMENT)))));
                    td.setServices((c.getString((c.getColumnIndex(KEY_SERVICES)))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setStatus((c.getString((c.getColumnIndex(KEY_DOC_STATUS)))));


                    coffeeManagementAgentInspList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + coffeeManagementAgentInspList.size());
        return coffeeManagementAgentInspList;
    }


    // coffee_commercial_marketing_agent_checklist
    public static final String TABLE_COFFEE_COMMERCIAL_MARKET_AGENT = "coffee_commercial_market_agent";

    private static final String KEY_ISMARKINGSCLEAR = "is_marking_clear";
    private static final String KEY_MARKINGSCLEARREMARKS = "is_marking_clear_remarks";
    private static final String KEY_ISCOFFEELICENCEVALID = "is_licence_valid";
    private static final String KEY_COFFEELICENCEVALIDREMARKS = "is_licence_valid_remarks";
    private static final String KEY_ISSINGLEBUSINESSPEERMIT = "is_single_business_permit";
    private static final String KEY_SINGLEBUSINESSPEERMITREMARKS = "is_single_business_permit_remarks";
    private static final String KEY_ISWASTEDISPOSALSYSTEMINPLACE = "is_wasted_disposal_system_in_place";
    private static final String KEY_WASTEDISPOSALREMARKS = "is_wasted_disposal_system_in_place_remarks";
    private static final String KEY_ISFIREFIGHTINGEQUIPMENT = "is_fire_fighting_equipment_in_place";
    private static final String KEY_FIREFIGHTINGEQUIPMENTREMARKS = "is_fire_fighting_equipment_in_place_remarks";
    private static final String KEY_ISGENERALHYGIENE = "is_general_hygiene";
    private static final String KEY_GENERALHYGIENEREMARKS = "is_general_hygiene_remarks";
    private static final String KEY_ISWASHINGROOMSCLEAN = "is_washing_rooms_clean";
    private static final String KEY_WASHINGROOMSCLEAN = "is_washing_rooms_clean_remarks";
    private static final String KEY_ISCLEANWATERSUPPLIED = "is_clean_waste_sup";
    private static final String KEY_CLEANWATERSUPPLIEDREMARKS = "is_clean_waste_sup_remarks";
    private static final String KEY_ISELECTRICIYSUPPLIED = "is_electricity_supplied";
    private static final String KEY_ELECTRICIYSUPPLIEDREMARKS = "is_electricity_supplied_remarks";
    private static final String KEY_ISRETUNSREMMITTED = "is_rtuens_remmitted";
    private static final String KEY_RETUNSREMMITTEDREMARKS = "is_rtuens_remmitted_remarks";
    private static final String KEY_ISTRACEABILITYSYSTEMINPLACE = "is_traceability_system";
    private static final String KEY_TRACEABILITYSYSTEMINPLACEREMARKS = "is_traceability_system_remarks";
    private static final String KEY_ISCUPPINGFACILITIES = "is_cupping_facilities";
    private static final String KEY_CUPPINGFACILITIESREMARKS = "is_cupping_facilities_remarks";
    private static final String KEY_ISOCCUPATIONANDHEALTH = "is_occupation_and_health";
    private static final String KEY_OCCUPATIONANDHEALTHREMARKS = "is_occupation_and_health_remarks";
    private static final String KEY_ISPAYMENTTOGROWERS = "is_payment_growers";
    private static final String KEY_PAYMENTTOGROWERSREMARKS = "is_payment_growers_remarks";
    private static final String KEY_ISSTANDARDOUTTURN = "is_standard_out_turn";
    private static final String KEY_STANDARDOUTTURNREMARKS = "is_standard_out_turn_Remarks";
    private static final String KEY_ISSTANDARDDIRECTSALES = "is_standards_direct_sales";
    private static final String KEY_STANDARDDIRECTSALESREMARKS = "is_standards_direct_sales_remarks";
    private static final String KEY_COFFEE_COMMERCIAL_MARKET_AGENT_ID = "commercial_marketing_agent_id";


    public static final String CREATE_TABLE_COFFEE_COMMERCIAL_MARKET_AGENT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_COFFEE_COMMERCIAL_MARKET_AGENT + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_COMMERCIAL_MARKET_AGENT_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_LICENCE_NUMBER + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_ISMARKINGSCLEAR + " TEXT ,"
            + KEY_MARKINGSCLEARREMARKS + " TEXT ,"
            + KEY_ISCOFFEELICENCEVALID + " TEXT ,"
            + KEY_COFFEELICENCEVALIDREMARKS + " TEXT ,"
            + KEY_ISSINGLEBUSINESSPEERMIT + " TEXT ,"
            + KEY_SINGLEBUSINESSPEERMITREMARKS + " TEXT ,"
            + KEY_ISWASTEDISPOSAL + " TEXT ,"
            + KEY_WASTEDISPOSALREMARKS + " TEXT ,"
            + KEY_ISFIREFIGHTINGEQUIPMENT + " TEXT ,"
            + KEY_FIREFIGHTINGEQUIPMENTREMARKS + " TEXT ,"
            + KEY_ISGENERALHYGIENE + " TEXT ,"
            + KEY_GENERALHYGIENEREMARKS + " TEXT ,"
            + KEY_ISWASHINGROOMSCLEAN + " TEXT ,"
            + KEY_WASHINGROOMSCLEAN + " TEXT ,"
            + KEY_ISCLEANWATERSUPPLIED + " TEXT ,"
            + KEY_CLEANWATERSUPPLIEDREMARKS + " TEXT ,"
            + KEY_ISELECTRICIYSUPPLIED + " TEXT ,"
            + KEY_ELECTRICIYSUPPLIEDREMARKS + " TEXT ,"
            + KEY_ISRETUNSREMMITTED + " TEXT ,"
            + KEY_RETUNSREMMITTEDREMARKS + " TEXT ,"
            + KEY_ISTRACEABILITYSYSTEMINPLACE + " TEXT ,"
            + KEY_TRACEABILITYSYSTEMINPLACEREMARKS + " TEXT ,"
            + KEY_ISCUPPINGFACILITIES + " TEXT ,"
            + KEY_CUPPINGFACILITIESREMARKS + " TEXT ,"
            + KEY_ISOCCUPATIONANDHEALTH + " TEXT ,"
            + KEY_OCCUPATIONANDHEALTHREMARKS + " TEXT ,"
            + KEY_ISPAYMENTTOGROWERS + " TEXT ,"
            + KEY_PAYMENTTOGROWERSREMARKS + " TEXT ,"
            + KEY_ISSTANDARDOUTTURN + " TEXT ,"
            + KEY_STANDARDOUTTURNREMARKS + " TEXT ,"
            + KEY_ISSTANDARDDIRECTSALES + " TEXT ,"
            + KEY_STANDARDDIRECTSALESREMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_DOCUMENT_STATUS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertCoffeeCommercialAgentrecords(CoffeeCommercialAgent coffeeCommercialAgent) {
        System.out.println("AFA_cd_commercial_id:" + coffeeCommercialAgent.getAfa_cd_Coffee_Commercial_mkt_Agent_id());
        System.out.println("getDocument_number:" + coffeeCommercialAgent.getDocument_number());
        System.out.println("getDocument_date:" + coffeeCommercialAgent.getDocument_date());
        System.out.println("getLicence_number:" + coffeeCommercialAgent.getLicence_number());
        System.out.println("getName_of_applicant:" + coffeeCommercialAgent.getName_of_applicant());

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, coffeeCommercialAgent.getLocalID());
        values.put(KEY_COFFEE_COMMERCIAL_MARKET_AGENT_ID, coffeeCommercialAgent.getAfa_cd_Coffee_Commercial_mkt_Agent_id());

        values.put(KEY_DOCUMENT_NUMBER, coffeeCommercialAgent.getDocument_number());

        values.put(KEY_DOCUMENT_DATE, coffeeCommercialAgent.getDocument_date());

        values.put(KEY_LICENCE_NUMBER, coffeeCommercialAgent.getLicence_number());

        values.put(KEY_NAME_OF_APPLICANT, coffeeCommercialAgent.getName_of_applicant());

        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCoffeeCommercialAgentStored(coffeeCommercialAgent.getAfa_cd_Coffee_Commercial_mkt_Agent_id())) {
            long commercialagentID = db.insertWithOnConflict(TABLE_COFFEE_COMMERCIAL_MARKET_AGENT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("commercialagentID" + commercialagentID);
            //closeDB();
            closeDB();
            return commercialagentID;
        } else {
            long commercialagentID = -1;
            System.out.println("commercialagentID" + commercialagentID);
            //closeDB();
            closeDB();
            return commercialagentID;
        }

    }

    public boolean isCoffeeCommercialAgentStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_COFFEE_COMMERCIAL_MARKET_AGENT + " WHERE " + KEY_COFFEE_COMMERCIAL_MARKET_AGENT_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCoffeeCommercialAgentSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_COFFEE_COMMERCIAL_MARKET_AGENT, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long UpdateCommercialMarketingAgents(CoffeeCommercialMarketingAgent coffeeCommercialMarketingAgent) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_ISMARKINGSCLEAR, coffeeCommercialMarketingAgent.getIsmarkingClear());
            values.put(KEY_MARKINGSCLEARREMARKS, coffeeCommercialMarketingAgent.getMarkingClearRemarks());
            values.put(KEY_ISCOFFEELICENCEVALID, coffeeCommercialMarketingAgent.getIscoffeeLicenceValid());
            values.put(KEY_COFFEELICENCEVALIDREMARKS, coffeeCommercialMarketingAgent.getCoffeeLicenceValidRemarks());
            values.put(KEY_ISSINGLEBUSINESSPEERMIT, coffeeCommercialMarketingAgent.getIssingleBusinessPermit());
            values.put(KEY_SINGLEBUSINESSPEERMITREMARKS, coffeeCommercialMarketingAgent.getSingleBusinessPermitRemarks());
            values.put(KEY_ISWASTEDISPOSAL, coffeeCommercialMarketingAgent.getIswasteDisposalsystem());
            values.put(KEY_WASTEDISPOSALREMARKS, coffeeCommercialMarketingAgent.getWasteDisposalsystemRemarks());
            values.put(KEY_ISFIREFIGHTINGEQUIPMENT, coffeeCommercialMarketingAgent.getIsfireFightingEquipments());
            values.put(KEY_FIREFIGHTINGEQUIPMENTREMARKS, coffeeCommercialMarketingAgent.getFireFightingEquipmentsRemarks());
            values.put(KEY_ISGENERALHYGIENE, coffeeCommercialMarketingAgent.getIsgeneralhygienes());
            values.put(KEY_GENERALHYGIENEREMARKS, coffeeCommercialMarketingAgent.getGeneralhygienesRemarks());
            values.put(KEY_ISWASHINGROOMSCLEAN, coffeeCommercialMarketingAgent.getIswashingrRooms());
            values.put(KEY_WASHINGROOMSCLEAN, coffeeCommercialMarketingAgent.getWashingrRoomsRemarks());
            values.put(KEY_ISCLEANWATERSUPPLIED, coffeeCommercialMarketingAgent.getIscleanWaterSupplied());
            values.put(KEY_CLEANWATERSUPPLIEDREMARKS, coffeeCommercialMarketingAgent.getCleanWaterSuppliedRemarks());
            values.put(KEY_ISELECTRICIYSUPPLIED, coffeeCommercialMarketingAgent.getIselectricity());
            values.put(KEY_ELECTRICIYSUPPLIEDREMARKS, coffeeCommercialMarketingAgent.getElectricityRemarks());
            values.put(KEY_ISRETUNSREMMITTED, coffeeCommercialMarketingAgent.getIsreturnsRemitted());
            values.put(KEY_RETUNSREMMITTEDREMARKS, coffeeCommercialMarketingAgent.getReturnsRemittedRemarks());
            values.put(KEY_ISTRACEABILITYSYSTEMINPLACE, coffeeCommercialMarketingAgent.getIstraceabilitySystem());
            values.put(KEY_TRACEABILITYSYSTEMINPLACEREMARKS, coffeeCommercialMarketingAgent.getTraceabilitySystemRemarks());
            values.put(KEY_ISCUPPINGFACILITIES, coffeeCommercialMarketingAgent.getIsoccupationalAndHealthAct());
            values.put(KEY_CUPPINGFACILITIESREMARKS, coffeeCommercialMarketingAgent.getCuppingFacilitiesRemarks());
            values.put(KEY_ISOCCUPATIONANDHEALTH, coffeeCommercialMarketingAgent.getIsoccupationalAndHealthAct());
            values.put(KEY_OCCUPATIONANDHEALTHREMARKS, coffeeCommercialMarketingAgent.getOccupationalAndHealthActRemarks());
            values.put(KEY_ISPAYMENTTOGROWERS, coffeeCommercialMarketingAgent.getIspaymentToGrowers());
            values.put(KEY_PAYMENTTOGROWERSREMARKS, coffeeCommercialMarketingAgent.getPaymentToGrowersRemarks());

            values.put(KEY_ISSTANDARDOUTTURN, coffeeCommercialMarketingAgent.getIsstarndardOutTurnSales());
            values.put(KEY_STANDARDOUTTURNREMARKS, coffeeCommercialMarketingAgent.getStarndardOutTurnSalesRemarks());
            values.put(KEY_ISSTANDARDDIRECTSALES, coffeeCommercialMarketingAgent.getIsstandardDirect());
            values.put(KEY_STANDARDDIRECTSALESREMARKS, coffeeCommercialMarketingAgent.getStandardDirectRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, coffeeCommercialMarketingAgent.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, coffeeCommercialMarketingAgent.getOfficerrecommendation_remark());


            result = db.update(TABLE_COFFEE_COMMERCIAL_MARKET_AGENT, values, "id =" + Integer.parseInt(coffeeCommercialMarketingAgent.getLocalID()), null);
            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<CoffeeCommercialAgent> getCoffeeCommercialAgent() {

        List<CoffeeCommercialAgent> coffeeCommercialAgentlist = new ArrayList<CoffeeCommercialAgent>();
        CoffeeCommercialAgent td = new CoffeeCommercialAgent();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_COMMERCIAL_MARKET_AGENT + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Coffee Commercial Marketing Agent data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeCommercialAgent();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));

                    td.setAfa_cd_Coffee_Commercial_mkt_Agent_id(c.getString((c.getColumnIndex(KEY_COFFEE_COMMERCIAL_MARKET_AGENT_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setLicence_number((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));

                    // adding to itinerary list
                    coffeeCommercialAgentlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + coffeeCommercialAgentlist.size());
        return coffeeCommercialAgentlist;
    }

    public List<CoffeeCommercialAgent> getCoffeeCommercialAgentDone() {

        List<CoffeeCommercialAgent> coffeeCommercialAgentList = new ArrayList<CoffeeCommercialAgent>();
        CoffeeCommercialAgent td = new CoffeeCommercialAgent();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_COFFEE_COMMERCIAL_MARKET_AGENT + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CoffeeCommercialAgent();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAfa_cd_Coffee_Commercial_mkt_Agent_id(c.getString((c.getColumnIndex(KEY_COFFEE_COMMERCIAL_MARKET_AGENT_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setLicence_number((c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER)))));
                    td.setIsmarkingClear(c.getString(c.getColumnIndex(KEY_ISMARKINGSCLEAR)));
                    td.setMarkingClearRemarks(c.getString((c.getColumnIndex(KEY_MARKINGSCLEARREMARKS))));
                    td.setIscoffeeLicenceValid((c.getString((c.getColumnIndex(KEY_ISCOFFEELICENCEVALID)))));
                    td.setCoffeeLicenceValidRemarks((c.getString((c.getColumnIndex(KEY_COFFEELICENCEVALIDREMARKS)))));
                    td.setIssingleBusinessPermit((c.getString((c.getColumnIndex(KEY_ISSINGLEBUSINESSPEERMIT)))));
                    td.setSingleBusinessPermitRemarks(c.getString(c.getColumnIndex(KEY_SINGLEBUSINESSPEERMITREMARKS)));
                    td.setIswasteDisposalsystem((c.getString((c.getColumnIndex(KEY_ISWASTEDISPOSAL)))));
                    td.setWasteDisposalsystemRemarks(c.getString(c.getColumnIndex(KEY_WASTEDISPOSALREMARKS)));
                    td.setIsfireFightingEquipments(c.getString((c.getColumnIndex(KEY_ISFIREFIGHTINGEQUIPMENT))));
                    td.setFireFightingEquipmentsRemarks((c.getString((c.getColumnIndex(KEY_FIREFIGHTINGEQUIPMENTREMARKS)))));
                    td.setIsgeneralhygienes((c.getString((c.getColumnIndex(KEY_ISGENERALHYGIENE)))));
                    td.setGeneralhygienesRemarks((c.getString((c.getColumnIndex(KEY_GENERALHYGIENEREMARKS)))));
                    td.setIswashingrRooms(c.getString(c.getColumnIndex(KEY_ISWASHINGROOMSCLEAN)));
                    td.setWashingrRoomsRemarks(c.getString((c.getColumnIndex(KEY_WASHINGROOMSCLEAN))));
                    td.setIscleanWaterSupplied((c.getString((c.getColumnIndex(KEY_ISCLEANWATERSUPPLIED)))));
                    td.setCleanWaterSuppliedRemarks((c.getString((c.getColumnIndex(KEY_CLEANWATERSUPPLIEDREMARKS)))));
                    td.setIselectricity((c.getString((c.getColumnIndex(KEY_ISELECTRICIYSUPPLIED)))));
                    td.setElectricityRemarks((c.getString((c.getColumnIndex(KEY_ELECTRICIYSUPPLIEDREMARKS)))));
                    td.setIsreturnsRemitted(c.getString((c.getColumnIndex(KEY_ISRETUNSREMMITTED))));
                    td.setReturnsRemittedRemarks((c.getString((c.getColumnIndex(KEY_RETUNSREMMITTEDREMARKS)))));
                    td.setIstraceabilitySystem(c.getString(c.getColumnIndex(KEY_ISTRACEABILITYSYSTEMINPLACE)));
                    td.setTraceabilitySystemRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITYSYSTEMINPLACEREMARKS))));
                    td.setIscuppingFacilities((c.getString((c.getColumnIndex(KEY_ISCUPPINGFACILITIES)))));
                    td.setCuppingFacilitiesRemarks((c.getString((c.getColumnIndex(KEY_CUPPINGFACILITIESREMARKS)))));
                    td.setIsoccupationalAndHealthAct((c.getString((c.getColumnIndex(KEY_ISOCCUPATIONANDHEALTH)))));
                    td.setOccupationalAndHealthActRemarks((c.getString((c.getColumnIndex(KEY_OCCUPATIONANDHEALTHREMARKS)))));
                    td.setIspaymentToGrowers((c.getString((c.getColumnIndex(KEY_ISPAYMENTTOGROWERS)))));
                    td.setPaymentToGrowersRemarks(c.getString(c.getColumnIndex(KEY_PAYMENTTOGROWERSREMARKS)));
                    td.setIsstarndardOutTurnSales(c.getString((c.getColumnIndex(KEY_ISSTANDARDOUTTURN))));
                    td.setStarndardOutTurnSalesRemarks((c.getString((c.getColumnIndex(KEY_STANDARDOUTTURNREMARKS)))));
                    td.setIsstandardDirect((c.getString((c.getColumnIndex(KEY_ISSTANDARDDIRECTSALES)))));
                    td.setStandardDirectRemarks((c.getString((c.getColumnIndex(KEY_STANDARDDIRECTSALESREMARKS)))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    coffeeCommercialAgentList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + coffeeCommercialAgentList.size());
        return coffeeCommercialAgentList;
    }

    public void deletecommercialagentlistdata() {

        String deleteQuery = "DELETE FROM " + TABLE_COFFEE_COMMERCIAL_MARKET_AGENT;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    /* START OF HORTICULTURAL FLOWER EXPORTERS DESK VETTING*/

    //    private static final String KEY_DOCUMENT_NO = "document_number";
    private static final String KEY_APLLICANT_NAME = "applicant_name";
    //    private static final String KEY_DOCUMENT_DATE= "doucument_date";
    private static final String KEY_EXPORT_LICENCE = "export_licence";
    private static final String KEY_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING_ID = "horticultural_flower_exporters_desk_vetting_id";
    private static final String KEY_CERTIFICATION_OF_KS = "certification_of_ks";
    private static final String KEY_CERTIFICATION_OF_KS_AWARD = "certification_of_ks_award";
    private static final String KEY_CERTIFICATION_OF_KS_TIMELINE = "certification_of_ks_timeline";
    private static final String KEY_CERTIFICATION_OF_KS_REMARKS = "certification_of_ks_remarks";
    private static final String KEY_OTHER_RECOGNISED_STANDARDS = "other_recognised_standards";
    private static final String KEY_OTHER_RECOGNISED_STANDARDS_AWARD = "other_recognised_standards_award";
    private static final String KEY_OTHER_RECOGNISED_STANDARDS_TIMELINE = "other_recognised_standards_timeline";
    private static final String KEY_OTHER_RECOGNISED_STANDARDS_REMARKS = "other_recognised_standards_remarks";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_NATIONAL = "evidence_of_registration_national";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_AWARD = "evidence_of_registration_national_award";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_TIMELINE = "evidence_of_registration_national_timeline";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_REMARKS = "evidence_of_registration_national_remarks";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_SINGLE = "evidence_of_registration_single";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_SINGLE_AWARD = "evidence_of_registration_single_award";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_SINGLE_TIMELINE = "evidence_of_registration_single_timeline";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_SINGLE_REMARKS = "evidence_of_registration_single_remarks";
    private static final String KEY_EVIDENCE_OF_SAFE_DISPOSAL = "evidence_of_safe_disposal";
    private static final String KEY_EVIDENCE_OF_SAFE_DISPOSAL_AWARD = "evidence_of_safe_disposal_award";
    private static final String KEY_EVIDENCE_OF_SAFE_DISPOSAL_TIMELINE = "evidence_of_safe_disposal_timeline";
    private static final String KEY_EVIDENCE_OF_SAFE_DISPOSAL_REMARKS = "evidence_of_safe_disposal_remarks";
    private static final String KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS = "evidence_of_protection_of_workers";
    private static final String KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_AWARD = "evidence_of_protection_of_workers_award";
    private static final String KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_TIMELINE = "evidence_of_protection_of_workers_timeline";
    private static final String KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_REMARKS = "evidence_of_protection_of_workers_remarks";
    private static final String KEY_COPY_OF_HCD_EXPORT = "copy_of_hcd_export";
    private static final String KEY_COPY_OF_HCD_EXPORT_AWARD = "copy_of_hcd_export_award";
    private static final String KEY_COPY_OF_HCD_EXPORT_TIMELINE = "copy_of_hcd_export_timeline";
    private static final String KEY_COPY_OF_HCD_EXPORT_REMARKS = "copy_of_hcd_export_remarks";
    private static final String KEY_TRACEABILITY_LIST_OF_COMPANY = "traceability_list_of_company";
    private static final String KEY_TRACEABILITY_LIST_OF_COMPANY_AWARD = "traceability_list_of_company_award";
    private static final String KEY_TRACEABILITY_LIST_OF_COMPANY_TIMELINE = "traceability_list_of_company_timeline";
    private static final String KEY_TRACEABILITY_LIST_OF_COMPANY_REMARKS = "traceability_list_of_company_remarks";
    private static final String KEY_DECLARE_MARKETING_AGENTS = "declare_marketing_agents";
    private static final String KEY_DECLARE_MARKETING_AGENTS_AWARD = "declare_marketing_agents_award";
    private static final String KEY_DECLARE_MARKETING_AGENTS_TIMELINE = "declare_marketing_agents_timeline";
    private static final String KEY_DECLARE_MARKETING_AGENTS_REMARKS = "declare_marketing_agents_remarks";
    private static final String KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM = "evidence_of_traceability_system";
    private static final String KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_AWARD = "evidence_of_traceability_system_award";
    private static final String KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_TIMELINE = "evidence_of_traceability_system_timeline";
    private static final String KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_REMARKS = "evidence_of_traceability_system_remarks";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL = "evidence_of_attendance_annual";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_AWARD = "evidence_of_attendance_annual_award";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_TIMELINE = "evidence_of_attendance_annual_timeline";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_REMARKS = "evidence_of_attendance_annual_remarks";
    private static final String KEY_ANNUAL_TRAINING_MATRIX = "annual_training_matrix";
    private static final String KEY_ANNUAL_TRAINING_MATRIX_AWARD = "annual_training_matrix_award";
    private static final String KEY_ANNUAL_TRAINING_MATRIX_TIMELINE = "annual_training_matrix_timeline";
    private static final String KEY_ANNUAL_TRAINING_MATRIX_REMARKS = "annual_training_matrix_remarks";
    private static final String KEY_EVIDENCE_OF_PESTS_AND_DISEASE = "evidence_of_pests_and_disease";
    private static final String KEY_EVIDENCE_OF_PESTS_AND_DISEASE_AWARD = "evidence_of_pests_and_disease_award";
    private static final String KEY_EVIDENCE_OF_PESTS_AND_DISEASE_TIMELINE = "evidence_of_pests_and_disease_timeline";
    private static final String KEY_EVIDENCE_OF_PESTS_AND_DISEASE_REMARKS = "evidence_of_pests_and_disease_remarks";
    private static final String KEY_CLAIM_AGAINST_NON_PAYMENT = "claim_against_non_payment";
    private static final String KEY_CLAIM_AGAINST_NON_PAYMENT_AWARD = "claim_against_non_payment_award";
    private static final String KEY_CLAIM_AGAINST_NON_PAYMENT_TIMELINE = "claim_against_non_payment_timeline";
    private static final String KEY_CLAIM_AGAINST_NON_PAYMENT_REMARKS = "claim_against_non_payment_remarks";
    private static final String KEY_UTILIZATION_OF_HCD = "utilization_of_hcd";
    private static final String KEY_UTILIZATION_OF_HCD_AWARD = "utilization_of_hcd_award";
    private static final String KEY_UTILIZATION_OF_HCD_TIMELINE = "utilization_of_hcd_timeline";
    private static final String KEY_UTILIZATION_OF_HCD_REMARKS = "utilization_of_hcd_remarks";

    public static final String TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING = "table_horticultural_flower_exporter_desk_vetting";


    public static final String CREATE_TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING_ID + " TEXT UNIQUE ,"
            + KEY_DOCUMENT_NUMBER + " TEXT UNIQUE ,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_EXPORT_LICENCE + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_CERTIFICATION_OF_KS + " TEXT,"
            + KEY_CERTIFICATION_OF_KS_AWARD + " TEXT,"
            + KEY_CERTIFICATION_OF_KS_TIMELINE + " TEXT,"
            + KEY_CERTIFICATION_OF_KS_REMARKS + " TEXT,"
            + KEY_OTHER_RECOGNISED_STANDARDS + " TEXT,"
            + KEY_OTHER_RECOGNISED_STANDARDS_AWARD + " TEXT,"
            + KEY_OTHER_RECOGNISED_STANDARDS_TIMELINE + " TEXT,"
            + KEY_OTHER_RECOGNISED_STANDARDS_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_NATIONAL + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_SINGLE + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_SINGLE_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_SINGLE_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_SINGLE_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_SAFE_DISPOSAL + " TEXT,"
            + KEY_EVIDENCE_OF_SAFE_DISPOSAL_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_SAFE_DISPOSAL_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_SAFE_DISPOSAL_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS + " TEXT,"
            + KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_REMARKS + " TEXT,"
            + KEY_COPY_OF_HCD_EXPORT + " TEXT,"
            + KEY_COPY_OF_HCD_EXPORT_AWARD + " TEXT,"
            + KEY_COPY_OF_HCD_EXPORT_TIMELINE + " TEXT,"
            + KEY_COPY_OF_HCD_EXPORT_REMARKS + " TEXT,"
            + KEY_TRACEABILITY_LIST_OF_COMPANY + " TEXT,"
            + KEY_TRACEABILITY_LIST_OF_COMPANY_AWARD + " TEXT,"
            + KEY_TRACEABILITY_LIST_OF_COMPANY_TIMELINE + " TEXT,"
            + KEY_TRACEABILITY_LIST_OF_COMPANY_REMARKS + " TEXT,"
            + KEY_DECLARE_MARKETING_AGENTS + " TEXT,"
            + KEY_DECLARE_MARKETING_AGENTS_AWARD + " TEXT,"
            + KEY_DECLARE_MARKETING_AGENTS_TIMELINE + " TEXT,"
            + KEY_DECLARE_MARKETING_AGENTS_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM + " TEXT,"
            + KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_REMARKS + " TEXT,"
            + KEY_ANNUAL_TRAINING_MATRIX + " TEXT,"
            + KEY_ANNUAL_TRAINING_MATRIX_AWARD + " TEXT,"
            + KEY_ANNUAL_TRAINING_MATRIX_TIMELINE + " TEXT,"
            + KEY_ANNUAL_TRAINING_MATRIX_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_PESTS_AND_DISEASE + " TEXT,"
            + KEY_EVIDENCE_OF_PESTS_AND_DISEASE_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_PESTS_AND_DISEASE_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_PESTS_AND_DISEASE_REMARKS + " TEXT,"
            + KEY_CLAIM_AGAINST_NON_PAYMENT + " TEXT,"
            + KEY_CLAIM_AGAINST_NON_PAYMENT_AWARD + " TEXT,"
            + KEY_CLAIM_AGAINST_NON_PAYMENT_TIMELINE + " TEXT,"
            + KEY_CLAIM_AGAINST_NON_PAYMENT_REMARKS + " TEXT,"
            + KEY_UTILIZATION_OF_HCD + " TEXT,"
            + KEY_UTILIZATION_OF_HCD_AWARD + " TEXT,"
            + KEY_UTILIZATION_OF_HCD_TIMELINE + " TEXT,"
            + KEY_UTILIZATION_OF_HCD_REMARKS + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertHorticulturalFlowerExportersDeskVetting(HorticulturalFlowerExportersDeskVettingDetails horticulturalFlowerExportersDeskVettingDetails) {
        System.out.println("AFA_HC_flower_Exptchcklst_ID:" + horticulturalFlowerExportersDeskVettingDetails.getAFA_HC_flower_Exptchcklst_ID());
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, horticulturalFlowerExportersDeskVettingDetails.getLocalID());
        values.put(KEY_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING_ID, horticulturalFlowerExportersDeskVettingDetails.getAFA_HC_flower_Exptchcklst_ID());
        values.put(KEY_DOCUMENT_NUMBER, horticulturalFlowerExportersDeskVettingDetails.getDocument_number());
        values.put(KEY_DOCUMENT_DATE, horticulturalFlowerExportersDeskVettingDetails.getDocument_date());
        values.put(KEY_NAME_OF_APPLICANT, horticulturalFlowerExportersDeskVettingDetails.getName_of_applicant());
        values.put(KEY_EXPORT_LICENCE, horticulturalFlowerExportersDeskVettingDetails.getExport_licence());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isHorticulturalFlowerExportersDeskVettingStored(horticulturalFlowerExportersDeskVettingDetails.getAFA_HC_flower_Exptchcklst_ID())) {
            long hfedvID = db.insertWithOnConflict(TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("hfedvID" + hfedvID);
            //closeDB();
            closeDB();
            return hfedvID;
        } else {
            long hfedvID = -1;
            System.out.println("hfedvID" + hfedvID);
            //closeDB();
            closeDB();
            return hfedvID;
        }

    }

    public void deleteHorticulturalFlowerExportersDeskVetting() {
        String deleteQuery = "DELETE FROM " + TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isHorticulturalFlowerExportersDeskVettingStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING + " WHERE " + KEY_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateHorticulturalFlowerExportersDeskVettingSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long updateHorticulturalFlowerExportersDeskVetting(HorticulturalFlowerExportersDeskVetting horticulturalFlowerExportersDeskVetting) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {


            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_CERTIFICATION_OF_KS, horticulturalFlowerExportersDeskVetting.getIsCertificationToKS());
            values.put(KEY_CERTIFICATION_OF_KS_AWARD, horticulturalFlowerExportersDeskVetting.getCertificationToKSAward());
            values.put(KEY_CERTIFICATION_OF_KS_TIMELINE, horticulturalFlowerExportersDeskVetting.getCertificationToKSTimeline());
            values.put(KEY_CERTIFICATION_OF_KS_REMARKS, horticulturalFlowerExportersDeskVetting.getCertificationToKSRemarks());
            values.put(KEY_OTHER_RECOGNISED_STANDARDS, horticulturalFlowerExportersDeskVetting.getIsRecognisedStandards());
            values.put(KEY_OTHER_RECOGNISED_STANDARDS_AWARD, horticulturalFlowerExportersDeskVetting.getRecognisedStandardsAward());
            values.put(KEY_OTHER_RECOGNISED_STANDARDS_TIMELINE, horticulturalFlowerExportersDeskVetting.getRecognisedStandardsTimeline());
            values.put(KEY_OTHER_RECOGNISED_STANDARDS_REMARKS, horticulturalFlowerExportersDeskVetting.getRecognisedStandardsRemarks());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL, horticulturalFlowerExportersDeskVetting.getIsEvidenceOfRegistrationNational());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_AWARD, horticulturalFlowerExportersDeskVetting.getEvidenceOfRegistrationNationalAward());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_TIMELINE, horticulturalFlowerExportersDeskVetting.getEvidenceOfRegistrationNationalTimeline());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_REMARKS, horticulturalFlowerExportersDeskVetting.getEvidenceOfRegistrationNationalRemarks());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_SINGLE, horticulturalFlowerExportersDeskVetting.getIsEvidenceOfRegistrationSingle());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_AWARD, horticulturalFlowerExportersDeskVetting.getEvidenceOfRegistrationSingleAward());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_TIMELINE, horticulturalFlowerExportersDeskVetting.getEvidenceOfRegistrationSingleTimeline());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_REMARKS, horticulturalFlowerExportersDeskVetting.getEvidenceOfRegistrationSingleRemarks());
            values.put(KEY_EVIDENCE_OF_SAFE_DISPOSAL, horticulturalFlowerExportersDeskVetting.getIsEvidenceOfSafeDisposal());
            values.put(KEY_EVIDENCE_OF_SAFE_DISPOSAL_AWARD, horticulturalFlowerExportersDeskVetting.getEvidenceOfSafeDisposalAward());
            values.put(KEY_EVIDENCE_OF_SAFE_DISPOSAL_TIMELINE, horticulturalFlowerExportersDeskVetting.getEvidenceOfSafeDisposalTimeline());
            values.put(KEY_EVIDENCE_OF_SAFE_DISPOSAL_REMARKS, horticulturalFlowerExportersDeskVetting.getEvidenceOfSafeDisposalRemarks());
            values.put(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS, horticulturalFlowerExportersDeskVetting.getIsEvidenceOfWorkerProtection());
            values.put(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_AWARD, horticulturalFlowerExportersDeskVetting.getEvidenceOfWorkerProtectionAward());
            values.put(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_TIMELINE, horticulturalFlowerExportersDeskVetting.getEvidenceOfWorkerProtectionTimeline());
            values.put(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_REMARKS, horticulturalFlowerExportersDeskVetting.getEvidenceOfWorkerProtectionRemarks());
            values.put(KEY_COPY_OF_HCD_EXPORT, horticulturalFlowerExportersDeskVetting.getIsCopyOfHCD());
            values.put(KEY_COPY_OF_HCD_EXPORT_AWARD, horticulturalFlowerExportersDeskVetting.getCopyOfHCDAward());
            values.put(KEY_COPY_OF_HCD_EXPORT_TIMELINE, horticulturalFlowerExportersDeskVetting.getCopyOfHCDTimeline());
            values.put(KEY_COPY_OF_HCD_EXPORT_REMARKS, horticulturalFlowerExportersDeskVetting.getCopyOfHCDRemarks());
            values.put(KEY_TRACEABILITY_LIST_OF_COMPANY, horticulturalFlowerExportersDeskVetting.getIsTraceabilityList());
            values.put(KEY_TRACEABILITY_LIST_OF_COMPANY_AWARD, horticulturalFlowerExportersDeskVetting.getTraceabilityListAward());
            values.put(KEY_TRACEABILITY_LIST_OF_COMPANY_TIMELINE, horticulturalFlowerExportersDeskVetting.getTraceabilityListTimeline());
            values.put(KEY_TRACEABILITY_LIST_OF_COMPANY_REMARKS, horticulturalFlowerExportersDeskVetting.getTraceabilityListRemarks());
            values.put(KEY_DECLARE_MARKETING_AGENTS, horticulturalFlowerExportersDeskVetting.getIsDeclareMarkettingAgents());
            values.put(KEY_DECLARE_MARKETING_AGENTS_AWARD, horticulturalFlowerExportersDeskVetting.getDeclareMarkettingAgentsAward());
            values.put(KEY_DECLARE_MARKETING_AGENTS_TIMELINE, horticulturalFlowerExportersDeskVetting.getDeclareMarkettingAgentsTimeline());
            values.put(KEY_DECLARE_MARKETING_AGENTS_REMARKS, horticulturalFlowerExportersDeskVetting.getDeclareMarkettingAgentsRemarks());
            values.put(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM, horticulturalFlowerExportersDeskVetting.getIsEvidenceOfTraceabilitySystems());
            values.put(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_AWARD, horticulturalFlowerExportersDeskVetting.getEvidenceOfTraceabilitySystemsAward());
            values.put(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_TIMELINE, horticulturalFlowerExportersDeskVetting.getEvidenceOfTraceabilitySystemsTimeline());
            values.put(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_REMARKS, horticulturalFlowerExportersDeskVetting.getEvidenceOfTraceabilitySystemsRemarks());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL, horticulturalFlowerExportersDeskVetting.getIsEvidenceOfAttendance());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_AWARD, horticulturalFlowerExportersDeskVetting.getEvidenceOfAttendanceAward());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_TIMELINE, horticulturalFlowerExportersDeskVetting.getEvidenceOfAttendanceTimeline());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_REMARKS, horticulturalFlowerExportersDeskVetting.getEvidenceOfAttendanceRemarks());
            values.put(KEY_ANNUAL_TRAINING_MATRIX, horticulturalFlowerExportersDeskVetting.getIsAnnualTrainingMatrix());
            values.put(KEY_ANNUAL_TRAINING_MATRIX_AWARD, horticulturalFlowerExportersDeskVetting.getAnnualTrainingMatrixAward());
            values.put(KEY_ANNUAL_TRAINING_MATRIX_TIMELINE, horticulturalFlowerExportersDeskVetting.getAnnualTrainingMatrixTimeline());
            values.put(KEY_ANNUAL_TRAINING_MATRIX_REMARKS, horticulturalFlowerExportersDeskVetting.getAnnualTrainingMatrixRemarks());
            values.put(KEY_EVIDENCE_OF_PESTS_AND_DISEASE, horticulturalFlowerExportersDeskVetting.getIsEvidenceOfPests());
            values.put(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_AWARD, horticulturalFlowerExportersDeskVetting.getEvidenceOfPestsAward());
            values.put(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_TIMELINE, horticulturalFlowerExportersDeskVetting.getEvidenceOfPestsTimeline());
            values.put(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_REMARKS, horticulturalFlowerExportersDeskVetting.getEvidenceOfPestsRemarks());
            values.put(KEY_CLAIM_AGAINST_NON_PAYMENT, horticulturalFlowerExportersDeskVetting.getIsClaim());
            values.put(KEY_CLAIM_AGAINST_NON_PAYMENT_AWARD, horticulturalFlowerExportersDeskVetting.getClaimAward());
            values.put(KEY_CLAIM_AGAINST_NON_PAYMENT_TIMELINE, horticulturalFlowerExportersDeskVetting.getClaimTimeline());
            values.put(KEY_CLAIM_AGAINST_NON_PAYMENT_REMARKS, horticulturalFlowerExportersDeskVetting.getClaimRemarks());
            values.put(KEY_UTILIZATION_OF_HCD, horticulturalFlowerExportersDeskVetting.getIsUtilizationOfHCD());
            values.put(KEY_UTILIZATION_OF_HCD_AWARD, horticulturalFlowerExportersDeskVetting.getUtilizationOfHCDAward());
            values.put(KEY_UTILIZATION_OF_HCD_TIMELINE, horticulturalFlowerExportersDeskVetting.getUtilizationOfHCDTimeline());
            values.put(KEY_UTILIZATION_OF_HCD_REMARKS, horticulturalFlowerExportersDeskVetting.getUtilizationOfHCDRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, horticulturalFlowerExportersDeskVetting.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, horticulturalFlowerExportersDeskVetting.getOfficerrecommendation_remark());


            result = db.update(TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING, values, "id =" + Integer.parseInt(horticulturalFlowerExportersDeskVetting.getLocalID()), null);

            System.out.println("results is " + result);


        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<HorticulturalFlowerExportersDeskVettingDetails> getHorticulturalFlowerExportersDeskVettingList() {

        List<HorticulturalFlowerExportersDeskVettingDetails> horticulturalFlowerExportersDeskVettingDetailsList = new ArrayList<HorticulturalFlowerExportersDeskVettingDetails>();
        HorticulturalFlowerExportersDeskVettingDetails td = new HorticulturalFlowerExportersDeskVettingDetails();
        // td.setName("- Required -");
        //String selectQuery = "SELECT  * FROM " + TABLE_SUGAR_MILL + " where "+KEY_INSPECTION_DONE+" =" +"'N'";

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticulturalFlowerExportersDeskVettingDetails();
                    td.setAFA_HC_flower_Exptchcklst_ID(c.getString((c.getColumnIndex(KEY_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setExport_licence((c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE)))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setIsCertificationToKS(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS))));
                    td.setCertificationToKSAward(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS_AWARD))));
                    td.setCertificationToKSTimeline(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS_TIMELINE))));
                    td.setCertificationToKSRemarks(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS_REMARKS))));
                    td.setIsRecognisedStandards(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS))));
                    td.setRecognisedStandardsAward(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS_AWARD))));
                    td.setRecognisedStandardsTimeline(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS_TIMELINE))));
                    td.setRecognisedStandardsRemarks(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS_REMARKS))));
                    td.setIsEvidenceOfRegistrationNational(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL))));
                    td.setEvidenceOfRegistrationNationalAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_AWARD))));
                    td.setEvidenceOfRegistrationNationalTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_TIMELINE))));
                    td.setEvidenceOfRegistrationNationalRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_REMARKS))));
                    td.setIsEvidenceOfRegistrationSingle(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE))));
                    td.setEvidenceOfRegistrationSingleAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_AWARD))));
                    td.setEvidenceOfRegistrationSingleTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_TIMELINE))));
                    td.setEvidenceOfRegistrationSingleRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_REMARKS))));
                    td.setIsEvidenceOfSafeDisposal(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL))));
                    td.setEvidenceOfSafeDisposalAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL_AWARD))));
                    td.setEvidenceOfSafeDisposalTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL_TIMELINE))));
                    td.setEvidenceOfSafeDisposalRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL_REMARKS))));
                    td.setIsEvidenceOfWorkerProtection(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS))));
                    td.setEvidenceOfWorkerProtectionAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_AWARD))));
                    td.setEvidenceOfWorkerProtectionTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_TIMELINE))));
                    td.setEvidenceOfWorkerProtectionRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_REMARKS))));
                    td.setIsCopyOfHCD(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT))));
                    td.setCopyOfHCDAward(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT_AWARD))));
                    td.setCopyOfHCDTimeline(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT_TIMELINE))));
                    td.setCopyOfHCDRemarks(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT_REMARKS))));
                    td.setIsTraceabilityList(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY))));
                    td.setTraceabilityListAward(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY_AWARD))));
                    td.setTraceabilityListTimeline(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY_TIMELINE))));
                    td.setTraceabilityListRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY_REMARKS))));
                    td.setIsDeclareMarkettingAgents(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS))));
                    td.setDeclareMarkettingAgentsAward(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS_AWARD))));
                    td.setDeclareMarkettingAgentsTimeline(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS_TIMELINE))));
                    td.setDeclareMarkettingAgentsRemarks(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS_REMARKS))));
                    td.setIsEvidenceOfTraceabilitySystems(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM))));
                    td.setEvidenceOfTraceabilitySystemsAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_AWARD))));
                    td.setEvidenceOfTraceabilitySystemsTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_TIMELINE))));
                    td.setEvidenceOfTraceabilitySystemsRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setIsEvidenceOfAttendance(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL))));
                    td.setEvidenceOfAttendanceAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_AWARD))));
                    td.setEvidenceOfAttendanceTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_TIMELINE))));
                    td.setEvidenceOfAttendanceRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_REMARKS))));
                    td.setIsAnnualTrainingMatrix(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX))));
                    td.setAnnualTrainingMatrixAward(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX_AWARD))));
                    td.setAnnualTrainingMatrixTimeline(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX_TIMELINE))));
                    td.setAnnualTrainingMatrixRemarks(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX_REMARKS))));
                    td.setIsEvidenceOfPests(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE))));
                    td.setEvidenceOfPestsAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_AWARD))));
                    td.setEvidenceOfPestsTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_TIMELINE))));
                    td.setEvidenceOfPestsRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_REMARKS))));
                    td.setIsClaim(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT))));
                    td.setClaimAward(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT_AWARD))));
                    td.setClaimTimeline(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT_TIMELINE))));
                    td.setClaimRemarks(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT_REMARKS))));
                    td.setIsUtilizationOfHCD(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD))));
                    td.setUtilizationOfHCDAward(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD_AWARD))));
                    td.setUtilizationOfHCDTimeline(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD_TIMELINE))));
                    td.setUtilizationOfHCDRemarks(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD_REMARKS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list
                    horticulturalFlowerExportersDeskVettingDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + horticulturalFlowerExportersDeskVettingDetailsList.size());
        return horticulturalFlowerExportersDeskVettingDetailsList;
    }

    public List<HorticulturalFlowerExportersDeskVettingDetails> getHorticulturalFlowerExportersDeskVettingDoneList() {

        List<HorticulturalFlowerExportersDeskVettingDetails> horticulturalFlowerExportersDeskVettingDetails = new ArrayList<HorticulturalFlowerExportersDeskVettingDetails>();
        HorticulturalFlowerExportersDeskVettingDetails td = new HorticulturalFlowerExportersDeskVettingDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING + " where " + KEY_INSPECTION_DONE + " = 'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticulturalFlowerExportersDeskVettingDetails();
                    td.setAFA_HC_flower_Exptchcklst_ID(c.getString((c.getColumnIndex(KEY_HORTICULTURAL_FLOWER_EXPORTERS_DESK_VETTING_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setExport_licence((c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE)))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setIsCertificationToKS(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS))));
                    td.setCertificationToKSAward(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS_AWARD))));
                    td.setCertificationToKSTimeline(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS_TIMELINE))));
                    td.setCertificationToKSRemarks(c.getString((c.getColumnIndex(KEY_CERTIFICATION_OF_KS_REMARKS))));
                    td.setIsRecognisedStandards(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS))));
                    td.setRecognisedStandardsAward(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS_AWARD))));
                    td.setRecognisedStandardsTimeline(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS_TIMELINE))));
                    td.setRecognisedStandardsRemarks(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNISED_STANDARDS_REMARKS))));
                    td.setIsEvidenceOfRegistrationNational(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL))));
                    td.setEvidenceOfRegistrationNationalAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_AWARD))));
                    td.setEvidenceOfRegistrationNationalTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_TIMELINE))));
                    td.setEvidenceOfRegistrationNationalRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_NATIONAL_REMARKS))));
                    td.setIsEvidenceOfRegistrationSingle(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE))));
                    td.setEvidenceOfRegistrationSingleAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_AWARD))));
                    td.setEvidenceOfRegistrationSingleTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_TIMELINE))));
                    td.setEvidenceOfRegistrationSingleRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_SINGLE_REMARKS))));
                    td.setIsEvidenceOfSafeDisposal(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL))));
                    td.setEvidenceOfSafeDisposalAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL_AWARD))));
                    td.setEvidenceOfSafeDisposalTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL_TIMELINE))));
                    td.setEvidenceOfSafeDisposalRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_SAFE_DISPOSAL_REMARKS))));
                    td.setIsEvidenceOfWorkerProtection(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS))));
                    td.setEvidenceOfWorkerProtectionAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_AWARD))));
                    td.setEvidenceOfWorkerProtectionTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_TIMELINE))));
                    td.setEvidenceOfWorkerProtectionRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PROTECTION_OF_WORKERS_REMARKS))));
                    td.setIsCopyOfHCD(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT))));
                    td.setCopyOfHCDAward(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT_AWARD))));
                    td.setCopyOfHCDTimeline(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT_TIMELINE))));
                    td.setCopyOfHCDRemarks(c.getString((c.getColumnIndex(KEY_COPY_OF_HCD_EXPORT_REMARKS))));
                    td.setIsTraceabilityList(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY))));
                    td.setTraceabilityListAward(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY_AWARD))));
                    td.setTraceabilityListTimeline(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY_TIMELINE))));
                    td.setTraceabilityListRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_COMPANY_REMARKS))));
                    td.setIsDeclareMarkettingAgents(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS))));
                    td.setDeclareMarkettingAgentsAward(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS_AWARD))));
                    td.setDeclareMarkettingAgentsTimeline(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS_TIMELINE))));
                    td.setDeclareMarkettingAgentsRemarks(c.getString((c.getColumnIndex(KEY_DECLARE_MARKETING_AGENTS_REMARKS))));
                    td.setIsEvidenceOfTraceabilitySystems(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM))));
                    td.setEvidenceOfTraceabilitySystemsAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_AWARD))));
                    td.setEvidenceOfTraceabilitySystemsTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_TIMELINE))));
                    td.setEvidenceOfTraceabilitySystemsRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_TRACEABILITY_SYSTEM_REMARKS))));
                    td.setIsEvidenceOfAttendance(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL))));
                    td.setEvidenceOfAttendanceAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_AWARD))));
                    td.setEvidenceOfAttendanceTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_TIMELINE))));
                    td.setEvidenceOfAttendanceRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ANNUAL_REMARKS))));
                    td.setIsAnnualTrainingMatrix(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX))));
                    td.setAnnualTrainingMatrixAward(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX_AWARD))));
                    td.setAnnualTrainingMatrixTimeline(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX_TIMELINE))));
                    td.setAnnualTrainingMatrixRemarks(c.getString((c.getColumnIndex(KEY_ANNUAL_TRAINING_MATRIX_REMARKS))));
                    td.setIsEvidenceOfPests(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE))));
                    td.setEvidenceOfPestsAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_AWARD))));
                    td.setEvidenceOfPestsTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_TIMELINE))));
                    td.setEvidenceOfPestsRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_PESTS_AND_DISEASE_REMARKS))));
                    td.setIsClaim(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT))));
                    td.setClaimAward(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT_AWARD))));
                    td.setClaimTimeline(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT_TIMELINE))));
                    td.setClaimRemarks(c.getString((c.getColumnIndex(KEY_CLAIM_AGAINST_NON_PAYMENT_REMARKS))));
                    td.setIsUtilizationOfHCD(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD))));
                    td.setUtilizationOfHCDAward(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD_AWARD))));
                    td.setUtilizationOfHCDTimeline(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD_TIMELINE))));
                    td.setUtilizationOfHCDRemarks(c.getString((c.getColumnIndex(KEY_UTILIZATION_OF_HCD_REMARKS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    horticulturalFlowerExportersDeskVettingDetails.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + horticulturalFlowerExportersDeskVettingDetails.size());
        return horticulturalFlowerExportersDeskVettingDetails;
    }


    /* END OF HORTICULTURAL FLOWER EXPORTERS DESK VETTING*/
    /* START OF HORTICULTURE PRODUCE TRANSPORTATION CHECKLIST*/
    private static final String TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST = "horticulture_produce_transportation_checklist";


    private static final String KEY_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST_ID = "pulping_staion_license_application_id";
    private static final String KEY_DEALER_CATEGORY = "dealer_category";
    //    private static final String KEY_NAME_OF_APPLICANT = "";
//    private static final String KEY_EXPORT_LICENCE = "";
    private static final String KEY_IS_ADHOC = "is_adhoc";
    //    private static final String KEY_COUNTY_ID = "county_id";
//    private static final String KEY_SUB_COUNTY = "sub_county";
//    private static final String KEY_LOCATION = "location";
//    private static final String KEY_DOCUMENT_DATE = "document_date";
    private static final String KEY_CROP_OF_INTEREST = "crop_of_interest";
    //    private static final String KEY_NAME = "name";
    private static final String KEY_REGISTRATION_NUMBER = "registration_number";
    private static final String KEY_IS_OWN_FARM = "is_own_farm";
    private static final String KEY_IS_CONTRACTED_SOURCES = "is_contracted_sources";
    private static final String KEY_IS_PRODUCE_TRANSPORTATION = "is_produce_transportation";
    private static final String KEY_PRODUCE_TRANSPORTATION = "produce_transportation";
    private static final String KEY_IS_TRANSPORT_VESSEL = "is_transport_vessel";
    private static final String KEY_TRANSPORT_VESSEL = "transport_vessel";
    private static final String KEY_IS_CLEARED_DOCUMENTATION = "is_cleared_documentation";
    private static final String KEY_CLEARED_DOCUMENTATION = "cleared_documentation";
    private static final String KEY_IS_INTEGRITY_OF_PRODUCT = "is_integrity_of_product";
    private static final String KEY_INTEGRITY_OF_PRODUCT = "integrity_of_product";
    private static final String KEY_IS_PRODUCE_HANDLING = "is_produce_handling";
    private static final String KEY_PRODUCE_HANDLING = "produce_handling";
    private static final String KEY_ANY_OTHER_COMMENT = "any_other_comment";

    public static final String CREATE_TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST_ID + " TEXT UNIQUE ,"
            + KEY_DEALER_CATEGORY + " TEXT ,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_EXPORT_LICENCE + " TEXT,"
            + KEY_IS_ADHOC + " TEXT,"
            + KEY_COUNTY_ID + " TEXT,"
            + KEY_SUB_COUNTY_ID + " TEXT,"
            + KEY_LOCATION + " TEXT,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_CROP_OF_INTEREST + " TEXT,"
            + KEY_NAME + " TEXT,"
            + KEY_REGISTRATION_NUMBER + " TEXT,"
            + KEY_IS_OWN_FARM + " TEXT,"
            + KEY_IS_CONTRACTED_SOURCES + " TEXT,"
            + KEY_IS_PRODUCE_TRANSPORTATION + " TEXT,"
            + KEY_PRODUCE_TRANSPORTATION + " TEXT,"
            + KEY_IS_TRANSPORT_VESSEL + " TEXT,"
            + KEY_TRANSPORT_VESSEL + " TEXT,"
            + KEY_IS_CLEARED_DOCUMENTATION + " TEXT,"
            + KEY_CLEARED_DOCUMENTATION + " TEXT,"
            + KEY_IS_INTEGRITY_OF_PRODUCT + " TEXT,"
            + KEY_INTEGRITY_OF_PRODUCT + " TEXT,"
            + KEY_IS_PRODUCE_HANDLING + " TEXT,"
            + KEY_PRODUCE_HANDLING + " TEXT,"
            + KEY_ANY_OTHER_COMMENT + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertHorticultureProduceTransportation(HorticultureProduceTransportationDetails horticultureProduceTransportationDetails) {
        System.out.println("AFA_HC_flower_Exptchcklst_ID:" + horticultureProduceTransportationDetails.getAFA_HC_Produce_Trans_Insp_ID());
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, horticultureProduceTransportationDetails.getLocalID());
        values.put(KEY_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST_ID, horticultureProduceTransportationDetails.getAFA_HC_Produce_Trans_Insp_ID());
        values.put(KEY_DOCUMENT_NUMBER, horticultureProduceTransportationDetails.getDocumentNumber());
        values.put(KEY_DOCUMENT_DATE, horticultureProduceTransportationDetails.getDocumentDate());
        values.put(KEY_NAME_OF_APPLICANT, horticultureProduceTransportationDetails.getNameOfApllicant());
        values.put(KEY_EXPORT_LICENCE, horticultureProduceTransportationDetails.getExportLicence());
        values.put(KEY_DEALER_CATEGORY, horticultureProduceTransportationDetails.getDealerCategory());
        values.put(KEY_COUNTY_ID, horticultureProduceTransportationDetails.getCountyID());
        values.put(KEY_SUB_COUNTY_ID, horticultureProduceTransportationDetails.getSubCountyID());
        values.put(KEY_LOCATION, horticultureProduceTransportationDetails.getLocation());
        values.put(KEY_CROP_OF_INTEREST, horticultureProduceTransportationDetails.getCropOfInterest());
        values.put(KEY_IS_ADHOC, horticultureProduceTransportationDetails.getIsAdhocInspection());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isHorticultureProduceTransportationStored(horticultureProduceTransportationDetails.getAFA_HC_Produce_Trans_Insp_ID())) {
            long hfedvID = db.insertWithOnConflict(TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("hfedvID" + hfedvID);
            //closeDB();
            closeDB();
            return hfedvID;
        } else {
            long hfedvID = -1;
            System.out.println("hfedvID" + hfedvID);
            //closeDB();
            closeDB();
            return hfedvID;
        }

    }

    public void deleteHorticultureProduceTransportation() {

        String deleteQuery = "DELETE FROM " + TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean isHorticultureProduceTransportationStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST + " WHERE " + KEY_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long updateHorticultureProduceTransportation(HorticultureProduceTransportation horticultureProduceTransportation) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {


            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_CROP_OF_INTEREST, horticultureProduceTransportation.getCropOfInterest());
            values.put(KEY_NAME, horticultureProduceTransportation.getCompanyName());
            values.put(KEY_REGISTRATION_NUMBER, horticultureProduceTransportation.getCompanyRegistrationNumber());
            values.put(KEY_IS_OWN_FARM, horticultureProduceTransportation.getIsOwnFarm());
            values.put(KEY_IS_CONTRACTED_SOURCES, horticultureProduceTransportation.getIsContractedSources());
            values.put(KEY_IS_PRODUCE_TRANSPORTATION, horticultureProduceTransportation.getIsProduceTransportation());
            values.put(KEY_PRODUCE_TRANSPORTATION, horticultureProduceTransportation.getProduceTransportationRemarks());
            values.put(KEY_IS_TRANSPORT_VESSEL, horticultureProduceTransportation.getIsTransportVessel());
            values.put(KEY_TRANSPORT_VESSEL, horticultureProduceTransportation.getTransportVesselRemarks());
            values.put(KEY_IS_CLEARED_DOCUMENTATION, horticultureProduceTransportation.getIsClearedDocumentation());
            values.put(KEY_CLEARED_DOCUMENTATION, horticultureProduceTransportation.getClearedDocumentationRemarks());
            values.put(KEY_IS_INTEGRITY_OF_PRODUCT, horticultureProduceTransportation.getIsIntegrityOfProduct());
            values.put(KEY_INTEGRITY_OF_PRODUCT, horticultureProduceTransportation.getIntegrityOfProductRemarks());
            values.put(KEY_IS_PRODUCE_HANDLING, horticultureProduceTransportation.getIsProduceHandling());
            values.put(KEY_PRODUCE_HANDLING, horticultureProduceTransportation.getProduceHandlingRemarks());
            values.put(KEY_ANY_OTHER_COMMENT, horticultureProduceTransportation.getComments());
            values.put(KEY_OFFICER_RECOMMENDATION, horticultureProduceTransportation.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, horticultureProduceTransportation.getOfficerrecommendation_remark());


            result = db.update(TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST, values, "id =" + Integer.parseInt(horticultureProduceTransportation.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<HorticultureProduceTransportationDetails> getHorticultureProduceTransportationDetailsList() {

        List<HorticultureProduceTransportationDetails> horticultureProduceTransportationDetailsList = new ArrayList<HorticultureProduceTransportationDetails>();
        HorticultureProduceTransportationDetails td = new HorticultureProduceTransportationDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking HORTICULTURE_PRODUCE_TRANSPORTATION data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticultureProduceTransportationDetails();
                    td.setAFA_HC_Produce_Trans_Insp_ID((c.getString((c.getColumnIndex(KEY_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST_ID)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setNameOfApllicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setExportLicence((c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE)))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDealerCategory(c.getString((c.getColumnIndex(KEY_DEALER_CATEGORY))));
                    td.setIsAdhocInspection(c.getString((c.getColumnIndex(KEY_IS_ADHOC))));
                    td.setCountyID(c.getString((c.getColumnIndex(KEY_COUNTY_ID))));
                    td.setSubCountyID(c.getString((c.getColumnIndex(KEY_SUB_COUNTY_ID))));
                    td.setLocation(c.getString((c.getColumnIndex(KEY_LOCATION))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));
                    td.setCropOfInterest(c.getString((c.getColumnIndex(KEY_CROP_OF_INTEREST))));
                    td.setCompanyName(c.getString((c.getColumnIndex(KEY_NAME))));
                    td.setCompanyRegistrationNumber(c.getString((c.getColumnIndex(KEY_REGISTRATION_NUMBER))));
                    td.setIsOwnFarm(c.getString((c.getColumnIndex(KEY_IS_OWN_FARM))));
                    td.setIsContractedSources(c.getString((c.getColumnIndex(KEY_IS_CONTRACTED_SOURCES))));
                    td.setIsProduceTransportation(c.getString((c.getColumnIndex(KEY_IS_PRODUCE_TRANSPORTATION))));
                    td.setProduceTransportationRemarks(c.getString((c.getColumnIndex(KEY_PRODUCE_TRANSPORTATION))));
                    td.setIsTransportVessel(c.getString((c.getColumnIndex(KEY_IS_TRANSPORT_VESSEL))));
                    td.setTransportVesselRemarks(c.getString((c.getColumnIndex(KEY_TRANSPORT_VESSEL))));
                    td.setIsClearedDocumentation(c.getString((c.getColumnIndex(KEY_IS_CLEARED_DOCUMENTATION))));
                    td.setClearedDocumentationRemarks(c.getString((c.getColumnIndex(KEY_CLEARED_DOCUMENTATION))));
                    td.setIsIntegrityOfProduct(c.getString((c.getColumnIndex(KEY_IS_INTEGRITY_OF_PRODUCT))));
                    td.setIntegrityOfProductRemarks(c.getString((c.getColumnIndex(KEY_INTEGRITY_OF_PRODUCT))));
                    td.setIsProduceHandling(c.getString((c.getColumnIndex(KEY_IS_PRODUCE_HANDLING))));
                    td.setProduceHandlingRemarks(c.getString((c.getColumnIndex(KEY_PRODUCE_HANDLING))));
                    td.setComments(c.getString((c.getColumnIndex(KEY_ANY_OTHER_COMMENT))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list
                    horticultureProduceTransportationDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + horticultureProduceTransportationDetailsList.size());
        return horticultureProduceTransportationDetailsList;
    }

    public List<HorticultureProduceTransportationDetails> getHorticultureProduceTransportationDetailsDoneList() {

        List<HorticultureProduceTransportationDetails> horticultureProduceTransportationDetailsList = new ArrayList<HorticultureProduceTransportationDetails>();
        HorticultureProduceTransportationDetails td = new HorticultureProduceTransportationDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking HORTICULTURE_PRODUCE_TRANSPORTATION data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticultureProduceTransportationDetails();
                    td.setAFA_HC_Produce_Trans_Insp_ID((c.getString((c.getColumnIndex(KEY_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST_ID)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setNameOfApllicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setExportLicence((c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE)))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setDealerCategory(c.getString((c.getColumnIndex(KEY_DEALER_CATEGORY))));
                    td.setIsAdhocInspection(c.getString((c.getColumnIndex(KEY_IS_ADHOC))));
                    td.setCountyID(c.getString((c.getColumnIndex(KEY_COUNTY_ID))));
                    td.setSubCountyID(c.getString((c.getColumnIndex(KEY_SUB_COUNTY_ID))));
                    td.setLocation(c.getString((c.getColumnIndex(KEY_LOCATION))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));
                    td.setCropOfInterest(c.getString((c.getColumnIndex(KEY_CROP_OF_INTEREST))));
                    td.setCompanyName(c.getString((c.getColumnIndex(KEY_NAME))));
                    td.setCompanyRegistrationNumber(c.getString((c.getColumnIndex(KEY_REGISTRATION_NUMBER))));
                    td.setIsOwnFarm(c.getString((c.getColumnIndex(KEY_IS_OWN_FARM))));
                    td.setIsContractedSources(c.getString((c.getColumnIndex(KEY_IS_CONTRACTED_SOURCES))));
                    td.setIsProduceTransportation(c.getString((c.getColumnIndex(KEY_IS_PRODUCE_TRANSPORTATION))));
                    td.setProduceTransportationRemarks(c.getString((c.getColumnIndex(KEY_PRODUCE_TRANSPORTATION))));
                    td.setIsTransportVessel(c.getString((c.getColumnIndex(KEY_IS_TRANSPORT_VESSEL))));
                    td.setTransportVesselRemarks(c.getString((c.getColumnIndex(KEY_TRANSPORT_VESSEL))));
                    td.setIsClearedDocumentation(c.getString((c.getColumnIndex(KEY_IS_CLEARED_DOCUMENTATION))));
                    td.setClearedDocumentationRemarks(c.getString((c.getColumnIndex(KEY_CLEARED_DOCUMENTATION))));
                    td.setIsIntegrityOfProduct(c.getString((c.getColumnIndex(KEY_IS_INTEGRITY_OF_PRODUCT))));
                    td.setIntegrityOfProductRemarks(c.getString((c.getColumnIndex(KEY_INTEGRITY_OF_PRODUCT))));
                    td.setIsProduceHandling(c.getString((c.getColumnIndex(KEY_IS_PRODUCE_HANDLING))));
                    td.setProduceHandlingRemarks(c.getString((c.getColumnIndex(KEY_PRODUCE_HANDLING))));
                    td.setComments(c.getString((c.getColumnIndex(KEY_ANY_OTHER_COMMENT))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list
                    horticultureProduceTransportationDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + horticultureProduceTransportationDetailsList.size());
        return horticultureProduceTransportationDetailsList;
    }

    public boolean updateHorticulturalProduceTransportationSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_HORTICULTURE_PRODUCE_TRANSPORTATION_CHECKLIST, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /* END OF HORTICULTURE PRODUCE TRANSPORTATION CHECKLIST*/

    /* START OF HORTICULTURE LICENCE FARM INSPECTION*/

    private static final String TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION = "table_horticulture_crop_export_licence_farm_inspection";
    private static final String KEY_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION_ID = "horticulture_crop_export_licence_farm_inspection_id";

    private static final String KEY_NAMEOFAPPLICANT = "nameofapplicant";
    private static final String KEY_ISADHOCINSPECTION = "isadhocinspection";
    private static final String KEY_COUNTYID = "countyid";
    private static final String KEY_SUBCOUNTYID = "subcountyid";
    //    private static final String KEY_LOCATION = "location";
    private static final String KEY_TELEPHONE = "telephone";
    private static final String KEY_LOCALID = "localid";
    private static final String KEY_ISEXPORTEROWNFARM = "isexporterownfarm";
    private static final String KEY_ISCONTRACTEDSOURCES = "iscontractedsources";
    private static final String KEY_FARMNAME = "farmname";
    private static final String KEY_FARMERNAME = "farmername";
    private static final String KEY_FARMERIDNUMBER = "farmeridnumber";
    private static final String KEY_FARMERTELEPHONE = "farmertelephone";
    private static final String KEY_FARMEREMAIL = "farmeremail";
    private static final String KEY_FARMERCOUNTY = "farmercounty";
    private static final String KEY_FARMERLOCATION = "farmerlocation";
    private static final String KEY_INTENDEDCROP = "intendedcrop";
    private static final String KEY_ACREAGEUNDERCROP = "acreageundercrop";
    private static final String KEY_ISCCERTIFICATIONTOGAP = "isccertificationtogap";
    private static final String KEY_CCERTIFICATIONTOGAP = "ccertificationtogap";
    private static final String KEY_ISDULYSIGNED = "isdulysigned";
    private static final String KEY_DULYSIGNED = "dulysigned";
    private static final String KEY_ISPRODUCTIONPLANPERCROP = "isproductionplanpercrop";
    private static final String KEY_PRODUCTIONPLANPERCROP = "productionplanpercrop";
    private static final String KEY_ISEXPORTERAWARE = "isexporteraware";
    private static final String KEY_EXPORTERAWARE = "exporteraware";
    private static final String KEY_ISEXPORTERTRAINEDPERSONNEL = "isexportertrainedpersonnel";
    private static final String KEY_EXPORTERTRAINEDPERSONNEL = "exportertrainedpersonnel";
    private static final String KEY_ISCONTROLLEDANDAPPROVED = "iscontrolledandapproved";
    private static final String KEY_CONTROLLEDANDAPPROVED = "controlledandapproved";
    private static final String KEY_ISEXPORTERHAVEPETCIDE = "isexporterhavepetcide";
    private static final String KEY_EXPORTERHAVEPETCIDE = "exporterhavepetcide";
    private static final String KEY_ISFIELDCODES = "isfieldcodes";
    private static final String KEY_FIELDCODES = "fieldcodes";
    private static final String KEY_ISPLANTINGDATE = "isplantingdate";
    private static final String KEY_PLANTINGDATE = "plantingdate";
    private static final String KEY_ISCHEMICALLISTAPPROVED = "ischemicallistapproved";
    private static final String KEY_CHEMICALLISTAPPROVED = "chemicallistapproved";
    private static final String KEY_ISPRESENCEOFAPPROVEDSPRAY = "ispresenceofapprovedspray";
    private static final String KEY_PRESENCEOFAPPROVEDSPRAY = "presenceofapprovedspray";
    private static final String KEY_ISPRODUCTINVOICES = "isproductinvoices";
    private static final String KEY_PRODUCTINVOICES = "productinvoices";
    private static final String KEY_ISSPRAYRECORDS = "issprayrecords";
    private static final String KEY_SPRAYRECORDS = "sprayrecords";
    private static final String KEY_ISTRADENAMEOFPRODUCT = "istradenameofproduct";
    private static final String KEY_TRADENAMEOFPRODUCT = "tradenameofproduct";
    private static final String KEY_ISPHIRECORDED = "isphirecorded";
    private static final String KEY_PHIRECORDED = "phirecorded";
    private static final String KEY_ISALLSPRAYINGDATES = "isallsprayingdates";
    private static final String KEY_ALLSPRAYINGDATES = "allsprayingdates";
    private static final String KEY_ISAMOUNTOFPESTICIDE = "isamountofpesticide";
    private static final String KEY_AMOUNTOFPESTICIDE = "amountofpesticide";
    private static final String KEY_ISPHIOBSERVED = "isphiobserved";
    private static final String KEY_PHIOBSERVED = "phiobserved";
    private static final String KEY_ISTRAININGSCHEDULES = "istrainingschedules";
    private static final String KEY_TRAININGSCHEDULES = "trainingschedules";
    private static final String KEY_ISPESTMANAGEMENTPROTOCOL = "ispestmanagementprotocol";
    private static final String KEY_PESTMANAGEMENTPROTOCOL = "pestmanagementprotocol";
    private static final String KEY_ISEVIDENCEONSCOURING = "isevidenceonscouring";
    private static final String KEY_EVIDENCEONSCOURING = "evidenceonscouring";
    private static final String KEY_ISEVIDENCEOFPESTS = "isevidenceofpests";
    private static final String KEY_EVIDENCEOFPESTS = "evidenceofpests";
    private static final String KEY_ISCOLLECTIONSHEDFORFARMERS = "iscollectionshedforfarmers";
    private static final String KEY_COLLECTIONSHEDFORFARMERS = "collectionshedforfarmers";
    private static final String KEY_ISCOLLECTIONANDSORTINGSHED = "iscollectionandsortingshed";
    private static final String KEY_COLLECTIONANDSORTINGSHED = "collectionandsortingshed";
    private static final String KEY_ISAPPROPRIATEHYGIENE = "isappropriatehygiene";
    private static final String KEY_APPROPRIATEHYGIENE = "appropriatehygiene";
    private static final String KEY_ISGRADINGTABLES = "isgradingtables";
    private static final String KEY_GRADINGTABLES = "gradingtables";
    private static final String KEY_ISSHEDHAVERUNNINGWATER = "isshedhaverunningwater";
    private static final String KEY_SHEDHAVERUNNINGWATER = "shedhaverunningwater";
    private static final String KEY_ISTOILETATFACILITY = "istoiletatfacility";
    private static final String KEY_TOILETATFACILITY = "toiletatfacility";
    private static final String KEY_ISPPEGRADERS = "isppegraders";
    private static final String KEY_PPEGRADERS = "ppegraders";
    private static final String KEY_ISSTORAGEAREAFORGRADED = "isstorageareaforgraded";
    private static final String KEY_STORAGEAREAFORGRADED = "storageareaforgraded";
    private static final String KEY_ISPLASTICCRATES = "isplasticcrates";
    private static final String KEY_PLASTICCRATES = "plasticcrates";
    private static final String KEY_ISCOLLECTIONSHEDACCESSIBLE = "iscollectionshedaccessible";
    private static final String KEY_COLLECTIONSHEDACCESSIBLE = "collectionshedaccessible";
    private static final String KEY_ISCOLLECTIONAREAHAVEOFFICE = "iscollectionareahaveoffice";
    private static final String KEY_COLLECTIONAREAHAVEOFFICE = "collectionareahaveoffice";
    private static final String KEY_ISCOLLECTIONSHEDEASY = "iscollectionshedeasy";
    private static final String KEY_COLLECTIONSHEDEASY = "collectionshedeasy";
    private static final String KEY_ISADEQUATELIGHTINGANDVENTILATION = "isadequatelightingandventilation";
    private static final String KEY_ADEQUATELIGHTINGANDVENTILATION = "adequatelightingandventilation";
    private static final String KEY_ISWASTEDISPOSALFACILITY = "iswastedisposalfacility";
    private static final String KEY_WASTEDISPOSALFACILITY = "wastedisposalfacility";
    private static final String KEY_ISREGISTEROFALLINCOMING = "isregisterofallincoming";
    private static final String KEY_REGISTEROFALLINCOMING = "registerofallincoming";
    private static final String KEY_ISPROCEDURESFORPRODUCT = "isproceduresforproduct";
    private static final String KEY_PROCEDURESFORPRODUCT = "proceduresforproduct";
    private static final String KEY_ISPERSONNELHANDLINGPRODUCE = "ispersonnelhandlingproduce";
    private static final String KEY_PERSONNELHANDLINGPRODUCE = "personnelhandlingproduce";
    private static final String KEY_ISALLFARMERSREGISTERED = "isallfarmersregistered";
    private static final String KEY_ALLFARMERSREGISTERED = "allfarmersregistered";
    private static final String KEY_ISPRESENCEOFTRACEABILITY = "ispresenceoftraceability";
    private static final String KEY_PRESENCEOFTRACEABILITY = "presenceoftraceability";
    private static final String KEY_ISAVAILABILITYOFREGISTERED = "isavailabilityofregistered";
    private static final String KEY_AVAILABILITYOFREGISTERED = "availabilityofregistered";
    private static final String KEY_ISTRAININGCERTIFICATES = "istrainingcertificates";
    private static final String KEY_TRAININGCERTIFICATES = "trainingcertificates";
    private static final String KEY_ISEVIDENCEOFTECHNICAL = "isevidenceoftechnical";
    private static final String KEY_EVIDENCEOFTECHNICAL = "evidenceoftechnical";
    private static final String KEY_COMMENTS = "comments";

    public static final String CREATE_TABLE_HORTICULTURE_LICENCE_FARM_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY,"
            + KEY_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION_ID + " TEXT UNIQUE ,"
            + KEY_NAMEOFAPPLICANT + " TEXT ,"
            + KEY_DOCUMENT_NUMBER + " TEXT UNIQUE ,"
            + KEY_DOCUMENT_DATE + " TEXT ,"
            + KEY_ISADHOCINSPECTION + " TEXT ,"
            + KEY_COUNTYID + " TEXT ,"
            + KEY_SUBCOUNTYID + " TEXT ,"
            + KEY_LOCATION + " TEXT ,"
            + KEY_TELEPHONE + " TEXT ,"
            + KEY_LOCALID + " TEXT ,"
            + KEY_ISEXPORTEROWNFARM + " TEXT ,"
            + KEY_ISCONTRACTEDSOURCES + " TEXT ,"
            + KEY_FARMNAME + " TEXT ,"
            + KEY_FARMERNAME + " TEXT ,"
            + KEY_FARMERIDNUMBER + " TEXT ,"
            + KEY_FARMERTELEPHONE + " TEXT ,"
            + KEY_FARMEREMAIL + " TEXT ,"
            + KEY_FARMERCOUNTY + " TEXT ,"
            + KEY_FARMERLOCATION + " TEXT ,"
            + KEY_INTENDEDCROP + " TEXT ,"
            + KEY_ACREAGEUNDERCROP + " TEXT ,"
            + KEY_ISCCERTIFICATIONTOGAP + " TEXT ,"
            + KEY_CCERTIFICATIONTOGAP + " TEXT ,"
            + KEY_ISDULYSIGNED + " TEXT ,"
            + KEY_DULYSIGNED + " TEXT ,"
            + KEY_ISPRODUCTIONPLANPERCROP + " TEXT ,"
            + KEY_PRODUCTIONPLANPERCROP + " TEXT ,"
            + KEY_ISEXPORTERAWARE + " TEXT ,"
            + KEY_EXPORTERAWARE + " TEXT ,"
            + KEY_ISEXPORTERTRAINEDPERSONNEL + " TEXT ,"
            + KEY_EXPORTERTRAINEDPERSONNEL + " TEXT ,"
            + KEY_ISCONTROLLEDANDAPPROVED + " TEXT ,"
            + KEY_CONTROLLEDANDAPPROVED + " TEXT ,"
            + KEY_ISEXPORTERHAVEPETCIDE + " TEXT ,"
            + KEY_EXPORTERHAVEPETCIDE + " TEXT ,"
            + KEY_ISFIELDCODES + " TEXT ,"
            + KEY_FIELDCODES + " TEXT ,"
            + KEY_ISPLANTINGDATE + " TEXT ,"
            + KEY_PLANTINGDATE + " TEXT ,"
            + KEY_ISCHEMICALLISTAPPROVED + " TEXT ,"
            + KEY_CHEMICALLISTAPPROVED + " TEXT ,"
            + KEY_ISPRESENCEOFAPPROVEDSPRAY + " TEXT ,"
            + KEY_PRESENCEOFAPPROVEDSPRAY + " TEXT ,"
            + KEY_ISPRODUCTINVOICES + " TEXT ,"
            + KEY_PRODUCTINVOICES + " TEXT ,"
            + KEY_ISSPRAYRECORDS + " TEXT ,"
            + KEY_SPRAYRECORDS + " TEXT ,"
            + KEY_ISTRADENAMEOFPRODUCT + " TEXT ,"
            + KEY_TRADENAMEOFPRODUCT + " TEXT ,"
            + KEY_ISPHIRECORDED + " TEXT ,"
            + KEY_PHIRECORDED + " TEXT ,"
            + KEY_ISALLSPRAYINGDATES + " TEXT ,"
            + KEY_ALLSPRAYINGDATES + " TEXT ,"
            + KEY_ISAMOUNTOFPESTICIDE + " TEXT ,"
            + KEY_AMOUNTOFPESTICIDE + " TEXT ,"
            + KEY_ISPHIOBSERVED + " TEXT ,"
            + KEY_PHIOBSERVED + " TEXT ,"
            + KEY_ISTRAININGSCHEDULES + " TEXT ,"
            + KEY_TRAININGSCHEDULES + " TEXT ,"
            + KEY_ISPESTMANAGEMENTPROTOCOL + " TEXT ,"
            + KEY_PESTMANAGEMENTPROTOCOL + " TEXT ,"
            + KEY_ISEVIDENCEONSCOURING + " TEXT ,"
            + KEY_EVIDENCEONSCOURING + " TEXT ,"
            + KEY_ISEVIDENCEOFPESTS + " TEXT ,"
            + KEY_EVIDENCEOFPESTS + " TEXT ,"
            + KEY_ISCOLLECTIONSHEDFORFARMERS + " TEXT ,"
            + KEY_COLLECTIONSHEDFORFARMERS + " TEXT ,"
            + KEY_ISCOLLECTIONANDSORTINGSHED + " TEXT ,"
            + KEY_COLLECTIONANDSORTINGSHED + " TEXT ,"
            + KEY_ISAPPROPRIATEHYGIENE + " TEXT ,"
            + KEY_APPROPRIATEHYGIENE + " TEXT ,"
            + KEY_ISGRADINGTABLES + " TEXT ,"
            + KEY_GRADINGTABLES + " TEXT ,"
            + KEY_ISSHEDHAVERUNNINGWATER + " TEXT ,"
            + KEY_SHEDHAVERUNNINGWATER + " TEXT ,"
            + KEY_ISTOILETATFACILITY + " TEXT ,"
            + KEY_TOILETATFACILITY + " TEXT ,"
            + KEY_ISPPEGRADERS + " TEXT ,"
            + KEY_PPEGRADERS + " TEXT ,"
            + KEY_ISSTORAGEAREAFORGRADED + " TEXT ,"
            + KEY_STORAGEAREAFORGRADED + " TEXT ,"
            + KEY_ISPLASTICCRATES + " TEXT ,"
            + KEY_PLASTICCRATES + " TEXT ,"
            + KEY_ISCOLLECTIONSHEDACCESSIBLE + " TEXT ,"
            + KEY_COLLECTIONSHEDACCESSIBLE + " TEXT ,"
            + KEY_ISCOLLECTIONAREAHAVEOFFICE + " TEXT ,"
            + KEY_COLLECTIONAREAHAVEOFFICE + " TEXT ,"
            + KEY_ISCOLLECTIONSHEDEASY + " TEXT ,"
            + KEY_COLLECTIONSHEDEASY + " TEXT ,"
            + KEY_ISADEQUATELIGHTINGANDVENTILATION + " TEXT ,"
            + KEY_ADEQUATELIGHTINGANDVENTILATION + " TEXT ,"
            + KEY_ISWASTEDISPOSALFACILITY + " TEXT ,"
            + KEY_WASTEDISPOSALFACILITY + " TEXT ,"
            + KEY_ISREGISTEROFALLINCOMING + " TEXT ,"
            + KEY_REGISTEROFALLINCOMING + " TEXT ,"
            + KEY_ISPROCEDURESFORPRODUCT + " TEXT ,"
            + KEY_PROCEDURESFORPRODUCT + " TEXT ,"
            + KEY_ISPERSONNELHANDLINGPRODUCE + " TEXT ,"
            + KEY_PERSONNELHANDLINGPRODUCE + " TEXT ,"
            + KEY_ISALLFARMERSREGISTERED + " TEXT ,"
            + KEY_ALLFARMERSREGISTERED + " TEXT ,"
            + KEY_ISPRESENCEOFTRACEABILITY + " TEXT ,"
            + KEY_PRESENCEOFTRACEABILITY + " TEXT ,"
            + KEY_ISAVAILABILITYOFREGISTERED + " TEXT ,"
            + KEY_AVAILABILITYOFREGISTERED + " TEXT ,"
            + KEY_ISTRAININGCERTIFICATES + " TEXT ,"
            + KEY_TRAININGCERTIFICATES + " TEXT ,"
            + KEY_ISEVIDENCEOFTECHNICAL + " TEXT ,"
            + KEY_EVIDENCEOFTECHNICAL + " TEXT ,"
            + KEY_COMMENTS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertHorticultureCropExportLicenceFarmInspection(HorticultureCropExportLicenceFarmInspectionDetails horticultureCropExportLicenceFarmInspectionDetails) {
        System.out.println("AFA_HC_Export_Farm_Insp_ID:" + horticultureCropExportLicenceFarmInspectionDetails.getAFA_HC_Export_Farm_Insp_ID());
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, horticultureCropExportLicenceFarmInspectionDetails.getLocalID());
        values.put(KEY_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION_ID, horticultureCropExportLicenceFarmInspectionDetails.getAFA_HC_Export_Farm_Insp_ID());
        values.put(KEY_DOCUMENT_NUMBER, horticultureCropExportLicenceFarmInspectionDetails.getDocumentNumber());
        values.put(KEY_DOCUMENT_DATE, horticultureCropExportLicenceFarmInspectionDetails.getDocumentDate());
        values.put(KEY_NAMEOFAPPLICANT, horticultureCropExportLicenceFarmInspectionDetails.getNameOfApplicant());
        values.put(KEY_COUNTYID, horticultureCropExportLicenceFarmInspectionDetails.getCountyId());
        values.put(KEY_SUBCOUNTYID, horticultureCropExportLicenceFarmInspectionDetails.getSubCountyId());
        values.put(KEY_LOCATION, horticultureCropExportLicenceFarmInspectionDetails.getLocation());
        values.put(KEY_ISADHOCINSPECTION, horticultureCropExportLicenceFarmInspectionDetails.getIsAdhocInspection());
        values.put(KEY_TELEPHONE, horticultureCropExportLicenceFarmInspectionDetails.getTelephone());
        values.put(KEY_ISEXPORTEROWNFARM, horticultureCropExportLicenceFarmInspectionDetails.getIsExporterOwnFarm());
        values.put(KEY_ISCONTRACTEDSOURCES, horticultureCropExportLicenceFarmInspectionDetails.getIsContractedSources());
        values.put(KEY_FARMNAME, horticultureCropExportLicenceFarmInspectionDetails.getFarmName());
        values.put(KEY_FARMERNAME, horticultureCropExportLicenceFarmInspectionDetails.getFarmerName());
        values.put(KEY_FARMERIDNUMBER, horticultureCropExportLicenceFarmInspectionDetails.getFarmerIdNumber());
        values.put(KEY_FARMERTELEPHONE, horticultureCropExportLicenceFarmInspectionDetails.getFarmerTelephone());
        values.put(KEY_FARMEREMAIL, horticultureCropExportLicenceFarmInspectionDetails.getFarmerEmail());
        values.put(KEY_FARMERCOUNTY, horticultureCropExportLicenceFarmInspectionDetails.getFarmerCounty());
        values.put(KEY_FARMERLOCATION, horticultureCropExportLicenceFarmInspectionDetails.getFarmerLocation());
        values.put(KEY_INTENDEDCROP, horticultureCropExportLicenceFarmInspectionDetails.getIntendedCrop());
        values.put(KEY_ACREAGEUNDERCROP, horticultureCropExportLicenceFarmInspectionDetails.getAcreageUnderCrop());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isHorticultureCropExportLicenceFarmInspectionStored(horticultureCropExportLicenceFarmInspectionDetails.getAFA_HC_Export_Farm_Insp_ID())) {
            long hfedvID = db.insertWithOnConflict(TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("hfedvID" + hfedvID);
            //closeDB();
            closeDB();
            return hfedvID;
        } else {
            long hfedvID = -1;
            System.out.println("hfedvID" + hfedvID);
            //closeDB();
            closeDB();
            return hfedvID;
        }

    }

    public boolean isHorticultureCropExportLicenceFarmInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION + " WHERE " + KEY_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long updateHorticultureCropExportLicenceFarmInspection(HorticultureCropExportLicenceFarmInspection horticultureCropExportLicenceFarmInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {


            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_ISCCERTIFICATIONTOGAP, horticultureCropExportLicenceFarmInspection.getIsCcertificationToGap());
            values.put(KEY_CCERTIFICATIONTOGAP, horticultureCropExportLicenceFarmInspection.getCcertificationToGap());
            values.put(KEY_ISDULYSIGNED, horticultureCropExportLicenceFarmInspection.getIsDulySigned());
            values.put(KEY_DULYSIGNED, horticultureCropExportLicenceFarmInspection.getDulySigned());
            values.put(KEY_ISPRODUCTIONPLANPERCROP, horticultureCropExportLicenceFarmInspection.getIsProductionPlanPerCrop());
            values.put(KEY_PRODUCTIONPLANPERCROP, horticultureCropExportLicenceFarmInspection.getProductionPlanPerCrop());
            values.put(KEY_ISEXPORTERAWARE, horticultureCropExportLicenceFarmInspection.getIsExporterAware());
            values.put(KEY_EXPORTERAWARE, horticultureCropExportLicenceFarmInspection.getExporterAware());
            values.put(KEY_ISEXPORTERTRAINEDPERSONNEL, horticultureCropExportLicenceFarmInspection.getIsExporterTrainedPersonnel());
            values.put(KEY_EXPORTERTRAINEDPERSONNEL, horticultureCropExportLicenceFarmInspection.getExporterTrainedPersonnel());
            values.put(KEY_ISCONTROLLEDANDAPPROVED, horticultureCropExportLicenceFarmInspection.getIsControlledAndApproved());
            values.put(KEY_CONTROLLEDANDAPPROVED, horticultureCropExportLicenceFarmInspection.getControlledAndApproved());
            values.put(KEY_ISEXPORTERHAVEPETCIDE, horticultureCropExportLicenceFarmInspection.getIsExporterHavePetcide());
            values.put(KEY_EXPORTERHAVEPETCIDE, horticultureCropExportLicenceFarmInspection.getExporterHavePetcide());
            values.put(KEY_ISFIELDCODES, horticultureCropExportLicenceFarmInspection.getIsFieldCodes());
            values.put(KEY_FIELDCODES, horticultureCropExportLicenceFarmInspection.getFieldCodes());
            values.put(KEY_ISPLANTINGDATE, horticultureCropExportLicenceFarmInspection.getIsPlantingDate());
            values.put(KEY_PLANTINGDATE, horticultureCropExportLicenceFarmInspection.getPlantingDate());
            values.put(KEY_ISCHEMICALLISTAPPROVED, horticultureCropExportLicenceFarmInspection.getIsChemicalListApproved());
            values.put(KEY_CHEMICALLISTAPPROVED, horticultureCropExportLicenceFarmInspection.getChemicalListApproved());
            values.put(KEY_ISPRESENCEOFAPPROVEDSPRAY, horticultureCropExportLicenceFarmInspection.getIsPresenceOfApprovedSpray());
            values.put(KEY_PRESENCEOFAPPROVEDSPRAY, horticultureCropExportLicenceFarmInspection.getPresenceOfApprovedSpray());
            values.put(KEY_ISPRODUCTINVOICES, horticultureCropExportLicenceFarmInspection.getIsProductInvoices());
            values.put(KEY_PRODUCTINVOICES, horticultureCropExportLicenceFarmInspection.getProductInvoices());
            values.put(KEY_ISSPRAYRECORDS, horticultureCropExportLicenceFarmInspection.getIsSprayRecords());
            values.put(KEY_SPRAYRECORDS, horticultureCropExportLicenceFarmInspection.getSprayRecords());
            values.put(KEY_ISTRADENAMEOFPRODUCT, horticultureCropExportLicenceFarmInspection.getIsTradenameOfProduct());
            values.put(KEY_TRADENAMEOFPRODUCT, horticultureCropExportLicenceFarmInspection.getTradenameOfProduct());
            values.put(KEY_ISPHIRECORDED, horticultureCropExportLicenceFarmInspection.getIsPhiRecorded());
            values.put(KEY_PHIRECORDED, horticultureCropExportLicenceFarmInspection.getPhiRecorded());
            values.put(KEY_ISALLSPRAYINGDATES, horticultureCropExportLicenceFarmInspection.getIsAllSprayingDates());
            values.put(KEY_ALLSPRAYINGDATES, horticultureCropExportLicenceFarmInspection.getAllSprayingDates());
            values.put(KEY_ISAMOUNTOFPESTICIDE, horticultureCropExportLicenceFarmInspection.getIsAmountOfPesticide());
            values.put(KEY_AMOUNTOFPESTICIDE, horticultureCropExportLicenceFarmInspection.getAmountOfPesticide());
            values.put(KEY_ISPHIOBSERVED, horticultureCropExportLicenceFarmInspection.getIsPhiObserved());
            values.put(KEY_PHIOBSERVED, horticultureCropExportLicenceFarmInspection.getPhiObserved());
            values.put(KEY_ISTRAININGSCHEDULES, horticultureCropExportLicenceFarmInspection.getIsTrainingSchedules());
            values.put(KEY_TRAININGSCHEDULES, horticultureCropExportLicenceFarmInspection.getTrainingSchedules());
            values.put(KEY_ISPESTMANAGEMENTPROTOCOL, horticultureCropExportLicenceFarmInspection.getIsPestManagementProtocol());
            values.put(KEY_PESTMANAGEMENTPROTOCOL, horticultureCropExportLicenceFarmInspection.getPestManagementProtocol());
            values.put(KEY_ISEVIDENCEONSCOURING, horticultureCropExportLicenceFarmInspection.getIsEvidenceOnScouring());
            values.put(KEY_EVIDENCEONSCOURING, horticultureCropExportLicenceFarmInspection.getEvidenceOnScouring());
            values.put(KEY_ISEVIDENCEOFPESTS, horticultureCropExportLicenceFarmInspection.getIsEvidenceOfPests());
            values.put(KEY_EVIDENCEOFPESTS, horticultureCropExportLicenceFarmInspection.getEvidenceOfPests());
            values.put(KEY_ISCOLLECTIONSHEDFORFARMERS, horticultureCropExportLicenceFarmInspection.getIsCollectionShedForFarmers());
            values.put(KEY_COLLECTIONSHEDFORFARMERS, horticultureCropExportLicenceFarmInspection.getCollectionShedForFarmers());
            values.put(KEY_ISCOLLECTIONANDSORTINGSHED, horticultureCropExportLicenceFarmInspection.getIsCollectionAndSortingShed());
            values.put(KEY_COLLECTIONANDSORTINGSHED, horticultureCropExportLicenceFarmInspection.getCollectionAndSortingShed());
            values.put(KEY_ISAPPROPRIATEHYGIENE, horticultureCropExportLicenceFarmInspection.getIsAppropriateHygiene());
            values.put(KEY_APPROPRIATEHYGIENE, horticultureCropExportLicenceFarmInspection.getAppropriateHygiene());
            values.put(KEY_ISGRADINGTABLES, horticultureCropExportLicenceFarmInspection.getIsGradingtables());
            values.put(KEY_GRADINGTABLES, horticultureCropExportLicenceFarmInspection.getGradingtables());
            values.put(KEY_ISSHEDHAVERUNNINGWATER, horticultureCropExportLicenceFarmInspection.getIsShedHaveRunningWater());
            values.put(KEY_SHEDHAVERUNNINGWATER, horticultureCropExportLicenceFarmInspection.getShedHaveRunningWater());
            values.put(KEY_ISTOILETATFACILITY, horticultureCropExportLicenceFarmInspection.getIsToiletAtFacility());
            values.put(KEY_TOILETATFACILITY, horticultureCropExportLicenceFarmInspection.getToiletAtFacility());
            values.put(KEY_ISPPEGRADERS, horticultureCropExportLicenceFarmInspection.getIsPpeGraders());
            values.put(KEY_PPEGRADERS, horticultureCropExportLicenceFarmInspection.getPpeGraders());
            values.put(KEY_ISSTORAGEAREAFORGRADED, horticultureCropExportLicenceFarmInspection.getIsStorageAreaForGraded());
            values.put(KEY_STORAGEAREAFORGRADED, horticultureCropExportLicenceFarmInspection.getStorageAreaForGraded());
            values.put(KEY_ISPLASTICCRATES, horticultureCropExportLicenceFarmInspection.getIsPlasticCrates());
            values.put(KEY_PLASTICCRATES, horticultureCropExportLicenceFarmInspection.getPlasticCrates());
            values.put(KEY_ISCOLLECTIONSHEDACCESSIBLE, horticultureCropExportLicenceFarmInspection.getIsCollectionShedAccessible());
            values.put(KEY_COLLECTIONSHEDACCESSIBLE, horticultureCropExportLicenceFarmInspection.getCollectionShedAccessible());
            values.put(KEY_ISCOLLECTIONAREAHAVEOFFICE, horticultureCropExportLicenceFarmInspection.getIsCollectionAreaHaveOffice());
            values.put(KEY_COLLECTIONAREAHAVEOFFICE, horticultureCropExportLicenceFarmInspection.getCollectionAreaHaveOffice());
            values.put(KEY_ISCOLLECTIONSHEDEASY, horticultureCropExportLicenceFarmInspection.getIsCollectionShedEasy());
            values.put(KEY_COLLECTIONSHEDEASY, horticultureCropExportLicenceFarmInspection.getCollectionShedEasy());
            values.put(KEY_ISADEQUATELIGHTINGANDVENTILATION, horticultureCropExportLicenceFarmInspection.getIsAdequateLightingAndVentilation());
            values.put(KEY_ADEQUATELIGHTINGANDVENTILATION, horticultureCropExportLicenceFarmInspection.getAdequateLightingAndVentilation());
            values.put(KEY_ISWASTEDISPOSALFACILITY, horticultureCropExportLicenceFarmInspection.getIsWasteDisposalFacility());
            values.put(KEY_WASTEDISPOSALFACILITY, horticultureCropExportLicenceFarmInspection.getWasteDisposalFacility());
            values.put(KEY_ISREGISTEROFALLINCOMING, horticultureCropExportLicenceFarmInspection.getIsRegisterOfAllIncoming());
            values.put(KEY_REGISTEROFALLINCOMING, horticultureCropExportLicenceFarmInspection.getRegisterOfAllIncoming());
            values.put(KEY_ISPROCEDURESFORPRODUCT, horticultureCropExportLicenceFarmInspection.getIsProceduresForProduct());
            values.put(KEY_PROCEDURESFORPRODUCT, horticultureCropExportLicenceFarmInspection.getProceduresForProduct());
            values.put(KEY_ISPERSONNELHANDLINGPRODUCE, horticultureCropExportLicenceFarmInspection.getIsPersonnelHandlingProduce());
            values.put(KEY_PERSONNELHANDLINGPRODUCE, horticultureCropExportLicenceFarmInspection.getPersonnelHandlingProduce());
            values.put(KEY_ISALLFARMERSREGISTERED, horticultureCropExportLicenceFarmInspection.getIsAllFarmersRegistered());
            values.put(KEY_ALLFARMERSREGISTERED, horticultureCropExportLicenceFarmInspection.getAllFarmersRegistered());
            values.put(KEY_ISPRESENCEOFTRACEABILITY, horticultureCropExportLicenceFarmInspection.getIsPresenceOfTraceability());
            values.put(KEY_PRESENCEOFTRACEABILITY, horticultureCropExportLicenceFarmInspection.getPresenceOfTraceability());
            values.put(KEY_ISAVAILABILITYOFREGISTERED, horticultureCropExportLicenceFarmInspection.getIsAvailabilityOfRegistered());
            values.put(KEY_AVAILABILITYOFREGISTERED, horticultureCropExportLicenceFarmInspection.getAvailabilityOfRegistered());
            values.put(KEY_ISTRAININGCERTIFICATES, horticultureCropExportLicenceFarmInspection.getIsTrainingCertificates());
            values.put(KEY_TRAININGCERTIFICATES, horticultureCropExportLicenceFarmInspection.getTrainingCertificates());
            values.put(KEY_ISEVIDENCEOFTECHNICAL, horticultureCropExportLicenceFarmInspection.getIsEvidenceOfTechnical());
            values.put(KEY_EVIDENCEOFTECHNICAL, horticultureCropExportLicenceFarmInspection.getEvidenceOfTechnical());
            values.put(KEY_COMMENTS, horticultureCropExportLicenceFarmInspection.getComments());
            values.put(KEY_OFFICER_RECOMMENDATION, horticultureCropExportLicenceFarmInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, horticultureCropExportLicenceFarmInspection.getOfficerrecommendation_remark());


            result = db.update(TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION, values, "id =" + Integer.parseInt(horticultureCropExportLicenceFarmInspection.getLocalID()), null);
            System.out.println("results is " + result);

        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<HorticultureCropExportLicenceFarmInspectionDetails> getHorticultureCropExportLicenceFarmInspectionDetailsList() {

        List<HorticultureCropExportLicenceFarmInspectionDetails> horticultureCropExportLicenceFarmInspectionDetailsList = new ArrayList<HorticultureCropExportLicenceFarmInspectionDetails>();
        HorticultureCropExportLicenceFarmInspectionDetails td = new HorticultureCropExportLicenceFarmInspectionDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticultureCropExportLicenceFarmInspectionDetails();
                    td.setAFA_HC_Export_Farm_Insp_ID((c.getString((c.getColumnIndex(KEY_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION_ID)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setNameOfApplicant((c.getString((c.getColumnIndex(KEY_NAMEOFAPPLICANT)))));
                    td.setIsAdhocInspection((c.getString((c.getColumnIndex(KEY_ISADHOCINSPECTION)))));
                    td.setCountyId((c.getString((c.getColumnIndex(KEY_COUNTYID)))));
                    td.setSubCountyId((c.getString((c.getColumnIndex(KEY_SUBCOUNTYID)))));
                    td.setLocation((c.getString((c.getColumnIndex(KEY_LOCATION)))));
                    td.setTelephone((c.getString((c.getColumnIndex(KEY_TELEPHONE)))));
                    td.setLocalID((c.getString((c.getColumnIndex(KEY_ID)))));
                    td.setIsExporterOwnFarm((c.getString((c.getColumnIndex(KEY_ISEXPORTEROWNFARM)))));
                    td.setIsContractedSources((c.getString((c.getColumnIndex(KEY_ISCONTRACTEDSOURCES)))));
                    td.setFarmName((c.getString((c.getColumnIndex(KEY_FARMNAME)))));
                    td.setFarmerName((c.getString((c.getColumnIndex(KEY_FARMERNAME)))));
                    td.setFarmerIdNumber((c.getString((c.getColumnIndex(KEY_FARMERIDNUMBER)))));
                    td.setFarmerTelephone((c.getString((c.getColumnIndex(KEY_FARMERTELEPHONE)))));
                    td.setFarmerEmail((c.getString((c.getColumnIndex(KEY_FARMEREMAIL)))));
                    td.setFarmerCounty((c.getString((c.getColumnIndex(KEY_FARMERCOUNTY)))));
                    td.setFarmerLocation((c.getString((c.getColumnIndex(KEY_FARMERLOCATION)))));
                    td.setIntendedCrop((c.getString((c.getColumnIndex(KEY_INTENDEDCROP)))));
                    td.setAcreageUnderCrop((c.getString((c.getColumnIndex(KEY_ACREAGEUNDERCROP)))));
                    td.setIsCcertificationToGap((c.getString((c.getColumnIndex(KEY_ISCCERTIFICATIONTOGAP)))));
                    td.setCcertificationToGap((c.getString((c.getColumnIndex(KEY_CCERTIFICATIONTOGAP)))));
                    td.setIsDulySigned((c.getString((c.getColumnIndex(KEY_ISDULYSIGNED)))));
                    td.setDulySigned((c.getString((c.getColumnIndex(KEY_DULYSIGNED)))));
                    td.setIsProductionPlanPerCrop((c.getString((c.getColumnIndex(KEY_ISPRODUCTIONPLANPERCROP)))));
                    td.setProductionPlanPerCrop((c.getString((c.getColumnIndex(KEY_PRODUCTIONPLANPERCROP)))));
                    td.setIsExporterAware((c.getString((c.getColumnIndex(KEY_ISEXPORTERAWARE)))));
                    td.setExporterAware((c.getString((c.getColumnIndex(KEY_EXPORTERAWARE)))));
                    td.setIsExporterTrainedPersonnel((c.getString((c.getColumnIndex(KEY_ISEXPORTERTRAINEDPERSONNEL)))));
                    td.setExporterTrainedPersonnel((c.getString((c.getColumnIndex(KEY_EXPORTERTRAINEDPERSONNEL)))));
                    td.setIsControlledAndApproved((c.getString((c.getColumnIndex(KEY_ISCONTROLLEDANDAPPROVED)))));
                    td.setControlledAndApproved((c.getString((c.getColumnIndex(KEY_CONTROLLEDANDAPPROVED)))));
                    td.setIsExporterHavePetcide((c.getString((c.getColumnIndex(KEY_ISEXPORTERHAVEPETCIDE)))));
                    td.setExporterHavePetcide((c.getString((c.getColumnIndex(KEY_EXPORTERHAVEPETCIDE)))));
                    td.setIsFieldCodes((c.getString((c.getColumnIndex(KEY_ISFIELDCODES)))));
                    td.setFieldCodes((c.getString((c.getColumnIndex(KEY_FIELDCODES)))));
                    td.setIsPlantingDate((c.getString((c.getColumnIndex(KEY_ISPLANTINGDATE)))));
                    td.setPlantingDate((c.getString((c.getColumnIndex(KEY_PLANTINGDATE)))));
                    td.setIsChemicalListApproved((c.getString((c.getColumnIndex(KEY_ISCHEMICALLISTAPPROVED)))));
                    td.setChemicalListApproved((c.getString((c.getColumnIndex(KEY_CHEMICALLISTAPPROVED)))));
                    td.setIsPresenceOfApprovedSpray((c.getString((c.getColumnIndex(KEY_ISPRESENCEOFAPPROVEDSPRAY)))));
                    td.setPresenceOfApprovedSpray((c.getString((c.getColumnIndex(KEY_PRESENCEOFAPPROVEDSPRAY)))));
                    td.setIsProductInvoices((c.getString((c.getColumnIndex(KEY_ISPRODUCTINVOICES)))));
                    td.setProductInvoices((c.getString((c.getColumnIndex(KEY_PRODUCTINVOICES)))));
                    td.setIsSprayRecords((c.getString((c.getColumnIndex(KEY_ISSPRAYRECORDS)))));
                    td.setSprayRecords((c.getString((c.getColumnIndex(KEY_SPRAYRECORDS)))));
                    td.setIsTradenameOfProduct((c.getString((c.getColumnIndex(KEY_ISTRADENAMEOFPRODUCT)))));
                    td.setTradenameOfProduct((c.getString((c.getColumnIndex(KEY_TRADENAMEOFPRODUCT)))));
                    td.setIsPhiRecorded((c.getString((c.getColumnIndex(KEY_ISPHIRECORDED)))));
                    td.setPhiRecorded((c.getString((c.getColumnIndex(KEY_PHIRECORDED)))));
                    td.setIsAllSprayingDates((c.getString((c.getColumnIndex(KEY_ISALLSPRAYINGDATES)))));
                    td.setAllSprayingDates((c.getString((c.getColumnIndex(KEY_ALLSPRAYINGDATES)))));
                    td.setIsAmountOfPesticide((c.getString((c.getColumnIndex(KEY_ISAMOUNTOFPESTICIDE)))));
                    td.setAmountOfPesticide((c.getString((c.getColumnIndex(KEY_AMOUNTOFPESTICIDE)))));
                    td.setIsPhiObserved((c.getString((c.getColumnIndex(KEY_ISPHIOBSERVED)))));
                    td.setPhiObserved((c.getString((c.getColumnIndex(KEY_PHIOBSERVED)))));
                    td.setIsTrainingSchedules((c.getString((c.getColumnIndex(KEY_ISTRAININGSCHEDULES)))));
                    td.setTrainingSchedules((c.getString((c.getColumnIndex(KEY_TRAININGSCHEDULES)))));
                    td.setIsPestManagementProtocol((c.getString((c.getColumnIndex(KEY_ISPESTMANAGEMENTPROTOCOL)))));
                    td.setPestManagementProtocol((c.getString((c.getColumnIndex(KEY_PESTMANAGEMENTPROTOCOL)))));
                    td.setIsEvidenceOnScouring((c.getString((c.getColumnIndex(KEY_ISEVIDENCEONSCOURING)))));
                    td.setEvidenceOnScouring((c.getString((c.getColumnIndex(KEY_EVIDENCEONSCOURING)))));
                    td.setIsEvidenceOfPests((c.getString((c.getColumnIndex(KEY_ISEVIDENCEOFPESTS)))));
                    td.setEvidenceOfPests((c.getString((c.getColumnIndex(KEY_EVIDENCEOFPESTS)))));
                    td.setIsCollectionShedForFarmers((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONSHEDFORFARMERS)))));
                    td.setCollectionShedForFarmers((c.getString((c.getColumnIndex(KEY_COLLECTIONSHEDFORFARMERS)))));
                    td.setIsCollectionAndSortingShed((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONANDSORTINGSHED)))));
                    td.setCollectionAndSortingShed((c.getString((c.getColumnIndex(KEY_COLLECTIONANDSORTINGSHED)))));
                    td.setIsAppropriateHygiene((c.getString((c.getColumnIndex(KEY_ISAPPROPRIATEHYGIENE)))));
                    td.setAppropriateHygiene((c.getString((c.getColumnIndex(KEY_APPROPRIATEHYGIENE)))));
                    td.setIsGradingtables((c.getString((c.getColumnIndex(KEY_ISGRADINGTABLES)))));
                    td.setGradingtables((c.getString((c.getColumnIndex(KEY_GRADINGTABLES)))));
                    td.setIsShedHaveRunningWater((c.getString((c.getColumnIndex(KEY_ISSHEDHAVERUNNINGWATER)))));
                    td.setShedHaveRunningWater((c.getString((c.getColumnIndex(KEY_SHEDHAVERUNNINGWATER)))));
                    td.setIsToiletAtFacility((c.getString((c.getColumnIndex(KEY_ISTOILETATFACILITY)))));
                    td.setToiletAtFacility((c.getString((c.getColumnIndex(KEY_TOILETATFACILITY)))));
                    td.setIsPpeGraders((c.getString((c.getColumnIndex(KEY_ISPPEGRADERS)))));
                    td.setPpeGraders((c.getString((c.getColumnIndex(KEY_PPEGRADERS)))));
                    td.setIsStorageAreaForGraded((c.getString((c.getColumnIndex(KEY_ISSTORAGEAREAFORGRADED)))));
                    td.setStorageAreaForGraded((c.getString((c.getColumnIndex(KEY_STORAGEAREAFORGRADED)))));
                    td.setIsPlasticCrates((c.getString((c.getColumnIndex(KEY_ISPLASTICCRATES)))));
                    td.setPlasticCrates((c.getString((c.getColumnIndex(KEY_PLASTICCRATES)))));
                    td.setIsCollectionShedAccessible((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONSHEDACCESSIBLE)))));
                    td.setCollectionShedAccessible((c.getString((c.getColumnIndex(KEY_COLLECTIONSHEDACCESSIBLE)))));
                    td.setIsCollectionAreaHaveOffice((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONAREAHAVEOFFICE)))));
                    td.setCollectionAreaHaveOffice((c.getString((c.getColumnIndex(KEY_COLLECTIONAREAHAVEOFFICE)))));
                    td.setCollectionShedEasy((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONSHEDEASY)))));
                    td.setCollectionShedEasy((c.getString((c.getColumnIndex(KEY_COLLECTIONSHEDEASY)))));
                    td.setIsAdequateLightingAndVentilation((c.getString((c.getColumnIndex(KEY_ISADEQUATELIGHTINGANDVENTILATION)))));
                    td.setAdequateLightingAndVentilation((c.getString((c.getColumnIndex(KEY_ADEQUATELIGHTINGANDVENTILATION)))));
                    td.setIsWasteDisposalFacility((c.getString((c.getColumnIndex(KEY_ISWASTEDISPOSALFACILITY)))));
                    td.setWasteDisposalFacility((c.getString((c.getColumnIndex(KEY_WASTEDISPOSALFACILITY)))));
                    td.setIsRegisterOfAllIncoming((c.getString((c.getColumnIndex(KEY_ISREGISTEROFALLINCOMING)))));
                    td.setRegisterOfAllIncoming((c.getString((c.getColumnIndex(KEY_REGISTEROFALLINCOMING)))));
                    td.setIsProceduresForProduct((c.getString((c.getColumnIndex(KEY_ISPROCEDURESFORPRODUCT)))));
                    td.setProceduresForProduct((c.getString((c.getColumnIndex(KEY_PROCEDURESFORPRODUCT)))));
                    td.setIsPersonnelHandlingProduce((c.getString((c.getColumnIndex(KEY_ISPERSONNELHANDLINGPRODUCE)))));
                    td.setPersonnelHandlingProduce((c.getString((c.getColumnIndex(KEY_PERSONNELHANDLINGPRODUCE)))));
                    td.setIsAllFarmersRegistered((c.getString((c.getColumnIndex(KEY_ISALLFARMERSREGISTERED)))));
                    td.setAllFarmersRegistered((c.getString((c.getColumnIndex(KEY_ALLFARMERSREGISTERED)))));
                    td.setIsPresenceOfTraceability((c.getString((c.getColumnIndex(KEY_ISPRESENCEOFTRACEABILITY)))));
                    td.setPresenceOfTraceability((c.getString((c.getColumnIndex(KEY_PRESENCEOFTRACEABILITY)))));
                    td.setIsAvailabilityOfRegistered((c.getString((c.getColumnIndex(KEY_ISAVAILABILITYOFREGISTERED)))));
                    td.setAvailabilityOfRegistered((c.getString((c.getColumnIndex(KEY_AVAILABILITYOFREGISTERED)))));
                    td.setIsTrainingCertificates((c.getString((c.getColumnIndex(KEY_ISTRAININGCERTIFICATES)))));
                    td.setTrainingCertificates((c.getString((c.getColumnIndex(KEY_TRAININGCERTIFICATES)))));
                    td.setIsEvidenceOfTechnical((c.getString((c.getColumnIndex(KEY_ISEVIDENCEOFTECHNICAL)))));
                    td.setEvidenceOfTechnical((c.getString((c.getColumnIndex(KEY_EVIDENCEOFTECHNICAL)))));
                    td.setComments((c.getString((c.getColumnIndex(KEY_COMMENTS)))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list
                    horticultureCropExportLicenceFarmInspectionDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + horticultureCropExportLicenceFarmInspectionDetailsList.size());
        return horticultureCropExportLicenceFarmInspectionDetailsList;
    }

    public void deleteHorticultureCropExportLicenceFarmInspection() {
        String deleteQuery = "DELETE FROM " + TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public List<HorticultureCropExportLicenceFarmInspectionDetails> getHorticultureCropExportLicenceFarmInspectionDetailsDoneList() {

        List<HorticultureCropExportLicenceFarmInspectionDetails> horticultureCropExportLicenceFarmInspectionDetailsList = new ArrayList<HorticultureCropExportLicenceFarmInspectionDetails>();
        HorticultureCropExportLicenceFarmInspectionDetails td = new HorticultureCropExportLicenceFarmInspectionDetails();

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticultureCropExportLicenceFarmInspectionDetails();
                    td.setAFA_HC_Export_Farm_Insp_ID((c.getString((c.getColumnIndex(KEY_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION_ID)))));
                    td.setDocumentNumber((c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER)))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setNameOfApplicant((c.getString((c.getColumnIndex(KEY_NAMEOFAPPLICANT)))));
                    td.setIsAdhocInspection((c.getString((c.getColumnIndex(KEY_ISADHOCINSPECTION)))));
                    td.setCountyId((c.getString((c.getColumnIndex(KEY_COUNTYID)))));
                    td.setSubCountyId((c.getString((c.getColumnIndex(KEY_SUBCOUNTYID)))));
                    td.setLocation((c.getString((c.getColumnIndex(KEY_LOCATION)))));
                    td.setTelephone((c.getString((c.getColumnIndex(KEY_TELEPHONE)))));
                    td.setLocalID((c.getString((c.getColumnIndex(KEY_ID)))));
                    td.setIsExporterOwnFarm((c.getString((c.getColumnIndex(KEY_ISEXPORTEROWNFARM)))));
                    td.setIsContractedSources((c.getString((c.getColumnIndex(KEY_ISCONTRACTEDSOURCES)))));
                    td.setFarmName((c.getString((c.getColumnIndex(KEY_FARMNAME)))));
                    td.setFarmerName((c.getString((c.getColumnIndex(KEY_FARMERNAME)))));
                    td.setFarmerIdNumber((c.getString((c.getColumnIndex(KEY_FARMERIDNUMBER)))));
                    td.setFarmerTelephone((c.getString((c.getColumnIndex(KEY_FARMERTELEPHONE)))));
                    td.setFarmerEmail((c.getString((c.getColumnIndex(KEY_FARMEREMAIL)))));
                    td.setFarmerCounty((c.getString((c.getColumnIndex(KEY_FARMERCOUNTY)))));
                    td.setFarmerLocation((c.getString((c.getColumnIndex(KEY_FARMERLOCATION)))));
                    td.setIntendedCrop((c.getString((c.getColumnIndex(KEY_INTENDEDCROP)))));
                    td.setAcreageUnderCrop((c.getString((c.getColumnIndex(KEY_ACREAGEUNDERCROP)))));
                    td.setIsCcertificationToGap((c.getString((c.getColumnIndex(KEY_ISCCERTIFICATIONTOGAP)))));
                    td.setCcertificationToGap((c.getString((c.getColumnIndex(KEY_CCERTIFICATIONTOGAP)))));
                    td.setIsDulySigned((c.getString((c.getColumnIndex(KEY_ISDULYSIGNED)))));
                    td.setDulySigned((c.getString((c.getColumnIndex(KEY_DULYSIGNED)))));
                    td.setIsProductionPlanPerCrop((c.getString((c.getColumnIndex(KEY_ISPRODUCTIONPLANPERCROP)))));
                    td.setProductionPlanPerCrop((c.getString((c.getColumnIndex(KEY_PRODUCTIONPLANPERCROP)))));
                    td.setIsExporterAware((c.getString((c.getColumnIndex(KEY_ISEXPORTERAWARE)))));
                    td.setExporterAware((c.getString((c.getColumnIndex(KEY_EXPORTERAWARE)))));
                    td.setIsExporterTrainedPersonnel((c.getString((c.getColumnIndex(KEY_ISEXPORTERTRAINEDPERSONNEL)))));
                    td.setExporterTrainedPersonnel((c.getString((c.getColumnIndex(KEY_EXPORTERTRAINEDPERSONNEL)))));
                    td.setIsControlledAndApproved((c.getString((c.getColumnIndex(KEY_ISCONTROLLEDANDAPPROVED)))));
                    td.setControlledAndApproved((c.getString((c.getColumnIndex(KEY_CONTROLLEDANDAPPROVED)))));
                    td.setIsExporterHavePetcide((c.getString((c.getColumnIndex(KEY_ISEXPORTERHAVEPETCIDE)))));
                    td.setExporterHavePetcide((c.getString((c.getColumnIndex(KEY_EXPORTERHAVEPETCIDE)))));
                    td.setIsFieldCodes((c.getString((c.getColumnIndex(KEY_ISFIELDCODES)))));
                    td.setFieldCodes((c.getString((c.getColumnIndex(KEY_FIELDCODES)))));
                    td.setIsPlantingDate((c.getString((c.getColumnIndex(KEY_ISPLANTINGDATE)))));
                    td.setPlantingDate((c.getString((c.getColumnIndex(KEY_PLANTINGDATE)))));
                    td.setIsChemicalListApproved((c.getString((c.getColumnIndex(KEY_ISCHEMICALLISTAPPROVED)))));
                    td.setChemicalListApproved((c.getString((c.getColumnIndex(KEY_CHEMICALLISTAPPROVED)))));
                    td.setIsPresenceOfApprovedSpray((c.getString((c.getColumnIndex(KEY_ISPRESENCEOFAPPROVEDSPRAY)))));
                    td.setPresenceOfApprovedSpray((c.getString((c.getColumnIndex(KEY_PRESENCEOFAPPROVEDSPRAY)))));
                    td.setIsProductInvoices((c.getString((c.getColumnIndex(KEY_ISPRODUCTINVOICES)))));
                    td.setProductInvoices((c.getString((c.getColumnIndex(KEY_PRODUCTINVOICES)))));
                    td.setIsSprayRecords((c.getString((c.getColumnIndex(KEY_ISSPRAYRECORDS)))));
                    td.setSprayRecords((c.getString((c.getColumnIndex(KEY_SPRAYRECORDS)))));
                    td.setIsTradenameOfProduct((c.getString((c.getColumnIndex(KEY_ISTRADENAMEOFPRODUCT)))));
                    td.setTradenameOfProduct((c.getString((c.getColumnIndex(KEY_TRADENAMEOFPRODUCT)))));
                    td.setIsPhiRecorded((c.getString((c.getColumnIndex(KEY_ISPHIRECORDED)))));
                    td.setPhiRecorded((c.getString((c.getColumnIndex(KEY_PHIRECORDED)))));
                    td.setIsAllSprayingDates((c.getString((c.getColumnIndex(KEY_ISALLSPRAYINGDATES)))));
                    td.setAllSprayingDates((c.getString((c.getColumnIndex(KEY_ALLSPRAYINGDATES)))));
                    td.setIsAmountOfPesticide((c.getString((c.getColumnIndex(KEY_ISAMOUNTOFPESTICIDE)))));
                    td.setAmountOfPesticide((c.getString((c.getColumnIndex(KEY_AMOUNTOFPESTICIDE)))));
                    td.setIsPhiObserved((c.getString((c.getColumnIndex(KEY_ISPHIOBSERVED)))));
                    td.setPhiObserved((c.getString((c.getColumnIndex(KEY_PHIOBSERVED)))));
                    td.setIsTrainingSchedules((c.getString((c.getColumnIndex(KEY_ISTRAININGSCHEDULES)))));
                    td.setTrainingSchedules((c.getString((c.getColumnIndex(KEY_TRAININGSCHEDULES)))));
                    td.setIsPestManagementProtocol((c.getString((c.getColumnIndex(KEY_ISPESTMANAGEMENTPROTOCOL)))));
                    td.setPestManagementProtocol((c.getString((c.getColumnIndex(KEY_PESTMANAGEMENTPROTOCOL)))));
                    td.setIsEvidenceOnScouring((c.getString((c.getColumnIndex(KEY_ISEVIDENCEONSCOURING)))));
                    td.setEvidenceOnScouring((c.getString((c.getColumnIndex(KEY_EVIDENCEONSCOURING)))));
                    td.setIsEvidenceOfPests((c.getString((c.getColumnIndex(KEY_ISEVIDENCEOFPESTS)))));
                    td.setEvidenceOfPests((c.getString((c.getColumnIndex(KEY_EVIDENCEOFPESTS)))));
                    td.setIsCollectionShedForFarmers((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONSHEDFORFARMERS)))));
                    td.setCollectionShedForFarmers((c.getString((c.getColumnIndex(KEY_COLLECTIONSHEDFORFARMERS)))));
                    td.setIsCollectionAndSortingShed((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONANDSORTINGSHED)))));
                    td.setCollectionAndSortingShed((c.getString((c.getColumnIndex(KEY_COLLECTIONANDSORTINGSHED)))));
                    td.setIsAppropriateHygiene((c.getString((c.getColumnIndex(KEY_ISAPPROPRIATEHYGIENE)))));
                    td.setAppropriateHygiene((c.getString((c.getColumnIndex(KEY_APPROPRIATEHYGIENE)))));
                    td.setIsGradingtables((c.getString((c.getColumnIndex(KEY_ISGRADINGTABLES)))));
                    td.setGradingtables((c.getString((c.getColumnIndex(KEY_GRADINGTABLES)))));
                    td.setIsShedHaveRunningWater((c.getString((c.getColumnIndex(KEY_ISSHEDHAVERUNNINGWATER)))));
                    td.setShedHaveRunningWater((c.getString((c.getColumnIndex(KEY_SHEDHAVERUNNINGWATER)))));
                    td.setIsToiletAtFacility((c.getString((c.getColumnIndex(KEY_ISTOILETATFACILITY)))));
                    td.setToiletAtFacility((c.getString((c.getColumnIndex(KEY_TOILETATFACILITY)))));
                    td.setIsPpeGraders((c.getString((c.getColumnIndex(KEY_ISPPEGRADERS)))));
                    td.setPpeGraders((c.getString((c.getColumnIndex(KEY_PPEGRADERS)))));
                    td.setIsStorageAreaForGraded((c.getString((c.getColumnIndex(KEY_ISSTORAGEAREAFORGRADED)))));
                    td.setStorageAreaForGraded((c.getString((c.getColumnIndex(KEY_STORAGEAREAFORGRADED)))));
                    td.setIsPlasticCrates((c.getString((c.getColumnIndex(KEY_ISPLASTICCRATES)))));
                    td.setPlasticCrates((c.getString((c.getColumnIndex(KEY_PLASTICCRATES)))));
                    td.setIsCollectionShedAccessible((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONSHEDACCESSIBLE)))));
                    td.setCollectionShedAccessible((c.getString((c.getColumnIndex(KEY_COLLECTIONSHEDACCESSIBLE)))));
                    td.setIsCollectionAreaHaveOffice((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONAREAHAVEOFFICE)))));
                    td.setCollectionAreaHaveOffice((c.getString((c.getColumnIndex(KEY_COLLECTIONAREAHAVEOFFICE)))));
                    td.setCollectionShedEasy((c.getString((c.getColumnIndex(KEY_ISCOLLECTIONSHEDEASY)))));
                    td.setCollectionShedEasy((c.getString((c.getColumnIndex(KEY_COLLECTIONSHEDEASY)))));
                    td.setIsAdequateLightingAndVentilation((c.getString((c.getColumnIndex(KEY_ISADEQUATELIGHTINGANDVENTILATION)))));
                    td.setAdequateLightingAndVentilation((c.getString((c.getColumnIndex(KEY_ADEQUATELIGHTINGANDVENTILATION)))));
                    td.setIsWasteDisposalFacility((c.getString((c.getColumnIndex(KEY_ISWASTEDISPOSALFACILITY)))));
                    td.setWasteDisposalFacility((c.getString((c.getColumnIndex(KEY_WASTEDISPOSALFACILITY)))));
                    td.setIsRegisterOfAllIncoming((c.getString((c.getColumnIndex(KEY_ISREGISTEROFALLINCOMING)))));
                    td.setRegisterOfAllIncoming((c.getString((c.getColumnIndex(KEY_REGISTEROFALLINCOMING)))));
                    td.setIsProceduresForProduct((c.getString((c.getColumnIndex(KEY_ISPROCEDURESFORPRODUCT)))));
                    td.setProceduresForProduct((c.getString((c.getColumnIndex(KEY_PROCEDURESFORPRODUCT)))));
                    td.setIsPersonnelHandlingProduce((c.getString((c.getColumnIndex(KEY_ISPERSONNELHANDLINGPRODUCE)))));
                    td.setPersonnelHandlingProduce((c.getString((c.getColumnIndex(KEY_PERSONNELHANDLINGPRODUCE)))));
                    td.setIsAllFarmersRegistered((c.getString((c.getColumnIndex(KEY_ISALLFARMERSREGISTERED)))));
                    td.setAllFarmersRegistered((c.getString((c.getColumnIndex(KEY_ALLFARMERSREGISTERED)))));
                    td.setIsPresenceOfTraceability((c.getString((c.getColumnIndex(KEY_ISPRESENCEOFTRACEABILITY)))));
                    td.setPresenceOfTraceability((c.getString((c.getColumnIndex(KEY_PRESENCEOFTRACEABILITY)))));
                    td.setIsAvailabilityOfRegistered((c.getString((c.getColumnIndex(KEY_ISAVAILABILITYOFREGISTERED)))));
                    td.setAvailabilityOfRegistered((c.getString((c.getColumnIndex(KEY_AVAILABILITYOFREGISTERED)))));
                    td.setIsTrainingCertificates((c.getString((c.getColumnIndex(KEY_ISTRAININGCERTIFICATES)))));
                    td.setTrainingCertificates((c.getString((c.getColumnIndex(KEY_TRAININGCERTIFICATES)))));
                    td.setIsEvidenceOfTechnical((c.getString((c.getColumnIndex(KEY_ISEVIDENCEOFTECHNICAL)))));
                    td.setEvidenceOfTechnical((c.getString((c.getColumnIndex(KEY_EVIDENCEOFTECHNICAL)))));
                    td.setComments((c.getString((c.getColumnIndex(KEY_COMMENTS)))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    // adding to itinerary list
                    horticultureCropExportLicenceFarmInspectionDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + horticultureCropExportLicenceFarmInspectionDetailsList.size());
        return horticultureCropExportLicenceFarmInspectionDetailsList;
    }

    public boolean updateHorticultureCropExportLicenceFarmInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_HORTICULTURE_CROP_EXPORT_LICENCE_FARM_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /* END OF HORTICULTURE LICENCE FARM INSPECTION*/
    // ------------------------ Start NOCD ----------------//

    private static final String TABLE_NUTS_AND_OILS_MARKET_PRICE = "table_nuts_and_oils_market_prices";
    private static final String TABLE_NUTS_AND_OILS_MARKET_LOCATION = "table_nuts_and_oils_market_locations";

    private static final String KEY_PRODUCT = "product";
    //    private static final String KEY_BRAND_NAME = "brand_name";
    private static final String KEY_QUANTITY = "quantity";
    private static final String KEY_PRICE = "price";
    private static final String KEY_MARKET_OUTLET = "market_outlet";
    private static final String KEY_PARENT_ID = "parent_id";

    public static final String CREATE_TABLE_NUTS_AND_OILS_MARKET_PRICE = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_NUTS_AND_OILS_MARKET_PRICE + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_PARENT_ID + " TEXT ,"
            + KEY_PRODUCT + " TEXT ,"
            + KEY_BRAND_NAME + " TEXT ,"
            + KEY_QUANTITY + " TEXT ,"
            + KEY_PRICE + " TEXT ,"
            + KEY_MARKET_OUTLET + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public static final String CREATE_TABLE_NUTS_AND_OILS_MARKET_LOCATION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_NUTS_AND_OILS_MARKET_LOCATION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COUNTY_ID + " TEXT ,"
            + KEY_SUB_COUNTY_ID + " TEXT ,"
            + KEY_SUBLOCATION + " TEXT ,"
            + KEY_LONGITUDE + " TEXT ,"
            + KEY_LATITUDE + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertNOCDMarketLocation(String countyID, String subCountyID, String subLocation,
                                         String longitude, String latitude) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        System.out.println("data passed  subCountyID" + subCountyID);
        System.out.println("data passed countyID" + countyID);


        values.put(KEY_SUB_COUNTY_ID, String.valueOf(subCountyID));
        values.put(KEY_COUNTY_ID, String.valueOf(countyID));
        values.put(KEY_SUBLOCATION, String.valueOf(subLocation));
        values.put(KEY_LONGITUDE, String.valueOf(longitude));
        values.put(KEY_LATITUDE, String.valueOf(latitude));

        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyid = db.insertWithOnConflict(TABLE_NUTS_AND_OILS_MARKET_LOCATION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyid;
    }

    public List<NOCDMarketPriceSurveyDetails> getUnsentNOCDMarketLocation() {
        List<NOCDMarketPriceSurveyDetails> nocdMarketPriceSurveyDetailsList = new ArrayList<NOCDMarketPriceSurveyDetails>();
        String selectQuery = "SELECT  * FROM " + TABLE_NUTS_AND_OILS_MARKET_LOCATION + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        //db.beginTransaction();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    NOCDMarketPriceSurveyDetails td = new NOCDMarketPriceSurveyDetails();
                    td.setSubLocation(c.getString((c.getColumnIndex(KEY_SUBLOCATION))));
                    td.setSubCountyID(c.getString((c.getColumnIndex(KEY_SUB_COUNTY_ID))));
                    td.setCountyID((c.getString((c.getColumnIndex(KEY_COUNTY_ID)))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_ID))));
                    td.setLongitude(c.getString(c.getColumnIndex(KEY_LONGITUDE)));
                    td.setLatitude(c.getString(c.getColumnIndex(KEY_LATITUDE)));

                    // adding to itinerary list
                    nocdMarketPriceSurveyDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return nocdMarketPriceSurveyDetailsList;
    }


    public long insertNOCDMarketPrice(String parentID, String product, String brandName, String quantity,
                                      String price, String marketOutlet) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        System.out.println("data passed  product" + product);
        System.out.println("data passed brandName" + brandName);


        values.put(KEY_PRODUCT, product);
        values.put(KEY_BRAND_NAME, brandName);
        values.put(KEY_QUANTITY, quantity);
        values.put(KEY_PRICE, price);
        values.put(KEY_MARKET_OUTLET, marketOutlet);
        values.put(KEY_PARENT_ID, parentID);

        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long companyid = db.insertWithOnConflict(TABLE_NUTS_AND_OILS_MARKET_PRICE, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return companyid;
    }


    //the start crop details

    public List<NOCDMarketPriceSurveyDetails> getUnsentNOCDMarketPrice() {
        List<NOCDMarketPriceSurveyDetails> nocdMarketPriceSurveyDetailsList = new ArrayList<NOCDMarketPriceSurveyDetails>();
        String selectQuery = "SELECT  * FROM " + TABLE_NUTS_AND_OILS_MARKET_PRICE + " WHERE " + KEY_UPLOADED + " = 'PENDING'";


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    NOCDMarketPriceSurveyDetails td = new NOCDMarketPriceSurveyDetails();
                    td.setProduct(c.getString((c.getColumnIndex(KEY_PRODUCT))));
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setBrandName(c.getString((c.getColumnIndex(KEY_BRAND_NAME))));
                    td.setQuantity((c.getString((c.getColumnIndex(KEY_QUANTITY)))));
                    td.setPrice(c.getString(c.getColumnIndex(KEY_PRICE)));
                    td.setMarketOutlet(c.getString(c.getColumnIndex(KEY_MARKET_OUTLET)));
                    td.setParentID(c.getString(c.getColumnIndex(KEY_PARENT_ID)));

                    // adding to itinerary list
                    nocdMarketPriceSurveyDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return nocdMarketPriceSurveyDetailsList;
    }

    public boolean updateNOCDMarketPriceSurveySent(String tableName, String localID, String serverRecordID) {

        System.out.println(tableName + " " + serverRecordID);
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_SERVER_ID, serverRecordID);

            // updating row
            int result = db.update(tableName, values, KEY_ID + " = ?",
                    new String[]{String.valueOf(localID)});

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            // db.endTransaction();
            closeDB();
        }
    }

    public String getNOCDMarketPriceSurveyServerID(String localID, String tableName) {
        String selectQuery = "SELECT  * FROM " + tableName + " WHERE " + KEY_ID + " =" + localID;

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        NOCDMarketPriceSurveyDetails td = new NOCDMarketPriceSurveyDetails();

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {


                return c.getString((c.getColumnIndex(KEY_SERVER_ID)));


            }
        } finally {
            closeDB();
            if (c != null)
                c.close();  // RIGHT: ensure resource is always recovered
        }

        return null;
    }

    // ------------------------ END NOCD ----------------//


    /* END OF COFFEE EXPORTER DEALER AGENT*/


    public static final String TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION = "Flower_Consolidators_deskvetting";

    //COLUMNS names FLOWER CONSOLIDATORS INSPECTION
    private static final String KEY_FLOWER_CONSOLIDATORS_ID = "Flower_consolidators_Id";
    private static final String KEY_DOCUMENT_NO = "Fruits_and_vegetables_Id";
    //    private static final String KEY_EXPORT_LICENCE = "export_licence";
    private static final String KEY_POSTAL_ADDRESS = "postal_address";
    //    private static final String KEY_TELEPHONE = "telephone";
    private static final String KEY_EMAIL_ADDRESS = "email";
    private static final String KEY_COMPANY_LIST = "Company_List";
    private static final String KEY_COMPANY_LIST_AWARD = "Company_List_Award";
    private static final String KEY_COMPANY_LIST_TIMELINE = "Company_List_timeline";
    private static final String KEY_COMPANY_LIST_REMARKS = "Company_List_Remarks";
    private static final String KEY_VALIDITY_SUPPIERS = "Validity_Suppliers";
    private static final String KEY_VALIDITY_SUPPIERS_AWARD = "Validity_Suppliers_Award";
    private static final String KEY_VALIDITY_SUPPIERS_TIMELINE = "Validity_Suppliers_timeline";
    private static final String KEY_VALIDITY_SUPPIERS_REMARKS = "Validity_Suppliers_Remarks";
    private static final String KEY_CERTIFICATION_TO_KSH1758 = "cetification_to_ksh1758";
    private static final String KEY_CERTIFICATION_TO_KSH1758AWARD = "cetification_to_ksh1758_Award";
    private static final String KEY_CERTIFICATION_TO_KSH1758TIMELINE = "cetification_to_ksh1758_timeline";
    private static final String KEY_CERTIFICATION_TO_KSH1758REMARKS = "cetification_to_ksh1758_Remarks";
    private static final String KEY_COPY_HCD_EXPORT_LICENCE = "Hcd_Export_Licece";
    private static final String KEY_COPY_HCD_EXPORT_LICENCE_AWARD = "Hcd_Export_Licece_Award";
    private static final String KEY_COPY_HCD_EXPORT_LICENCE_TIMELINE = "Hcd_Export_Licece_timeline";
    private static final String KEY_COPY_HCD_EXPORT_LICENCE_REMARKS = "Hcd_Export_Licece_Award_Remarks";
    private static final String KEY_EVIDENCE_OF_REGISTRATION = "evidence_of_registration";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_AWARD = "evidence_of_registration_Award";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_TIMELINE = "evidence_of_registration_timeline";
    private static final String KEY_EVIDENCE_OF_REGISTRATION_REMARKS = "evidence_of_registration_Remarks";
    private static final String KEY_SINGLE_WINDOW_EVIDENCE = "evidence_single_window";
    private static final String KEY_SINGLE_WINDOW_EVIDENCE_AWARD = "evidence_single_window_Award";
    private static final String KEY_SINGLE_WINDOW_EVIDENCE_TIMELINE = "evidence_single_window_timeline";
    private static final String KEY_SINGLE_WINDOW_EVIDENCE_REMARKS = "evidence_single_window_Remarks";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758 = "Evidence_of_attendance";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_AWARD = "Evidence_of_attendance_Award";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_TIMELINE = "Evidence_of_attendance_timeline";
    private static final String KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_REMARKS = "Evidence_of_attendance_Remarks";
    private static final String KEY_VETTING_MARKS_CERTIFIED = "Vetting_marks_for_the_certified_supplier";
    private static final String KEY_VETTING_MARKS_CERTIFIED_AWARD = "Vetting_marks_for_the_certified_supplier_Award";
    private static final String KEY_VETTING_MARKS_CERTIFIED_TIMELINE = "Vetting_marks_for_the_certified_supplier_timeline";
    private static final String KEY_VETTING_MARKS_CERTIFIED_REMARKS = "Vetting_marks_for_the_certified_supplier_Remarks";
    private static final String KEY_HCD_UTILIZATION = "Hcd_Utilization_Award";
    private static final String KEY_HCD_UTILIZATION_AWARD = "Hcd_Utilization_Award_Award";
    private static final String KEY_HCD_UTILIZATION_TIMELINE = "Hcd_Utilization_Award_timeline";
    private static final String KEY_HCD_UTILIZATION_REMARKS = "Hcd_Utilization_Award_Remarks";


    public static final String CREATE_TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FLOWER_CONSOLIDATORS_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_EXPORT_LICENCE + " TEXT,"
            + KEY_POSTAL_ADDRESS + " TEXT,"
            + KEY_TELEPHONE + " TEXT,"
            + KEY_EMAIL_ADDRESS + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_COMPANY_LIST + " TEXT,"
            + KEY_COMPANY_LIST_AWARD + " TEXT,"
            + KEY_COMPANY_LIST_TIMELINE + " TEXT,"
            + KEY_COMPANY_LIST_REMARKS + " TEXT,"
            + KEY_VALIDITY_SUPPIERS + " TEXT,"
            + KEY_VALIDITY_SUPPIERS_AWARD + " TEXT,"
            + KEY_VALIDITY_SUPPIERS_TIMELINE + " TEXT,"
            + KEY_VALIDITY_SUPPIERS_REMARKS + " TEXT,"
            + KEY_CERTIFICATION_TO_KSH1758 + " TEXT,"
            + KEY_CERTIFICATION_TO_KSH1758AWARD + " TEXT,"
            + KEY_CERTIFICATION_TO_KSH1758TIMELINE + " TEXT,"
            + KEY_CERTIFICATION_TO_KSH1758REMARKS + " TEXT,"
            + KEY_COPY_HCD_EXPORT_LICENCE + " TEXT,"
            + KEY_COPY_HCD_EXPORT_LICENCE_AWARD + " TEXT,"
            + KEY_COPY_HCD_EXPORT_LICENCE_TIMELINE + " TEXT,"
            + KEY_COPY_HCD_EXPORT_LICENCE_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_REGISTRATION_REMARKS + " TEXT,"
            + KEY_SINGLE_WINDOW_EVIDENCE + " TEXT,"
            + KEY_SINGLE_WINDOW_EVIDENCE_AWARD + " TEXT,"
            + KEY_SINGLE_WINDOW_EVIDENCE_TIMELINE + " TEXT,"
            + KEY_SINGLE_WINDOW_EVIDENCE_REMARKS + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758 + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_AWARD + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_TIMELINE + " TEXT,"
            + KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_REMARKS + " TEXT,"
            + KEY_VETTING_MARKS_CERTIFIED + " TEXT,"
            + KEY_VETTING_MARKS_CERTIFIED_AWARD + " TEXT,"
            + KEY_VETTING_MARKS_CERTIFIED_TIMELINE + " TEXT,"
            + KEY_VETTING_MARKS_CERTIFIED_REMARKS + " TEXT,"
            + KEY_HCD_UTILIZATION + " TEXT,"
            + KEY_HCD_UTILIZATION_AWARD + " TEXT,"
            + KEY_HCD_UTILIZATION_TIMELINE + " TEXT,"
            + KEY_HCD_UTILIZATION_REMARKS + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_UPLOADED + " TEXT,"
            + KEY_CREATED_AT + " DATETIME" + ")";


    public long insertFlowerConslodatorsAgentrecords(FlowersConsolidators flowersConsolidators) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, flowersConsolidators.getLocalID());
        values.put(KEY_FLOWER_CONSOLIDATORS_ID, flowersConsolidators.getAfa_flower_Consolidators_Checklist_id());

        values.put(KEY_DOCUMENT_NUMBER, flowersConsolidators.getDocument_number());

        values.put(KEY_DOCUMENT_DATE, flowersConsolidators.getDocument_date());

        values.put(KEY_NAME_OF_APPLICANT, flowersConsolidators.getName_of_applicant());

        values.put(KEY_EXPORT_LICENCE, flowersConsolidators.getExport_licence());

        values.put(KEY_POSTAL_ADDRESS, flowersConsolidators.getPostal_address());

        values.put(KEY_TELEPHONE, flowersConsolidators.getTelephone());

        values.put(KEY_EMAIL_ADDRESS, flowersConsolidators.getEmail());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isHCDFlowersConsolidatorsStored(flowersConsolidators.getAfa_flower_Consolidators_Checklist_id())) {
            long flowerconsolidatorsID = db.insertWithOnConflict(TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("flowerconsolidatorsID" + flowerconsolidatorsID);
            //closeDB();
            closeDB();
            return flowerconsolidatorsID;
        } else {
            long flowerconsolidatorsID = -1;
            System.out.println("flowerconsolidatorsID" + flowerconsolidatorsID);
            //closeDB();
            closeDB();
            return flowerconsolidatorsID;
        }

    }

    public boolean isHCDFlowersConsolidatorsStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION + " WHERE " + KEY_FLOWER_CONSOLIDATORS_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long UpdateHCDFlowersConsolidators(HCDFlowersConsolidators hCDFlowersConsolidators) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_COMPANY_LIST, hCDFlowersConsolidators.getIslistofcomapanycertificate());
            values.put(KEY_COMPANY_LIST_AWARD, hCDFlowersConsolidators.getListofcomapanycertificateAward());
            values.put(KEY_COMPANY_LIST_TIMELINE, hCDFlowersConsolidators.getListofcomapanycertificateTimeline());
            values.put(KEY_COMPANY_LIST_REMARKS, hCDFlowersConsolidators.getListofcomapanycertificateRemarks());
            values.put(KEY_VALIDITY_SUPPIERS, hCDFlowersConsolidators.getIsValididtyOfSupplliers());
            values.put(KEY_VALIDITY_SUPPIERS_AWARD, hCDFlowersConsolidators.getValididtyOfSupplliersAward());
            values.put(KEY_VALIDITY_SUPPIERS_TIMELINE, hCDFlowersConsolidators.getValididtyOfSupplliersTimeline());
            values.put(KEY_VALIDITY_SUPPIERS_REMARKS, hCDFlowersConsolidators.getValididtyOfSupplliersRemarks());
            values.put(KEY_CERTIFICATION_TO_KSH1758, hCDFlowersConsolidators.getIsCertificationToksh1758());
            values.put(KEY_CERTIFICATION_TO_KSH1758AWARD, hCDFlowersConsolidators.getCertificationToksh1758Award());
            values.put(KEY_CERTIFICATION_TO_KSH1758TIMELINE, hCDFlowersConsolidators.getCertificationToksh1758Timeline());
            values.put(KEY_CERTIFICATION_TO_KSH1758REMARKS, hCDFlowersConsolidators.getCertificationToksh1758Remarks());
            values.put(KEY_COPY_HCD_EXPORT_LICENCE, hCDFlowersConsolidators.getIsCopyHcdExportlicence());
            values.put(KEY_COPY_HCD_EXPORT_LICENCE_AWARD, hCDFlowersConsolidators.getCopyHcdExportlicenceAward());
            values.put(KEY_COPY_HCD_EXPORT_LICENCE_TIMELINE, hCDFlowersConsolidators.getCopyHcdExportlicenceTimeline());
            values.put(KEY_COPY_HCD_EXPORT_LICENCE_REMARKS, hCDFlowersConsolidators.getCopyHcdExportlicenceRemarks());
            values.put(KEY_EVIDENCE_OF_REGISTRATION, hCDFlowersConsolidators.getIsEvidenceRegistrationNationalTraceability());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_AWARD, hCDFlowersConsolidators.getEvidenceRegistrationNationalTraceabilityAward());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_TIMELINE, hCDFlowersConsolidators.getEvidenceRegistrationNationalTraceabilityTimeline());
            values.put(KEY_EVIDENCE_OF_REGISTRATION_REMARKS, hCDFlowersConsolidators.getEvidenceRegistrationNationalTraceabilityRemarks());
            values.put(KEY_SINGLE_WINDOW_EVIDENCE, hCDFlowersConsolidators.getIsevidenceOfSingleWindow());
            values.put(KEY_SINGLE_WINDOW_EVIDENCE_AWARD, hCDFlowersConsolidators.getEvidenceOfSingleWindowAward());
            values.put(KEY_SINGLE_WINDOW_EVIDENCE_TIMELINE, hCDFlowersConsolidators.getEvidenceOfSingleWindowTimeline());
            values.put(KEY_SINGLE_WINDOW_EVIDENCE_REMARKS, hCDFlowersConsolidators.getEvidenceOfSingleWindowRemarks());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758, hCDFlowersConsolidators.getIsEvidenceOfAttendanceAnnualtraning());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_AWARD, hCDFlowersConsolidators.getEvidenceOfAttendanceAnnualtraningAward());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_TIMELINE, hCDFlowersConsolidators.getEvidenceOfAttendanceAnnualtraningTimeline());
            values.put(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_REMARKS, hCDFlowersConsolidators.getEvidenceOfAttendanceAnnualtraningRemarks());
            values.put(KEY_VETTING_MARKS_CERTIFIED, hCDFlowersConsolidators.getIsVettingMarksCert());
            values.put(KEY_VETTING_MARKS_CERTIFIED_AWARD, hCDFlowersConsolidators.getVettingMarksCertAward());
            values.put(KEY_VETTING_MARKS_CERTIFIED_TIMELINE, hCDFlowersConsolidators.getVettingMarksCertTimeline());
            values.put(KEY_VETTING_MARKS_CERTIFIED_REMARKS, hCDFlowersConsolidators.getVettingMarksCertRemarks());
            values.put(KEY_HCD_UTILIZATION, hCDFlowersConsolidators.getIsUtilizationHcd());
            values.put(KEY_HCD_UTILIZATION_AWARD, hCDFlowersConsolidators.getUtilizationHcdAward());
            values.put(KEY_HCD_UTILIZATION_TIMELINE, hCDFlowersConsolidators.getUtilizationHcdTimeline());
            values.put(KEY_HCD_UTILIZATION_REMARKS, hCDFlowersConsolidators.getUtilizationHcdRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, hCDFlowersConsolidators.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, hCDFlowersConsolidators.getOfficerrecommendation_remark());


            result = db.update(TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION, values, "id =" + Integer.parseInt(hCDFlowersConsolidators.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<FlowersConsolidators> getFlowersConsolidators() {

        List<FlowersConsolidators> flowersConsolidatorslist = new ArrayList<FlowersConsolidators>();
        FlowersConsolidators td = new FlowersConsolidators();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Flower consolidators data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FlowersConsolidators();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAfa_flower_Consolidators_Checklist_id(c.getString((c.getColumnIndex(KEY_FLOWER_CONSOLIDATORS_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setExport_licence((c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE)))));
                    td.setTelephone((c.getString((c.getColumnIndex(KEY_TELEPHONE)))));
                    td.setPostal_address((c.getString((c.getColumnIndex(KEY_POSTAL_ADDRESS)))));
                    td.setEmail((c.getString((c.getColumnIndex(KEY_EMAIL_ADDRESS)))));

                    // adding to itinerary list
                    flowersConsolidatorslist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + flowersConsolidatorslist.size());
        return flowersConsolidatorslist;
    }

    public List<FlowersConsolidators> getFlowersConsolidatorsDone() {

        List<FlowersConsolidators> flowersConsolidatorsList = new ArrayList<FlowersConsolidators>();
        FlowersConsolidators td = new FlowersConsolidators();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FlowersConsolidators();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAfa_flower_Consolidators_Checklist_id(c.getString((c.getColumnIndex(KEY_FLOWER_CONSOLIDATORS_ID))));
                    td.setDocument_number(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocument_date((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setName_of_applicant((c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT)))));
                    td.setExport_licence((c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE)))));
                    td.setTelephone((c.getString((c.getColumnIndex(KEY_TELEPHONE)))));
                    td.setPostal_address((c.getString((c.getColumnIndex(KEY_POSTAL_ADDRESS)))));
                    td.setEmail((c.getString((c.getColumnIndex(KEY_EMAIL_ADDRESS)))));
                    td.setIslistofcomapanycertificate((c.getString((c.getColumnIndex(KEY_COMPANY_LIST)))));
                    td.setListofcomapanycertificateAward((c.getString((c.getColumnIndex(KEY_COMPANY_LIST_AWARD)))));
                    td.setListofcomapanycertificateTimeline((c.getString((c.getColumnIndex(KEY_COMPANY_LIST_TIMELINE)))));
                    td.setListofcomapanycertificateRemarks((c.getString((c.getColumnIndex(KEY_COMPANY_LIST_REMARKS)))));
                    td.setIsValididtyOfSupplliers((c.getString((c.getColumnIndex(KEY_VALIDITY_SUPPIERS)))));
                    td.setValididtyOfSupplliersAward((c.getString((c.getColumnIndex(KEY_VALIDITY_SUPPIERS_AWARD)))));
                    td.setValididtyOfSupplliersTimeline((c.getString((c.getColumnIndex(KEY_VALIDITY_SUPPIERS_TIMELINE)))));
                    td.setValididtyOfSupplliersRemarks((c.getString((c.getColumnIndex(KEY_VALIDITY_SUPPIERS_REMARKS)))));
                    td.setIsCertificationToksh1758((c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH1758)))));
                    td.setCertificationToksh1758Award((c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH1758AWARD)))));
                    td.setCertificationToksh1758Timeline((c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH1758TIMELINE)))));
                    td.setCertificationToksh1758Remarks((c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH1758REMARKS)))));
                    td.setIsCopyHcdExportlicence((c.getString((c.getColumnIndex(KEY_COPY_HCD_EXPORT_LICENCE)))));
                    td.setCopyHcdExportlicenceAward((c.getString((c.getColumnIndex(KEY_COPY_HCD_EXPORT_LICENCE_AWARD)))));
                    td.setCopyHcdExportlicenceTimeline((c.getString((c.getColumnIndex(KEY_COPY_HCD_EXPORT_LICENCE_TIMELINE)))));
                    td.setCopyHcdExportlicenceRemarks((c.getString((c.getColumnIndex(KEY_COPY_HCD_EXPORT_LICENCE_REMARKS)))));
                    td.setIsEvidenceRegistrationNationalTraceability((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION)))));
                    td.setEvidenceRegistrationNationalTraceabilityAward((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_AWARD)))));
                    td.setEvidenceRegistrationNationalTraceabilityTimeline((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_TIMELINE)))));
                    td.setEvidenceRegistrationNationalTraceabilityRemarks((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_REGISTRATION_REMARKS)))));
                    td.setIsevidenceOfSingleWindow((c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_EVIDENCE)))));
                    td.setEvidenceOfSingleWindowAward((c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_EVIDENCE_AWARD)))));
                    td.setEvidenceOfSingleWindowTimeline((c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_EVIDENCE_TIMELINE)))));
                    td.setEvidenceOfSingleWindowRemarks((c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_EVIDENCE_REMARKS)))));
                    td.setIsEvidenceOfAttendanceAnnualtraning((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758)))));
                    td.setEvidenceOfAttendanceAnnualtraningAward((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_AWARD)))));
                    td.setEvidenceOfAttendanceAnnualtraningTimeline((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_TIMELINE)))));
                    td.setEvidenceOfAttendanceAnnualtraningRemarks((c.getString((c.getColumnIndex(KEY_EVIDENCE_OF_ATTENDANCE_ONKSH1758_REMARKS)))));
                    td.setIsVettingMarksCert((c.getString((c.getColumnIndex(KEY_VETTING_MARKS_CERTIFIED)))));
                    td.setVettingMarksCertAward((c.getString((c.getColumnIndex(KEY_VETTING_MARKS_CERTIFIED_AWARD)))));
                    td.setVettingMarksCertTimeline((c.getString((c.getColumnIndex(KEY_VETTING_MARKS_CERTIFIED_TIMELINE)))));
                    td.setVettingMarksCertRemarks((c.getString((c.getColumnIndex(KEY_VETTING_MARKS_CERTIFIED_REMARKS)))));
                    td.setIsUtilizationHcd((c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION)))));
                    td.setUtilizationHcdAward((c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_AWARD)))));
                    td.setUtilizationHcdTimeline((c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_TIMELINE)))));
                    td.setUtilizationHcdRemarks((c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REMARKS)))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    flowersConsolidatorsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + flowersConsolidatorsList.size());
        return flowersConsolidatorsList;
    }

    public void deleteHCDFlowersConsolidatorsdata() {

        String deleteQuery = "DELETE FROM " + TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean updateHCDFlowersConsolidatorsSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FLOWER_CONSOLIDATORS_DESKVETTING_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /*END OF FLOWER CONSOLIDATORS INSPECTION*/

    /*columns nursery inspection*/

    public static final String TABLE_NURSERY_INSPECTION = "nursery_nspection";
    private static final String KEY_NURSERY_INSPECTION_ID = "Nursery_Inspection_id";
    private static final String KEY_HECTARAGE = "Hectarage";
    private static final String KEY_SEEDLING = "Seedling";
    private static final String KEY_SEEDLINGDURATION = "Seedling_duration";
    private static final String KEY_NURSERYTYPE = "Nursery_type";
    private static final String KEY_KEPHISCERT = "Kephis_number";
    private static final String KEY_NURSERY_LICENCE = "Nursery_license";
    private static final String KEY_ISDISEASE_FREEE_SEEDLING = "isDisease_free_seedlings";
    private static final String KEY_DISEASEFREESEEDLINGSREMARKS = "disease_free_seedlings_remarks";
    private static final String KEY_ISFREE_FROM_ORGANIC_LITTER = "isfree_from_organic";
    private static final String KEY_FREE_FROM_ORGANIC_LITTER_REMARKS = "free_from_organic_litter_remarks";
    private static final String KEY_ISCLEAR_SEPARATION = "isclear_separation";
    private static final String KEY_CLEAR_SEPARATION_REMARKS = "clear_separation_remarks";
    private static final String KEY_ISYEAR_ROUND = "isyear_round";
    private static final String KEY_YEAR_ROUND_REMARKS = "year_round_remarks";
    private static final String KEY_ISSOIL_MEDIA = "issoil_media";
    private static final String KEY_SOIL_MEDIA_REMARKS = "soil_media_remarks";
    private static final String KEY_ISWELL_SECURED = "iswell_secured";
    private static final String KEY_WELL_SECURED_REMARKS = "well_secured_remarks";
    private static final String KEY_ISSTRUCTURES_IN_PLACE = "isstructures_in_place";
    private static final String KEY_STRUCTURES_IN_PLACE_REMARKS = "structures_in_place_remarks";
    private static final String KEY_ISSCION_SOURCE_CHECKBOX9 = "isscion_source";
    private static final String KEY_SCION_SOURCE_REMARKS = "scion_source_remarks";
    private static final String KEY_ISAPPROVED_SOURCE = "isapproved_source";
    private static final String KEY_APPROVED_SOURCE_REMARKS = "approved_source_remarks";
    private static final String KEY_ISWELL_LABELED_NURSERY = "iswell_labeled";
    private static final String KEY_WELL_LABELED_NURSERY_REMARKS = "well_labeled_remarks";
    private static final String KEY_ISDISPATCH_READY = "dispatch_ready";
    private static final String KEY_DISPATCH_READY_REMARKS = "dispatch_ready_remarks";
    private static final String KEY_ISDISTRIBUTION_RECORDS = "isdistribution_records";
    private static final String KEY_DISTRIBUTION_RECORDS_REMARKS = "distribution_records_remarks";
    private static final String KEY_ISWELL_DISPLAYED_CERTIFICATE = "iswell_displayed_certificate";
    private static final String KEY_WELL_DISPLAYED_CERTIFICATE_REMARKS = "certificate_displayed_remarks";
//    private static final String KEY_COMMENTS = "comments";


    //TABLE NURSERY INSPECTION
    public static final String CREATE_TABLE_NURSERY_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_NURSERY_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_NURSERY_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NO + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_APPLICANT_NAME + " TEXT,"
            + KEY_NURSERY_LICENCE + " TEXT,"
            + KEY_TELEPHONE + " TEXT,"
            + KEY_EMAIL_ADDRESS + " TEXT,"
            + KEY_LOCATION + " TEXT,"
            + KEY_HECTARAGE + " TEXT,"
            + KEY_NURSERYTYPE + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_ISDISEASE_FREEE_SEEDLING + " TEXT ,"
            + KEY_DISEASEFREESEEDLINGSREMARKS + " TEXT ,"
            + KEY_ISFREE_FROM_ORGANIC_LITTER + " TEXT ,"
            + KEY_FREE_FROM_ORGANIC_LITTER_REMARKS + " TEXT ,"
            + KEY_ISCLEAR_SEPARATION + " TEXT ,"
            + KEY_CLEAR_SEPARATION_REMARKS + " TEXT ,"
            + KEY_ISYEAR_ROUND + " TEXT ,"
            + KEY_YEAR_ROUND_REMARKS + " TEXT ,"
            + KEY_ISSOIL_MEDIA + " TEXT ,"
            + KEY_SOIL_MEDIA_REMARKS + " TEXT ,"
            + KEY_ISWELL_SECURED + " TEXT ,"
            + KEY_WELL_SECURED_REMARKS + " TEXT ,"
            + KEY_ISSTRUCTURES_IN_PLACE + " TEXT ,"
            + KEY_STRUCTURES_IN_PLACE_REMARKS + " TEXT ,"
            + KEY_ISSCION_SOURCE_CHECKBOX9 + " TEXT ,"
            + KEY_SCION_SOURCE_REMARKS + " TEXT ,"
            + KEY_ISAPPROVED_SOURCE + " TEXT ,"
            + KEY_APPROVED_SOURCE_REMARKS + " TEXT ,"
            + KEY_ISWELL_LABELED_NURSERY + " TEXT ,"
            + KEY_WELL_LABELED_NURSERY_REMARKS + " TEXT ,"
            + KEY_ISDISPATCH_READY + " TEXT ,"
            + KEY_DISPATCH_READY_REMARKS + " TEXT ,"
            + KEY_ISDISTRIBUTION_RECORDS + " TEXT ,"
            + KEY_DISTRIBUTION_RECORDS_REMARKS + " TEXT ,"
            + KEY_ISWELL_DISPLAYED_CERTIFICATE + " TEXT ,"
            + KEY_WELL_DISPLAYED_CERTIFICATE_REMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_COMMENTS + " TEXT ,"
            + KEY_UPLOADED + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME" + ")";


    public long insertNurseryInspection(HorticultureNurseryInspectionDetails nurseyInspection) {

        System.out.println("document number:" + nurseyInspection.getDocumentNumber());


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, nurseyInspection.getLocalID());
        values.put(KEY_NURSERY_INSPECTION_ID, nurseyInspection.getAFA_HC_Nursery_Insp_ID());

        values.put(KEY_DOCUMENT_NO, nurseyInspection.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, nurseyInspection.getDocumentDate());

        values.put(KEY_APPLICANT_NAME, nurseyInspection.getNameOfApplicant());

        values.put(KEY_NURSERY_LICENCE, nurseyInspection.getNurseryLicence());

        values.put(KEY_DOCUMENT_DATE, nurseyInspection.getDocumentDate());

        values.put(KEY_NURSERY_LICENCE, nurseyInspection.getNurseryLicence());

        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isHCDNurseryInspectionStored(nurseyInspection.getAFA_HC_Nursery_Insp_ID())) {
            long nurseyInspectionID = db.insertWithOnConflict(TABLE_NURSERY_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("nurseyInspectionID: " + nurseyInspectionID);
            closeDB();
            return nurseyInspectionID;
        } else {
            long nurseyInspectionID = -1;
            System.out.println("nurseyInspectionID: " + nurseyInspectionID);
            closeDB();
            return nurseyInspectionID;
        }
    }

    public void deleteHCDNurseryInspection() {
        String deleteQuery = "DELETE FROM " + TABLE_NURSERY_INSPECTION;
        db = dbHelper.getReadableDatabase();


        // updating row
        db.execSQL(deleteQuery);
        closeDB();
    }

    public boolean isHCDNurseryInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_NURSERY_INSPECTION + " WHERE " + KEY_NURSERY_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }


    public long UpdateHCDNurseryInspection(HCDNurseryInspection hCDNurseryInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_HECTARAGE, hCDNurseryInspection.getHectarage());
            values.put(KEY_NURSERYTYPE, hCDNurseryInspection.getSsNurseryType());
            values.put(KEY_ISDISEASE_FREEE_SEEDLING, hCDNurseryInspection.getIsDiseasefreeSeedling());
            values.put(KEY_DISEASEFREESEEDLINGSREMARKS, hCDNurseryInspection.getDiseasefreeSeedlingRemarks());
            values.put(KEY_ISFREE_FROM_ORGANIC_LITTER, hCDNurseryInspection.getIsFreefromOrganicLitter());
            values.put(KEY_FREE_FROM_ORGANIC_LITTER_REMARKS, hCDNurseryInspection.getFreefromOrganicLitterRemarks());
            values.put(KEY_ISCLEAR_SEPARATION, hCDNurseryInspection.getIsClearseparation());
            values.put(KEY_CLEAR_SEPARATION_REMARKS, hCDNurseryInspection.getClearSeparationRemarks());
            values.put(KEY_ISYEAR_ROUND, hCDNurseryInspection.getIsYearroundSourceOfWater());
            values.put(KEY_YEAR_ROUND_REMARKS, hCDNurseryInspection.getYearroundSourceOfWaterRemarks());
            values.put(KEY_ISSOIL_MEDIA, hCDNurseryInspection.getIsSoilmedia());
            values.put(KEY_SOIL_MEDIA_REMARKS, hCDNurseryInspection.getSoilMediaRemarks());
            values.put(KEY_ISWELL_SECURED, hCDNurseryInspection.getIsWellsecuredNurseryLayout());
            values.put(KEY_WELL_SECURED_REMARKS, hCDNurseryInspection.getWellsecuredNurseryLayoutRemarks());
            values.put(KEY_ISSTRUCTURES_IN_PLACE, hCDNurseryInspection.getIsArestructuresInPlace());
            values.put(KEY_STRUCTURES_IN_PLACE_REMARKS, hCDNurseryInspection.getArestructuresInPlaceRemarks());
            values.put(KEY_ISSCION_SOURCE_CHECKBOX9, hCDNurseryInspection.getIsScionsource());
            values.put(KEY_SCION_SOURCE_REMARKS, hCDNurseryInspection.getScionSourceRemarks());
            values.put(KEY_ISAPPROVED_SOURCE, hCDNurseryInspection.getIsApprovedsource());
            values.put(KEY_APPROVED_SOURCE_REMARKS, hCDNurseryInspection.getApprovedSourceRemarks());
            values.put(KEY_ISWELL_LABELED_NURSERY, hCDNurseryInspection.getIsWellLabeledNurseryblock());
            values.put(KEY_WELL_LABELED_NURSERY_REMARKS, hCDNurseryInspection.getWellLabeledNurseryBlockRemarks());
            values.put(KEY_ISDISPATCH_READY, hCDNurseryInspection.getIsReadydispatchSeedlings());
            values.put(KEY_DISPATCH_READY_REMARKS, hCDNurseryInspection.getReadydispatchSeedlingsRemarks());
            values.put(KEY_ISDISTRIBUTION_RECORDS, hCDNurseryInspection.getIsdistributionRecords());
            values.put(KEY_DISTRIBUTION_RECORDS_REMARKS, hCDNurseryInspection.getDistributionRecordsRemarks());
            values.put(KEY_ISWELL_DISPLAYED_CERTIFICATE, hCDNurseryInspection.getIsNurserycertificateWell());
            values.put(KEY_WELL_DISPLAYED_CERTIFICATE_REMARKS, hCDNurseryInspection.getNurserycertificateWellRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, hCDNurseryInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, hCDNurseryInspection.getOfficerrecommendation_remark());
            values.put(KEY_COMMENTS, hCDNurseryInspection.getOtherRemarks());

            result = db.update(TABLE_NURSERY_INSPECTION, values, "id =" + Integer.parseInt(hCDNurseryInspection.getLocalID()), null);
            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<HorticultureNurseryInspectionDetails> getNurseyInspectionList() {

        List<HorticultureNurseryInspectionDetails> nurseyInspectionlist = new ArrayList<HorticultureNurseryInspectionDetails>();
        HorticultureNurseryInspectionDetails td = new HorticultureNurseryInspectionDetails();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_NURSERY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Horticulture Nursery Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticultureNurseryInspectionDetails();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HC_Nursery_Insp_ID(c.getString((c.getColumnIndex(KEY_NURSERY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NO))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setNameOfApplicant((c.getString((c.getColumnIndex(KEY_APPLICANT_NAME)))));
                    td.setNurseryLicence((c.getString((c.getColumnIndex(KEY_NURSERY_LICENCE)))));
                    td.setTelephone((c.getString((c.getColumnIndex(KEY_TELEPHONE)))));
                    td.setEmail((c.getString((c.getColumnIndex(KEY_EMAIL_ADDRESS)))));
                    td.setLocation((c.getString((c.getColumnIndex(KEY_LOCATION)))));


                    // adding to itinerary list
                    nurseyInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + nurseyInspectionlist.size());
        return nurseyInspectionlist;
    }

    public List<HorticultureNurseryInspectionDetails> getNurseyInspectionDone() {

        List<HorticultureNurseryInspectionDetails> nurseyInspectionList = new ArrayList<HorticultureNurseryInspectionDetails>();
        HorticultureNurseryInspectionDetails td = new HorticultureNurseryInspectionDetails();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_NURSERY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HorticultureNurseryInspectionDetails();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HC_Nursery_Insp_ID(c.getString((c.getColumnIndex(KEY_NURSERY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NO))));
                    td.setDocumentDate((c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE)))));
                    td.setNameOfApplicant((c.getString((c.getColumnIndex(KEY_APPLICANT_NAME)))));
                    td.setNurseryLicence((c.getString((c.getColumnIndex(KEY_NURSERY_LICENCE)))));
                    td.setTelephone((c.getString((c.getColumnIndex(KEY_TELEPHONE)))));
                    td.setEmail((c.getString((c.getColumnIndex(KEY_EMAIL_ADDRESS)))));
                    td.setLocation((c.getString((c.getColumnIndex(KEY_LOCATION)))));
                    td.setHectarage((c.getString((c.getColumnIndex(KEY_HECTARAGE)))));
                    td.setSsNurseryType((c.getString((c.getColumnIndex(KEY_NURSERYTYPE)))));
                    td.setIsDiseasefreeSeedling((c.getString((c.getColumnIndex(KEY_ISDISEASE_FREEE_SEEDLING)))));
                    td.setDiseasefreeSeedlingRemarks((c.getString((c.getColumnIndex(KEY_DISEASEFREESEEDLINGSREMARKS)))));
                    td.setIsFreefromOrganicLitter((c.getString((c.getColumnIndex(KEY_ISFREE_FROM_ORGANIC_LITTER)))));
                    td.setFreefromOrganicLitterRemarks((c.getString((c.getColumnIndex(KEY_FREE_FROM_ORGANIC_LITTER_REMARKS)))));
                    td.setIsClearseparation((c.getString((c.getColumnIndex(KEY_ISCLEAR_SEPARATION)))));
                    td.setClearSeparationRemarks((c.getString((c.getColumnIndex(KEY_CLEAR_SEPARATION_REMARKS)))));
                    td.setIsYearroundSourceOfWater((c.getString((c.getColumnIndex(KEY_ISYEAR_ROUND)))));
                    td.setYearroundSourceOfWaterRemarks((c.getString((c.getColumnIndex(KEY_YEAR_ROUND_REMARKS)))));
                    td.setIsSoilmedia((c.getString((c.getColumnIndex(KEY_ISSOIL_MEDIA)))));
                    td.setSoilMediaRemarks((c.getString((c.getColumnIndex(KEY_SOIL_MEDIA_REMARKS)))));
                    td.setIsWellsecuredNurseryLayout((c.getString((c.getColumnIndex(KEY_ISWELL_SECURED)))));
                    td.setWellsecuredNurseryLayoutRemarks((c.getString((c.getColumnIndex(KEY_WELL_SECURED_REMARKS)))));
                    td.setIsArestructuresInPlace((c.getString((c.getColumnIndex(KEY_ISSTRUCTURES_IN_PLACE)))));
                    td.setArestructuresInPlaceRemarks((c.getString((c.getColumnIndex(KEY_STRUCTURES_IN_PLACE_REMARKS)))));
                    td.setIsScionsource((c.getString((c.getColumnIndex(KEY_ISSCION_SOURCE_CHECKBOX9)))));
                    td.setScionSourceRemarks((c.getString((c.getColumnIndex(KEY_SCION_SOURCE_REMARKS)))));
                    td.setIsApprovedsource((c.getString((c.getColumnIndex(KEY_ISAPPROVED_SOURCE)))));
                    td.setApprovedSourceRemarks((c.getString((c.getColumnIndex(KEY_APPROVED_SOURCE_REMARKS)))));
                    td.setIsWellLabeledNurseryblock((c.getString((c.getColumnIndex(KEY_ISWELL_LABELED_NURSERY)))));
                    td.setWellLabeledNurseryBlockRemarks((c.getString((c.getColumnIndex(KEY_WELL_LABELED_NURSERY_REMARKS)))));
                    td.setIsReadydispatchSeedlings((c.getString((c.getColumnIndex(KEY_ISDISPATCH_READY)))));
                    td.setReadydispatchSeedlingsRemarks((c.getString((c.getColumnIndex(KEY_DISPATCH_READY_REMARKS)))));
                    td.setIsdistributionRecords((c.getString((c.getColumnIndex(KEY_ISDISTRIBUTION_RECORDS)))));
                    td.setDistributionRecordsRemarks((c.getString((c.getColumnIndex(KEY_DISTRIBUTION_RECORDS_REMARKS)))));
                    td.setIsNurserycertificateWell((c.getString((c.getColumnIndex(KEY_ISWELL_DISPLAYED_CERTIFICATE)))));
                    td.setNurserycertificateWellRemarks((c.getString((c.getColumnIndex(KEY_WELL_DISPLAYED_CERTIFICATE_REMARKS)))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));
                    td.setOtherRemarks((c.getString((c.getColumnIndex(KEY_COMMENTS)))));

                    nurseyInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + nurseyInspectionList.size());
        return nurseyInspectionList;
    }

    public void deleteNurseyInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_NURSERY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean updateNurseyInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_NURSERY_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /*END OF NURSERY INSPECTION */

    /*columns PARKHOUSE WAREHOUSE INSPECTION*/
    public static final String TABLE_PARKHOUSE_WAREHOUSE_INSPECTION = "ParkhouseWarehouse_Inspection";
    private static final String KEY_PARKHOUSE_WAREHOUSE_ID = "Export_Licence_ID";
    //    private static final String KEY_DOCUMENT_NO = "document_number";
//    private static final String KEY_DOCUMENT_DATE = "date";
    private static final String KEY_DEALERS = "dealers";
    //    private static final String KEY_COUNTY = "county";
//    private static final String KEY_APPLICANT_NAME = "applicant_name";
//    private static final String KEY_ISADHOC= "isadhoc_inspection";
    // private static final String KEY_EMAIL_ADDRESS = "email_address";
    private static final String KEY_LOCATION_PARKHOUSE = "parkhouse_location";
    //    private static final String KEY_NAME = "name";
    private static final String KEY_TEL = "tel";
    private static final String KEY_PRODUCE_CROPS_HANDLED = "produce_handled";
    // private static final String KEY_LICENCE_NUMBER = "licence_number";
    private static final String KEY_ISCERTIFICATION_TO_FOOD_SAFETY = "food_safety";
    private static final String KEY_CERTIFICATION_TO_FOOD_SAFETY_REMARKS = "food_safety_remarks";
    private static final String KEY_ISDULY_SIGNED_CONTRACTS = "signed_contracts";
    private static final String KEY_DULY_SIGNED_CONTRACTS_REMARKS = "signed_contracts_remarks";
    private static final String KEY_ISLIST_AND_CODES = "list_and_codes";
    private static final String KEY_LIST_AND_CODES_REMARKS = "list_and_codes_remarks";
    private static final String KEY_ISINCOMING_PRODUCE = "Incoming_Produce";
    private static final String KEY_INCOMING_PRODUCE_REMARKS = "Incoming_Produce_remarks";
    private static final String KEY_ISPRODUCE_SOURCES_DECLARED = "produce_sources_declared";
    private static final String KEY_PRODUCE_SOURCES_DECLARED_REMARKS = "produce_sources_declared_remarks";
    private static final String KEY_ISCOPIES_OF_PRODUCE_COLLECTION = "copies_of_produce_collection";
    private static final String KEY_COPIES_OF_PRODUCE_COLLECTION_REMARKS = "copies_of_produce_collection_remarks";
    private static final String KEY_ISHARVEST_DATE = "harvest_date";
    private static final String KEY_HARVEST_DATE_REMARKS = "harvest_date_remarks";
    private static final String KEY_ISLAST_DATE_SPRAYED = "last_date_sprayed";
    private static final String KEY_LAST_DATE_SPRAYED_REMARKS = "last_date_sprayed_remarks";
    private static final String KEY_ISTRACEABILITY_PROCEDURE = "traceability_procedure";
    private static final String KEY_TRACEABILITY_PROCEDURE_REMARKS = "traceability_procedure_remarks";
    private static final String KEY_ISPRODUCTS_CODED = "produces_coded_and_traceable";
    private static final String KEY_PRODUCTS_CODED_REMARKS = "produces_coded_and_traceable_remarks";
    private static final String KEY_ISORDER_AND_DISPATCH = "order_and_dispatch";
    private static final String KEY_ORDER_AND_DISPATCH_REMARKS = "order_and_dispatch_remarks";
    private static final String KEY_ISCHEMICAL_LIST_APPROVED = "chemical_list_approved";
    private static final String KEY_CHEMICAL_LIST_APPROVED_REMARKS = "chemical_list_approved_remarks";
    private static final String KEY_ISTRADENAMES_RECOREDED = "tradenames_recorded";
    private static final String KEY_TRADENAMES_RECOREDED_REMARKS = "tradenames_recorded_remarks";
    private static final String KEY_ISCHEMICAL_APPLIED = "checmical_applied_recorded";
    private static final String KEY_CHEMICAL_APPLIED_REMARKS = "checmical_applied_recorded_remarks";
    private static final String KEY_ISTRAINING_SCHEDULES = "training_schedules_and_certificates";
    private static final String KEY_TRAINING_SCHEDULES_REMARKS = "training_schedules_and_certificates_remarks";
    private static final String KEY_ISLIST_OF_PRODUCE = "list_of_produce_handling_staff";
    private static final String KEY_LIST_OF_PRODUCE_REMARKS = "list_of_produce_handling_staff_remarks";
    private static final String KEY_ISPROOF_OF_TRAINING = "proof_of_training_food_safety";
    private static final String KEY_PROOF_OF_TRAINING_REMARKS = "proof_of_training_food_safety_remarks";
    private static final String KEY_ISWORKING_AREA = "working_area";
    private static final String KEY_WORKING_AREA_REMARKS = "working_area_remarks";
    private static final String KEY_ISPERSONEL_PROTECTIVES = "personel_wearing_protectives";
    private static final String KEY_PERSONEL_PROTECTIVES_REMARKS = "personel_wearing_protectives_remarks";
    private static final String KEY_ISFOOD_HANDLING_PERSONEL = "food_handling";
    private static final String KEY_FOOD_HANDLING_PERSONEL_REMARKS = "food_handling_remarks";
    private static final String KEY_ISFOOD_HANDLING_EQUIPMENT = "handling_equipment";
    private static final String KEY_FOOD_HANDLING_EQUIPMENT_REMARKS = "handling_equipment_remarks";
    private static final String KEY_ISADEQUATE_VENTILLATION = "adequate_ventiallation";
    private static final String KEY_ADEQUATE_VENTILLATION_REMARKS = "adequate_ventiallation_remarks";
    private static final String KEY_ISFACILITY_CONFORMS = "facility_conforms";
    private static final String KEY_FACILITY_CONFORMS_REMARKS = "facility_conforms_remarks";
    private static final String KEY_ISFACILITY_DESIGNS = "facility_design";
    private static final String KEY_FACILITY_DESIGNS_REMARKS = "facility_design_remarks";
    private static final String KEY_ISDISPLAYED_PROMINENT_SIGNS = "displayed_prominent_signs";
    private static final String KEY_DISPLAYED_PROMINENT_SIGNS_REMARKS = "displayed_prominent_signs_remarks";
    private static final String KEY_ISDISPLAYED_PROMINENT_SPECIFICATION = "prominent_specification";
    private static final String KEY_DISPLAYED_PROMINENT_SPECIFICATION_REMARKS = "prominent_specification_remarks";
    private static final String KEY_ISSTORAGE_AREA = "storing_area";
    private static final String KEY_STORAGE_AREA_REMARKS = "storing_area_remarks";
    private static final String KEY_ISPRODUCTS_GRADED = "products_graded";
    private static final String KEY_PRODUCTS_GRADED_REMARKS = "products_graded_remarks";
    private static final String KEY_ISPRODUCE_FOLLOW_FIFO_POLICY = "fifo_policy";
    private static final String KEY_PRODUCE_FOLLOW_FIFO_POLICY_REMARKS = "fifo_policy_remarks";
    private static final String KEY_ISACQUISITION_OF_PRODUCE_CRATES = "acquisistion_of_produce";
    private static final String KEY_ACQUISITION_OF_PRODUCE_CRATES_REMARKS = "acquisistion_of_produce_remarks";
    private static final String KEY_ISSTORAGE_AREA_SAFE_HYGIENE = "safety_hygiene_free_from_dust";
    private static final String KEY_STORAGE_AREA_SAFE_HYGIENE_REMARKS = "safety_hygiene_free_from_dust_remarks";
//    private static final String KEY_COMMENTS = "comments";


    public static final String CREATE_TABLE_PARKHOUSE_WAREHOUSE_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_PARKHOUSE_WAREHOUSE_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_PARKHOUSE_WAREHOUSE_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_DEALERS + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_TELEPHONE + " TEXT,"
            + KEY_EMAIL_ADDRESS + " TEXT,"
            + KEY_COUNTY + " TEXT,"
            + KEY_LOCATION + " TEXT,"
            + KEY_PRODUCE_CROPS_HANDLED + " TEXT,"
            + KEY_EXPORT_LICENCE + " TEXT ,"
            + KEY_NAME + " TEXT ,"
            + KEY_LOCATION_PARKHOUSE + " TEXT ,"
            + KEY_TEL + " TEXT ,"
            + KEY_LICENCE_NUMBER + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_ISCERTIFICATION_TO_FOOD_SAFETY + " TEXT ,"
            + KEY_CERTIFICATION_TO_FOOD_SAFETY_REMARKS + " TEXT ,"
            + KEY_ISDULY_SIGNED_CONTRACTS + " TEXT ,"
            + KEY_DULY_SIGNED_CONTRACTS_REMARKS + " TEXT ,"
            + KEY_ISLIST_AND_CODES + " TEXT ,"
            + KEY_LIST_AND_CODES_REMARKS + " TEXT ,"
            + KEY_ISINCOMING_PRODUCE + " TEXT ,"
            + KEY_INCOMING_PRODUCE_REMARKS + " TEXT ,"
            + KEY_ISPRODUCE_SOURCES_DECLARED + " TEXT ,"
            + KEY_PRODUCE_SOURCES_DECLARED_REMARKS + " TEXT ,"
            + KEY_ISCOPIES_OF_PRODUCE_COLLECTION + " TEXT ,"
            + KEY_COPIES_OF_PRODUCE_COLLECTION_REMARKS + " TEXT ,"
            + KEY_ISHARVEST_DATE + " TEXT ,"
            + KEY_HARVEST_DATE_REMARKS + " TEXT ,"
            + KEY_ISLAST_DATE_SPRAYED + " TEXT ,"
            + KEY_LAST_DATE_SPRAYED_REMARKS + " TEXT ,"
            + KEY_ISTRACEABILITY_PROCEDURE + " TEXT ,"
            + KEY_TRACEABILITY_PROCEDURE_REMARKS + " TEXT ,"
            + KEY_ISPRODUCTS_CODED + " TEXT ,"
            + KEY_PRODUCTS_CODED_REMARKS + " TEXT ,"
            + KEY_ISORDER_AND_DISPATCH + " TEXT ,"
            + KEY_ORDER_AND_DISPATCH_REMARKS + " TEXT ,"
            + KEY_ISCHEMICAL_LIST_APPROVED + " TEXT ,"
            + KEY_CHEMICAL_LIST_APPROVED_REMARKS + " TEXT ,"
            + KEY_ISTRADENAMES_RECOREDED + " TEXT ,"
            + KEY_TRADENAMES_RECOREDED_REMARKS + " TEXT ,"
            + KEY_ISCHEMICAL_APPLIED + " TEXT ,"
            + KEY_CHEMICAL_APPLIED_REMARKS + " TEXT ,"
            + KEY_ISTRAINING_SCHEDULES + " TEXT ,"
            + KEY_TRAINING_SCHEDULES_REMARKS + " TEXT ,"
            + KEY_ISLIST_OF_PRODUCE + " TEXT ,"
            + KEY_LIST_OF_PRODUCE_REMARKS + " TEXT ,"
            + KEY_ISPROOF_OF_TRAINING + " TEXT ,"
            + KEY_PROOF_OF_TRAINING_REMARKS + " TEXT ,"
            + KEY_ISWORKING_AREA + " TEXT ,"
            + KEY_WORKING_AREA_REMARKS + " TEXT ,"
            + KEY_ISPERSONEL_PROTECTIVES + " TEXT ,"
            + KEY_PERSONEL_PROTECTIVES_REMARKS + " TEXT ,"
            + KEY_ISFOOD_HANDLING_PERSONEL + " TEXT ,"
            + KEY_FOOD_HANDLING_PERSONEL_REMARKS + " TEXT ,"
            + KEY_ISFOOD_HANDLING_EQUIPMENT + " TEXT ,"
            + KEY_FOOD_HANDLING_EQUIPMENT_REMARKS + " TEXT ,"
            + KEY_ISADEQUATE_VENTILLATION + " TEXT ,"
            + KEY_ADEQUATE_VENTILLATION_REMARKS + " TEXT ,"
            + KEY_ISFACILITY_CONFORMS + " TEXT ,"
            + KEY_FACILITY_CONFORMS_REMARKS + " TEXT ,"
            + KEY_ISFACILITY_DESIGNS + " TEXT ,"
            + KEY_FACILITY_DESIGNS_REMARKS + " TEXT ,"
            + KEY_ISDISPLAYED_PROMINENT_SIGNS + " TEXT ,"
            + KEY_DISPLAYED_PROMINENT_SIGNS_REMARKS + " TEXT ,"
            + KEY_ISDISPLAYED_PROMINENT_SPECIFICATION + " TEXT ,"
            + KEY_DISPLAYED_PROMINENT_SPECIFICATION_REMARKS + " TEXT ,"
            + KEY_ISSTORAGE_AREA + " TEXT ,"
            + KEY_STORAGE_AREA_REMARKS + " TEXT ,"
            + KEY_ISPRODUCTS_GRADED + " TEXT ,"
            + KEY_PRODUCTS_GRADED_REMARKS + " TEXT ,"
            + KEY_ISPRODUCE_FOLLOW_FIFO_POLICY + " TEXT ,"
            + KEY_PRODUCE_FOLLOW_FIFO_POLICY_REMARKS + " TEXT ,"
            + KEY_ISACQUISITION_OF_PRODUCE_CRATES + " TEXT ,"
            + KEY_ACQUISITION_OF_PRODUCE_CRATES_REMARKS + " TEXT ,"
            + KEY_ISSTORAGE_AREA_SAFE_HYGIENE + " TEXT ,"
            + KEY_STORAGE_AREA_SAFE_HYGIENE_REMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_COMMENTS + " TEXT ,"
            + KEY_UPLOADED + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME" + ")";


    public long insertParkhouseWarehouseInspection(HCDParkhouseWarehouseDetails parkhouseWarehouse) {

        System.out.println("document number:" + parkhouseWarehouse.getDocumentNumber());

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_ID, parkhouseWarehouse.getLocalID());
        values.put(KEY_PARKHOUSE_WAREHOUSE_ID, parkhouseWarehouse.getAFA_HC_Packhouse_Insp_ID());
        values.put(KEY_DOCUMENT_NUMBER, parkhouseWarehouse.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, parkhouseWarehouse.getDocumentDate());

        values.put(KEY_DEALERS, parkhouseWarehouse.getDealerCategory());

        values.put(KEY_NAME_OF_APPLICANT, parkhouseWarehouse.getNameOfApplicant());

        values.put(KEY_TELEPHONE, parkhouseWarehouse.getTelephone());

        values.put(KEY_EMAIL_ADDRESS, parkhouseWarehouse.getEmail());

        values.put(KEY_COUNTY, parkhouseWarehouse.getCounty());

        values.put(KEY_LOCATION, parkhouseWarehouse.getLocation());

        values.put(KEY_PRODUCE_CROPS_HANDLED, parkhouseWarehouse.getProduceCrops());

        values.put(KEY_EXPORT_LICENCE, parkhouseWarehouse.getExportLicence());

        values.put(KEY_NAME, parkhouseWarehouse.getName());

        values.put(KEY_LOCATION_PARKHOUSE, parkhouseWarehouse.getLocation2());

        values.put(KEY_TEL, parkhouseWarehouse.getTel());

        values.put(KEY_LICENCE_NUMBER, parkhouseWarehouse.getLicenceNumber());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isParkhouseWarehouseStored(parkhouseWarehouse.getAFA_HC_Packhouse_Insp_ID())) {
            long parkhouseWarehouseID = db.insertWithOnConflict(TABLE_PARKHOUSE_WAREHOUSE_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("parkhouseWarehouseID: " + parkhouseWarehouseID);

            closeDB();
            return parkhouseWarehouseID;
        } else {
            long parkhouseWarehouseID = -1;
            System.out.println("parkhouseWarehouseID: " + parkhouseWarehouseID);

            closeDB();
            return parkhouseWarehouseID;
        }

    }

    public void deleteparkhouseWarehouse() {

        String deleteQuery = "DELETE FROM " + TABLE_PARKHOUSE_WAREHOUSE_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean isParkhouseWarehouseStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_PARKHOUSE_WAREHOUSE_INSPECTION + " WHERE " + KEY_PARKHOUSE_WAREHOUSE_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long UpdateparkhouseWarehouse(HCDParkhouseWarehouse hCDParkhouseWarehouse) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_ISCERTIFICATION_TO_FOOD_SAFETY, hCDParkhouseWarehouse.getIsCertificationtoSafetyStandards());
            values.put(KEY_CERTIFICATION_TO_FOOD_SAFETY_REMARKS, hCDParkhouseWarehouse.getCertificationToSafetyStandardsRemarks());
            values.put(KEY_ISDULY_SIGNED_CONTRACTS, hCDParkhouseWarehouse.getIsDulysignedExporter());
            values.put(KEY_DULY_SIGNED_CONTRACTS_REMARKS, hCDParkhouseWarehouse.getDulySignedExporterRemarks());
            values.put(KEY_ISLIST_AND_CODES, hCDParkhouseWarehouse.getIsListandCodes());
            values.put(KEY_LIST_AND_CODES_REMARKS, hCDParkhouseWarehouse.getListAndCodesRemarks());
            values.put(KEY_ISINCOMING_PRODUCE, hCDParkhouseWarehouse.getIsRegisterofIncomingProduce());
            values.put(KEY_INCOMING_PRODUCE_REMARKS, hCDParkhouseWarehouse.getRegisterOfIncomingProduceRemarks());
            values.put(KEY_ISPRODUCE_SOURCES_DECLARED, hCDParkhouseWarehouse.getIsAreproduceAndSourcesDeclared());
            values.put(KEY_PRODUCE_SOURCES_DECLARED_REMARKS, hCDParkhouseWarehouse.getAreProduceAndSourcesDeclaredRemarks());
            values.put(KEY_ISCOPIES_OF_PRODUCE_COLLECTION, hCDParkhouseWarehouse.getIsCopiesofProduceCollection());
            values.put(KEY_COPIES_OF_PRODUCE_COLLECTION_REMARKS, hCDParkhouseWarehouse.getCopiesOfProduceCollectionRemarks());
            values.put(KEY_ISHARVEST_DATE, hCDParkhouseWarehouse.getIsHarvestdateAndQuantity());
            values.put(KEY_HARVEST_DATE_REMARKS, hCDParkhouseWarehouse.getHarvestDateAndQuantityRemarks());
            values.put(KEY_ISLAST_DATE_SPRAYED, hCDParkhouseWarehouse.getIsDatelastSprayed());
            values.put(KEY_LAST_DATE_SPRAYED_REMARKS, hCDParkhouseWarehouse.getDateLastSprayedRemarks());
            values.put(KEY_ISTRACEABILITY_PROCEDURE, hCDParkhouseWarehouse.getIsDocumentedtraceability());
            values.put(KEY_TRACEABILITY_PROCEDURE_REMARKS, hCDParkhouseWarehouse.getDocumentedTraceabilityRemarks());
            values.put(KEY_ISPRODUCTS_CODED, hCDParkhouseWarehouse.getIsArePackedproductsCoded());
            values.put(KEY_PRODUCTS_CODED_REMARKS, hCDParkhouseWarehouse.getArePackedProductsCodedRemarks());
            values.put(KEY_ISORDER_AND_DISPATCH, hCDParkhouseWarehouse.getIsOrderandDispatch());
            values.put(KEY_ORDER_AND_DISPATCH_REMARKS, hCDParkhouseWarehouse.getOrderAndDispatchRemarks());
            values.put(KEY_ISCHEMICAL_LIST_APPROVED, hCDParkhouseWarehouse.getIsChemicalListapproved());
            values.put(KEY_CHEMICAL_LIST_APPROVED_REMARKS, hCDParkhouseWarehouse.getHemicallistapprovedRemarks());
            values.put(KEY_ISTRADENAMES_RECOREDED, hCDParkhouseWarehouse.getIsTradenameoftheProductRecorded());
            values.put(KEY_TRADENAMES_RECOREDED_REMARKS, hCDParkhouseWarehouse.getTradenameOftheProductRecordedRemarks());
            values.put(KEY_ISCHEMICAL_APPLIED, hCDParkhouseWarehouse.getIsAmountofChemicalAppliedRecorded());
            values.put(KEY_CHEMICAL_APPLIED_REMARKS, hCDParkhouseWarehouse.getAmountOfChemicalAppliedRecordedRemarks());
            values.put(KEY_ISTRAINING_SCHEDULES, hCDParkhouseWarehouse.getIsTrainingschedule());
            values.put(KEY_TRAINING_SCHEDULES_REMARKS, hCDParkhouseWarehouse.getTrainingScheduleRemarks());
            values.put(KEY_ISLIST_OF_PRODUCE, hCDParkhouseWarehouse.getIsListofProduceHandling());
            values.put(KEY_LIST_OF_PRODUCE_REMARKS, hCDParkhouseWarehouse.getListofProduceHandlingRemarks());
            values.put(KEY_ISPROOF_OF_TRAINING, hCDParkhouseWarehouse.getIsproofOfTraining());
            values.put(KEY_PROOF_OF_TRAINING_REMARKS, hCDParkhouseWarehouse.getProofOfTrainingRemarks());
            values.put(KEY_ISWORKING_AREA, hCDParkhouseWarehouse.getIsWorkingAreaandPremisesKept());
            values.put(KEY_WORKING_AREA_REMARKS, hCDParkhouseWarehouse.getWorkingAreaAndPremisesKeptRemarks());
            values.put(KEY_ISPERSONEL_PROTECTIVES, hCDParkhouseWarehouse.getIsPersonalwearing());
            values.put(KEY_PERSONEL_PROTECTIVES_REMARKS, hCDParkhouseWarehouse.getPersonalWearingRemarks());
            values.put(KEY_ISFOOD_HANDLING_PERSONEL, hCDParkhouseWarehouse.getIsFoodhandlingPersonel());
            values.put(KEY_FOOD_HANDLING_PERSONEL_REMARKS, hCDParkhouseWarehouse.getFoodhandlingPersonelRemarks());
            values.put(KEY_ISFOOD_HANDLING_EQUIPMENT, hCDParkhouseWarehouse.getIsFoodhandlingequipment());
            values.put(KEY_FOOD_HANDLING_EQUIPMENT_REMARKS, hCDParkhouseWarehouse.getFoodhandlingEquipmentRemarks());
            values.put(KEY_ISADEQUATE_VENTILLATION, hCDParkhouseWarehouse.getIsAdequateventillation());
            values.put(KEY_ADEQUATE_VENTILLATION_REMARKS, hCDParkhouseWarehouse.getAdequateVentillationRemarks());
            values.put(KEY_ISFACILITY_CONFORMS, hCDParkhouseWarehouse.getIsFacilityconformshealthAct());
            values.put(KEY_FACILITY_CONFORMS_REMARKS, hCDParkhouseWarehouse.getAcilityConformshealthActRemarks());
            values.put(KEY_ISFACILITY_DESIGNS, hCDParkhouseWarehouse.getIsFacilitydesigned());
            values.put(KEY_FACILITY_DESIGNS_REMARKS, hCDParkhouseWarehouse.getFacilityDesignedRemarks());
            values.put(KEY_ISDISPLAYED_PROMINENT_SIGNS, hCDParkhouseWarehouse.getIsDisplayedprominentSigns());
            values.put(KEY_DISPLAYED_PROMINENT_SIGNS_REMARKS, hCDParkhouseWarehouse.getIsplayedProminentSignsRemarks());
            values.put(KEY_ISDISPLAYED_PROMINENT_SPECIFICATION, hCDParkhouseWarehouse.getIsDisplayedProminentproduceSpecifications());
            values.put(KEY_DISPLAYED_PROMINENT_SPECIFICATION_REMARKS, hCDParkhouseWarehouse.getDisplayedProminentProduceSpecificationsRemarks());
            values.put(KEY_ISSTORAGE_AREA, hCDParkhouseWarehouse.getIsStorageareaOfPackaging());
            values.put(KEY_STORAGE_AREA_REMARKS, hCDParkhouseWarehouse.getStorageAreaOfPackagingRemarks());
            values.put(KEY_ISPRODUCTS_GRADED, hCDParkhouseWarehouse.getIsProductsgraded());
            values.put(KEY_PRODUCTS_GRADED_REMARKS, hCDParkhouseWarehouse.getProductsGradedRemarks());
            values.put(KEY_ISPRODUCE_FOLLOW_FIFO_POLICY, hCDParkhouseWarehouse.getIsProducefollowFIFO());
            values.put(KEY_PRODUCE_FOLLOW_FIFO_POLICY_REMARKS, hCDParkhouseWarehouse.getProduceFollowFIFORemarks());
            values.put(KEY_ISACQUISITION_OF_PRODUCE_CRATES, hCDParkhouseWarehouse.getIsAcquissitionofProduce());
            values.put(KEY_ACQUISITION_OF_PRODUCE_CRATES_REMARKS, hCDParkhouseWarehouse.getAcquissitionOfProduceRemarks());
            values.put(KEY_ISSTORAGE_AREA_SAFE_HYGIENE, hCDParkhouseWarehouse.getIsStorageareaSafeHygiene());
            values.put(KEY_STORAGE_AREA_SAFE_HYGIENE_REMARKS, hCDParkhouseWarehouse.getStorageAreaSafeHygieneRemarks());
            values.put(KEY_COMMENTS, hCDParkhouseWarehouse.getOtherComments());
            values.put(KEY_OFFICER_RECOMMENDATION, hCDParkhouseWarehouse.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, hCDParkhouseWarehouse.getOfficerrecommendation_remark());

            result = db.update(TABLE_PARKHOUSE_WAREHOUSE_INSPECTION, values, "id =" + Integer.parseInt(hCDParkhouseWarehouse.getLocalID()), null);
            System.out.println("results is " + result);

        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<ParkhouseWarehouse> getParkhouseWarehouseList() {

        List<ParkhouseWarehouse> parkhouseWarehouselist = new ArrayList<ParkhouseWarehouse>();
        ParkhouseWarehouse td = new ParkhouseWarehouse();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_PARKHOUSE_WAREHOUSE_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Horticulture Packhouse Warehouse data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new ParkhouseWarehouse();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setaFA_HCD_parkhouse_Warehouse_ID(c.getString((c.getColumnIndex(KEY_PARKHOUSE_WAREHOUSE_ID))));

                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));

                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));

                    td.setDealerCategory(c.getString((c.getColumnIndex(KEY_DEALERS))));

                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));

                    td.setTelephone(c.getString((c.getColumnIndex(KEY_TELEPHONE))));

                    td.setEmail(c.getString((c.getColumnIndex(KEY_EMAIL_ADDRESS))));

                    td.setCounty(c.getString((c.getColumnIndex(KEY_COUNTY))));

                    td.setLocation(c.getString((c.getColumnIndex(KEY_LOCATION))));

                    td.setProduceCrops(c.getString((c.getColumnIndex(KEY_PRODUCE_CROPS_HANDLED))));

                    td.setExportLicence(c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE))));

                    td.setName(c.getString((c.getColumnIndex(KEY_NAME))));

                    td.setLocation2(c.getString((c.getColumnIndex(KEY_LOCATION_PARKHOUSE))));

                    td.setTel(c.getString((c.getColumnIndex(KEY_TEL))));

                    td.setLicenceNumber(c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER))));


                    // adding to itinerary list
                    parkhouseWarehouselist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + parkhouseWarehouselist.size());
        return parkhouseWarehouselist;
    }

    public List<HCDParkhouseWarehouseDetails> getParkhouseWarehouseDone() {

        List<HCDParkhouseWarehouseDetails> parkhouseWarehouseList = new ArrayList<HCDParkhouseWarehouseDetails>();
        HCDParkhouseWarehouseDetails td = new HCDParkhouseWarehouseDetails();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_PARKHOUSE_WAREHOUSE_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HCDParkhouseWarehouseDetails();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HC_Packhouse_Insp_ID(c.getString((c.getColumnIndex(KEY_PARKHOUSE_WAREHOUSE_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));
                    td.setDealerCategory(c.getString((c.getColumnIndex(KEY_DEALERS))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setTelephone(c.getString((c.getColumnIndex(KEY_TELEPHONE))));
                    td.setEmail(c.getString((c.getColumnIndex(KEY_EMAIL_ADDRESS))));
                    td.setCounty(c.getString((c.getColumnIndex(KEY_COUNTY))));
                    td.setLocation(c.getString((c.getColumnIndex(KEY_LOCATION))));
                    td.setProduceCrops(c.getString((c.getColumnIndex(KEY_PRODUCE_CROPS_HANDLED))));
                    td.setExportLicence(c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE))));
                    td.setName(c.getString((c.getColumnIndex(KEY_NAME))));
                    td.setLocation2(c.getString((c.getColumnIndex(KEY_LOCATION_PARKHOUSE))));
                    td.setTel(c.getString((c.getColumnIndex(KEY_TEL))));
                    td.setLicenceNumber(c.getString((c.getColumnIndex(KEY_LICENCE_NUMBER))));

                    td.setIsCertificationtoSafetyStandards(c.getString((c.getColumnIndex(KEY_ISCERTIFICATION_TO_FOOD_SAFETY))));
                    td.setCertificationToSafetyStandardsRemarks(c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_FOOD_SAFETY_REMARKS))));
                    td.setIsDulysignedExporter(c.getString((c.getColumnIndex(KEY_ISDULY_SIGNED_CONTRACTS))));
                    td.setDulySignedExporterRemarks(c.getString((c.getColumnIndex(KEY_DULY_SIGNED_CONTRACTS_REMARKS))));
                    td.setIsListandCodes(c.getString((c.getColumnIndex(KEY_ISLIST_AND_CODES))));
                    td.setListAndCodesRemarks(c.getString((c.getColumnIndex(KEY_LIST_AND_CODES_REMARKS))));
                    td.setIsRegisterofIncomingProduce(c.getString((c.getColumnIndex(KEY_ISINCOMING_PRODUCE))));
                    td.setRegisterOfIncomingProduceRemarks(c.getString((c.getColumnIndex(KEY_INCOMING_PRODUCE_REMARKS))));
                    td.setIsAreproduceAndSourcesDeclared(c.getString((c.getColumnIndex(KEY_ISPRODUCE_SOURCES_DECLARED))));
                    td.setAreProduceAndSourcesDeclaredRemarks(c.getString((c.getColumnIndex(KEY_PRODUCE_SOURCES_DECLARED_REMARKS))));
                    td.setIsCopiesofProduceCollection(c.getString((c.getColumnIndex(KEY_ISCOPIES_OF_PRODUCE_COLLECTION))));
                    td.setCopiesOfProduceCollectionRemarks(c.getString((c.getColumnIndex(KEY_COPIES_OF_PRODUCE_COLLECTION_REMARKS))));
                    td.setIsHarvestdateAndQuantity(c.getString((c.getColumnIndex(KEY_ISHARVEST_DATE))));
                    td.setHarvestDateAndQuantityRemarks(c.getString((c.getColumnIndex(KEY_HARVEST_DATE_REMARKS))));
                    td.setIsDatelastSprayed(c.getString((c.getColumnIndex(KEY_ISLAST_DATE_SPRAYED))));
                    td.setDateLastSprayedRemarks(c.getString((c.getColumnIndex(KEY_LAST_DATE_SPRAYED_REMARKS))));
                    td.setIsDocumentedtraceability(c.getString((c.getColumnIndex(KEY_ISTRACEABILITY_PROCEDURE))));
                    td.setDocumentedTraceabilityRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_PROCEDURE_REMARKS))));
                    td.setIsArePackedproductsCoded(c.getString((c.getColumnIndex(KEY_ISPRODUCTS_CODED))));
                    td.setArePackedProductsCodedRemarks(c.getString((c.getColumnIndex(KEY_PRODUCTS_CODED_REMARKS))));
                    td.setIsOrderandDispatch(c.getString((c.getColumnIndex(KEY_ISORDER_AND_DISPATCH))));
                    td.setOrderAndDispatchRemarks(c.getString((c.getColumnIndex(KEY_ORDER_AND_DISPATCH_REMARKS))));
                    td.setIsChemicalListapproved(c.getString((c.getColumnIndex(KEY_ISCHEMICAL_LIST_APPROVED))));
                    td.setHemicallistapprovedRemarks(c.getString((c.getColumnIndex(KEY_CHEMICAL_LIST_APPROVED_REMARKS))));
                    td.setIsTradenameoftheProductRecorded(c.getString((c.getColumnIndex(KEY_ISTRADENAMES_RECOREDED))));
                    td.setTradenameOftheProductRecordedRemarks(c.getString((c.getColumnIndex(KEY_TRADENAMES_RECOREDED_REMARKS))));
                    td.setIsAmountofChemicalAppliedRecorded(c.getString((c.getColumnIndex(KEY_ISCHEMICAL_APPLIED))));
                    td.setAmountOfChemicalAppliedRecordedRemarks(c.getString((c.getColumnIndex(KEY_CHEMICAL_APPLIED_REMARKS))));
                    td.setIsTrainingschedule(c.getString((c.getColumnIndex(KEY_ISTRAINING_SCHEDULES))));
                    td.setTrainingScheduleRemarks(c.getString((c.getColumnIndex(KEY_TRAINING_SCHEDULES_REMARKS))));
                    td.setIsListofProduceHandling(c.getString((c.getColumnIndex(KEY_ISLIST_OF_PRODUCE))));
                    td.setListofProduceHandlingRemarks(c.getString((c.getColumnIndex(KEY_LIST_OF_PRODUCE_REMARKS))));
                    td.setIsproofOfTraining(c.getString((c.getColumnIndex(KEY_ISPROOF_OF_TRAINING))));
                    td.setProofOfTrainingRemarks(c.getString((c.getColumnIndex(KEY_PROOF_OF_TRAINING_REMARKS))));
                    td.setIsWorkingAreaandPremisesKept(c.getString((c.getColumnIndex(KEY_ISWORKING_AREA))));
                    td.setWorkingAreaAndPremisesKeptRemarks(c.getString((c.getColumnIndex(KEY_WORKING_AREA_REMARKS))));
                    td.setIsPersonalwearing(c.getString((c.getColumnIndex(KEY_ISPERSONEL_PROTECTIVES))));
                    td.setPersonalWearingRemarks(c.getString((c.getColumnIndex(KEY_PERSONEL_PROTECTIVES_REMARKS))));
                    td.setIsFoodhandlingPersonel(c.getString((c.getColumnIndex(KEY_ISFOOD_HANDLING_PERSONEL))));
                    td.setFoodhandlingPersonelRemarks(c.getString((c.getColumnIndex(KEY_FOOD_HANDLING_PERSONEL_REMARKS))));
                    td.setIsFoodhandlingequipment(c.getString((c.getColumnIndex(KEY_ISFOOD_HANDLING_EQUIPMENT))));
                    td.setFoodhandlingEquipmentRemarks(c.getString((c.getColumnIndex(KEY_FOOD_HANDLING_EQUIPMENT_REMARKS))));
                    td.setIsAdequateventillation(c.getString((c.getColumnIndex(KEY_ISADEQUATE_VENTILLATION))));
                    td.setAdequateVentillationRemarks(c.getString((c.getColumnIndex(KEY_ADEQUATE_VENTILLATION_REMARKS))));
                    td.setIsFacilityconformshealthAct(c.getString((c.getColumnIndex(KEY_ISFACILITY_CONFORMS))));
                    td.setAcilityConformshealthActRemarks(c.getString((c.getColumnIndex(KEY_FACILITY_CONFORMS_REMARKS))));
                    td.setIsFacilitydesigned(c.getString((c.getColumnIndex(KEY_ISFACILITY_DESIGNS))));
                    td.setFacilityDesignedRemarks(c.getString((c.getColumnIndex(KEY_FACILITY_DESIGNS_REMARKS))));
                    td.setIsDisplayedprominentSigns(c.getString((c.getColumnIndex(KEY_ISDISPLAYED_PROMINENT_SIGNS))));
                    td.setIsplayedProminentSignsRemarks(c.getString((c.getColumnIndex(KEY_DISPLAYED_PROMINENT_SIGNS_REMARKS))));
                    td.setIsDisplayedProminentproduceSpecifications(c.getString((c.getColumnIndex(KEY_ISDISPLAYED_PROMINENT_SPECIFICATION))));
                    td.setDisplayedProminentProduceSpecificationsRemarks(c.getString((c.getColumnIndex(KEY_DISPLAYED_PROMINENT_SPECIFICATION_REMARKS))));
                    td.setIsStorageareaOfPackaging(c.getString((c.getColumnIndex(KEY_ISSTORAGE_AREA))));
                    td.setStorageAreaOfPackagingRemarks(c.getString((c.getColumnIndex(KEY_STORAGE_AREA_REMARKS))));
                    td.setIsProductsgraded(c.getString((c.getColumnIndex(KEY_ISPRODUCTS_GRADED))));
                    td.setProductsGradedRemarks(c.getString((c.getColumnIndex(KEY_PRODUCTS_GRADED_REMARKS))));
                    td.setIsProducefollowFIFO(c.getString((c.getColumnIndex(KEY_ISPRODUCE_FOLLOW_FIFO_POLICY))));
                    td.setProduceFollowFIFORemarks(c.getString((c.getColumnIndex(KEY_PRODUCE_FOLLOW_FIFO_POLICY_REMARKS))));
                    td.setIsAcquissitionofProduce(c.getString((c.getColumnIndex(KEY_ISACQUISITION_OF_PRODUCE_CRATES))));
                    td.setAcquissitionOfProduceRemarks(c.getString((c.getColumnIndex(KEY_ACQUISITION_OF_PRODUCE_CRATES_REMARKS))));
                    td.setIsStorageareaSafeHygiene(c.getString((c.getColumnIndex(KEY_ISSTORAGE_AREA_SAFE_HYGIENE))));
                    td.setStorageAreaSafeHygieneRemarks(c.getString((c.getColumnIndex(KEY_STORAGE_AREA_SAFE_HYGIENE_REMARKS))));
                    td.setOtherComments(c.getString((c.getColumnIndex(KEY_COMMENTS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    parkhouseWarehouseList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + parkhouseWarehouseList.size());
        return parkhouseWarehouseList;
    }

    public boolean updateParkhouseWarehouseSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_PARKHOUSE_WAREHOUSE_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /* END OF TABLE_PARKHOUSE_WAREHOUSE_INSPECTION*/


    /*columns FRUITS AND VEGETABLES COLUMNS*/
    public static final String TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING = "Fruits_and_Vegetables_Exporters_Desk_Vetting_Checklist";

    private static final String KEY_FRUITS_AND_VEGETABLES_ID = "Fruits_and_vegetables_id";

    private static final String KEY_ISCERTIFICATION_TO_KSH_1758 = "ISCertification_to_ksh1758";
    private static final String KEY_CERTIFICATION_TO_KSH_1758_AWARD = "Certification_to_ksh1758_Corrective_Award";
    private static final String KEY_CERTIFICATION_TO_KSH_1758_TIMELINE = "Certification_to_ksh1758_Corrective_Measure";
    private static final String KEY_CERTIFICATION_TO_KSH_1758__REMARKS = "Certification_to_ksh1758_Remarks";
    private static final String KEY_ISOTHER_RECOGNIZED_STANDARDS = "Recognized_Standards";
    private static final String KEY_OTHER_RECOGNIZED_STANDARDS_AWARD = "Recognized_Standards_Award";
    private static final String KEY_OTHER_RECOGNIZED_STANDARDS_TIMELINE = "Recognized_Standards_Corrective_Measure";
    private static final String KEY_OTHER_RECOGNIZED_STANDARDS_REMARKS = "Recognized_Standards_Remarks";
    private static final String KEY_REGISTRATION_EVIDENCE = "Regitration_Evidence";
    private static final String KEY_REGISTRATION_EVIDENCE_AWARD = "Regitration_Evidence_award";
    private static final String KEY_REGISTRATION_EVIDENCE_TIMELINE = "Regitration_Evidence_TIMELINE";
    private static final String KEY_REGISTRATION_EVIDENCE_REMARKS = "Regitration_Evidence_remarks";
    private static final String KEY_SINGLE_WINDOW_REG = "Single_window";
    private static final String KEY_SINGLE_WINDOW_REG_AWARD = "Single_window_award";
    private static final String KEY_SINGLE_WINDOW_REG_TIMELINE = "Single_window_TIMELINE";
    private static final String KEY_SINGLE_WINDOW_REG_REMARKS = "Single_window_Remarks";
    private static final String KEY_HCD_EXPORT_LICENCE = "HCD_Export_Licence";
    private static final String KEY_HCD_EXPORT_LICENCE_AWARD = "HCD_Export_Licence_award";
    private static final String KEY_HCD_EXPORT_LICENCE_TIMELINE = "HCD_Export_Licence_TIMELINE";
    private static final String KEY_HCD_EXPORT_LICENCE_REMARKS = "HCD_Export_Licence_Remarks";
    private static final String KEY_TRACEABILITY_LIST_OF_THE_COMPANY = "Traceability_List";
    private static final String KEY_TRACEABILITY_LIST_OF_THE_COMPANY_AWARD = "Traceability_List_award";
    private static final String KEY_TRACEABILITY_LIST_OF_THE_COMPANY_REMARKS = "Traceability_List_Remarks";
    private static final String KEY_TRACEABILITY_LIST_OF_THE_COMPANY_TIMELINE = "Traceability_List_TIMELINE";
    private static final String KEY_MARKETING_AGENTS = "Marketing_Agents";
    private static final String KEY_MARKETING_AGENTS_AWARD = "Marketing_Agents_award";
    private static final String KEY_MARKETING_AGENTS_TIMELINE = "Marketing_Agents_TIMELINE";
    private static final String KEY_MARKETING_AGENTS_REMARKS = "Marketing_Agents_Remarks";
    private static final String KEY_HCD_UTILIZATION_REGISTERED = "Hcd_utilization";
    private static final String KEY_HCD_UTILIZATION_REGISTERED_AWARD = "Hcd_utilization_award";
    private static final String KEY_HCD_UTILIZATION_REGISTERED_TIMELINE = "Hcd_utilization_TIMELINE";
    private static final String KEY_HCD_UTILIZATION_REGISTERED_REMARKS = "Hcd_utilization_Remarks";
    private static final String KEY_TRACEABILTY_SYSTEM_QMS = "Traceability_System";
    private static final String KEY_TRACEABILTY_SYSTEM_QMS_AWARD = "Traceability_System_award";
    private static final String KEY_TRACEABILTY_SYSTEM_QMS_REMARKS = "Traceability_System_Remarks";
    private static final String KEY_TRACEABILTY_SYSTEM_QMS_TIMELINE = "Traceability_System_TIMELINE";
    private static final String KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG = "Attendance_Evidence";
    private static final String KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_AWARD = "Attendance_Evidence_award";
    private static final String KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_TIMELINE = "Attendance_Evidence_TIMELINE";
    private static final String KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_REMARKS = "Attendance_Evidence_Remarks";
    private static final String KEY_TRAINING_MATRIX = "Training_Matrix";
    private static final String KEY_TRAINING_MATRIX_AWARD = "Training_Matrix_award";
    private static final String KEY_TRAINING_MATRIX_REMARKS = "Training_Matrix_Remarks";
    private static final String KEY_TRAINING_MATRIX_TIMELINE = "Training_Matrix_TIMELINE";
    private static final String KEY_EVIDENCE_PEST_DISEASES = "Pest_and_Diseases";
    private static final String KEY_EVIDENCE_PEST_DISEASES_AWARD = "Pest_and_Diseases_award";
    private static final String KEY_EVIDENCE_PEST_DISEASES_REMARKS = "Pest_and_Diseases_Remarks";
    private static final String KEY_EVIDENCE_PEST_DISEASES_TIMELINE = "Pest_and_Diseases_TIMELINE";
    private static final String KEY_CLAIMS_ON_NON_PAYMENT = "Claims";
    private static final String KEY_CLAIMS_AWARD_CLAIMS_ON_NON_PAYMENT = "Claim_award";
    private static final String KEY_CLAIMS_REMARKS_CLAIMS_ON_NON_PAYMENT = "Claim_Remarks";
    private static final String KEY_CLAIMS_TIMELINE_CLAIMS_ON_NON_PAYMENT = "Claim_TIMELINE";

    public static final String CREATE_TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FRUITS_AND_VEGETABLES_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_TELEPHONE + " TEXT,"
            + KEY_POSTAL_ADDRESS + " TEXT,"
            + KEY_EXPORT_LICENCE + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_ISCERTIFICATION_TO_KSH_1758 + " TEXT ,"
            + KEY_CERTIFICATION_TO_KSH_1758_AWARD + " TEXT ,"
            + KEY_CERTIFICATION_TO_KSH_1758_TIMELINE + " TEXT ,"
            + KEY_CERTIFICATION_TO_KSH_1758__REMARKS + " TEXT ,"
            + KEY_ISOTHER_RECOGNIZED_STANDARDS + " TEXT ,"
            + KEY_OTHER_RECOGNIZED_STANDARDS_AWARD + " TEXT ,"
            + KEY_OTHER_RECOGNIZED_STANDARDS_TIMELINE + " TEXT ,"
            + KEY_OTHER_RECOGNIZED_STANDARDS_REMARKS + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE_AWARD + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE_TIMELINE + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE_REMARKS + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG_AWARD + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG_TIMELINE + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG_REMARKS + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE_AWARD + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE_TIMELINE + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE_REMARKS + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY_AWARD + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY_REMARKS + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY_TIMELINE + " TEXT ,"
            + KEY_MARKETING_AGENTS + " TEXT ,"
            + KEY_MARKETING_AGENTS_AWARD + " TEXT ,"
            + KEY_MARKETING_AGENTS_TIMELINE + " TEXT ,"
            + KEY_MARKETING_AGENTS_REMARKS + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED_AWARD + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED_TIMELINE + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED_REMARKS + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS_AWARD + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS_REMARKS + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS_TIMELINE + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_AWARD + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_TIMELINE + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_REMARKS + " TEXT ,"
            + KEY_TRAINING_MATRIX + " TEXT ,"
            + KEY_TRAINING_MATRIX_AWARD + " TEXT ,"
            + KEY_TRAINING_MATRIX_REMARKS + " TEXT ,"
            + KEY_TRAINING_MATRIX_TIMELINE + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES_AWARD + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES_REMARKS + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES_TIMELINE + " TEXT ,"
            + KEY_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_CLAIMS_AWARD_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_CLAIMS_REMARKS_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_CLAIMS_TIMELINE_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_UPLOADED + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME" + ")";


    public long insertFruitsAndVegetablesExporters(FruitsAndVegetablesExporters fruitsAndVegetablesExporters) {


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_ID, fruitsAndVegetablesExporters.getLocalID());
        values.put(KEY_FRUITS_AND_VEGETABLES_ID, fruitsAndVegetablesExporters.getaFA_HCD_Fruits_Vegetables_Exporterse_ID());
        values.put(KEY_DOCUMENT_NUMBER, fruitsAndVegetablesExporters.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, fruitsAndVegetablesExporters.getDocumentDate());

        values.put(KEY_NAME_OF_APPLICANT, fruitsAndVegetablesExporters.getNameOfApplicant());

        values.put(KEY_TELEPHONE, fruitsAndVegetablesExporters.getTelephone());

        values.put(KEY_POSTAL_ADDRESS, fruitsAndVegetablesExporters.getPostaladdress());

        values.put(KEY_EXPORT_LICENCE, fruitsAndVegetablesExporters.getExportLicence());

        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isFruitsVegetablesExportersDeskVettingStored(fruitsAndVegetablesExporters.getaFA_HCD_Fruits_Vegetables_Exporterse_ID())) {
            long fruitsAndVegetablesExportersID = db.insertWithOnConflict(TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("fruitsAndVegetablesExportersID: " + fruitsAndVegetablesExportersID);

            closeDB();
            return fruitsAndVegetablesExportersID;
        } else {
            long fruitsAndVegetablesExportersID = -1;
            System.out.println("fruitsAndVegetablesExportersID: " + fruitsAndVegetablesExportersID);

            closeDB();
            return fruitsAndVegetablesExportersID;
        }

    }

    public boolean isFruitsVegetablesExportersDeskVettingStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING + " WHERE " + KEY_FRUITS_AND_VEGETABLES_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long UpdateFruitsVegetablesExportersDeskVetting(FruitsVegetablesExportersDeskVetting fruitsVegetablesExportersDeskVetting) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");


            values.put(KEY_ISCERTIFICATION_TO_KSH_1758, fruitsVegetablesExportersDeskVetting.getIsCertificationtoKsh1758());
            values.put(KEY_CERTIFICATION_TO_KSH_1758_AWARD, fruitsVegetablesExportersDeskVetting.getCertificationtoKsh1758Award());
            values.put(KEY_CERTIFICATION_TO_KSH_1758_TIMELINE, fruitsVegetablesExportersDeskVetting.getCertificationtoKsh1758Timeline());
            values.put(KEY_CERTIFICATION_TO_KSH_1758__REMARKS, fruitsVegetablesExportersDeskVetting.getCertificationtoKsh1758Remarks());
            values.put(KEY_ISOTHER_RECOGNIZED_STANDARDS, fruitsVegetablesExportersDeskVetting.getIsOtherRecognizedstandards());
            values.put(KEY_OTHER_RECOGNIZED_STANDARDS_AWARD, fruitsVegetablesExportersDeskVetting.getOtherRecognizedstandardsAward());
            values.put(KEY_OTHER_RECOGNIZED_STANDARDS_TIMELINE, fruitsVegetablesExportersDeskVetting.getOtherRecognizedstandardsTimeline());
            values.put(KEY_OTHER_RECOGNIZED_STANDARDS_REMARKS, fruitsVegetablesExportersDeskVetting.getOtherRecognizedstandardsremarks());
            values.put(KEY_REGISTRATION_EVIDENCE, fruitsVegetablesExportersDeskVetting.getIsEvidenceofRegonNaionalTraceability());
            values.put(KEY_REGISTRATION_EVIDENCE_AWARD, fruitsVegetablesExportersDeskVetting.getEvidenceofRegonNaionalTraceabilityAward());
            values.put(KEY_REGISTRATION_EVIDENCE_TIMELINE, fruitsVegetablesExportersDeskVetting.getEvidenceofRegonNaionalTraceabilityTimeline());
            values.put(KEY_REGISTRATION_EVIDENCE_REMARKS, fruitsVegetablesExportersDeskVetting.getEvidenceofRegonNaionalTraceabilityRemarks());
            values.put(KEY_SINGLE_WINDOW_REG, fruitsVegetablesExportersDeskVetting.getIsEvidenceofRegSingleWindow());
            values.put(KEY_SINGLE_WINDOW_REG_AWARD, fruitsVegetablesExportersDeskVetting.getEvidenceofRegSingleWindowAward());
            values.put(KEY_SINGLE_WINDOW_REG_TIMELINE, fruitsVegetablesExportersDeskVetting.getEvidenceofRegSingleWindowTimeline());
            values.put(KEY_SINGLE_WINDOW_REG_REMARKS, fruitsVegetablesExportersDeskVetting.getEvidenceofRegSingleWindowRemarks());
            values.put(KEY_HCD_EXPORT_LICENCE, fruitsVegetablesExportersDeskVetting.getIsCopyOfHcdexportLicence());
            values.put(KEY_HCD_EXPORT_LICENCE_AWARD, fruitsVegetablesExportersDeskVetting.getCopyOfHcdexportLicenceAward());
            values.put(KEY_HCD_EXPORT_LICENCE_TIMELINE, fruitsVegetablesExportersDeskVetting.getCopyOfHcdexportLicenceTimeine());
            values.put(KEY_HCD_EXPORT_LICENCE_REMARKS, fruitsVegetablesExportersDeskVetting.getCopyOfHcdexportLicenceRemarks());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY, fruitsVegetablesExportersDeskVetting.getIsTraceablitylistOfTheCompany());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_AWARD, fruitsVegetablesExportersDeskVetting.getTraceablitylistOfTheCompanyAward());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_TIMELINE, fruitsVegetablesExportersDeskVetting.getTraceablitylistOfTheCompanyTimeline());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_REMARKS, fruitsVegetablesExportersDeskVetting.getTraceablitylistOfTheCompanyReamrks());
            values.put(KEY_MARKETING_AGENTS, fruitsVegetablesExportersDeskVetting.getIsDeclareMarketingAgents());
            values.put(KEY_MARKETING_AGENTS_AWARD, fruitsVegetablesExportersDeskVetting.getDeclareMarketingAgentsAward());
            values.put(KEY_MARKETING_AGENTS_TIMELINE, fruitsVegetablesExportersDeskVetting.getDeclareMarketingAgentsTimeline());
            values.put(KEY_MARKETING_AGENTS_REMARKS, fruitsVegetablesExportersDeskVetting.getDeclareMarketingAgentsRemarks());
            values.put(KEY_HCD_UTILIZATION_REGISTERED, fruitsVegetablesExportersDeskVetting.getIsEvidenceOfhcdRegistered());
            values.put(KEY_HCD_UTILIZATION_REGISTERED_AWARD, fruitsVegetablesExportersDeskVetting.getEvidenceOfhcdRegisteredAward());
            values.put(KEY_HCD_UTILIZATION_REGISTERED_TIMELINE, fruitsVegetablesExportersDeskVetting.getEvidenceOfhcdRegisteredTimeline());
            values.put(KEY_HCD_UTILIZATION_REGISTERED_REMARKS, fruitsVegetablesExportersDeskVetting.getEvidenceOfhcdRegisteredRemarks());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS, fruitsVegetablesExportersDeskVetting.getIsSystempoliceAndProcedure());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS_AWARD, fruitsVegetablesExportersDeskVetting.getSystemPoliceAndProcedureAward());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS_TIMELINE, fruitsVegetablesExportersDeskVetting.getSystemPoliceAndProcedureTimeline());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS_REMARKS, fruitsVegetablesExportersDeskVetting.getSystemPoliceAndProcedureRemarks());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG, fruitsVegetablesExportersDeskVetting.getIsEvidenceofAtendanceOfAnnualTraining());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_AWARD, fruitsVegetablesExportersDeskVetting.getEvidenceofAtendanceOfAnnualTrainingAward());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_TIMELINE, fruitsVegetablesExportersDeskVetting.getEvidenceofAtendanceOfAnnualTrainingTimeline());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_REMARKS, fruitsVegetablesExportersDeskVetting.getEvidenceofAtendanceOfAnnualTrainingRemarks());
            values.put(KEY_TRAINING_MATRIX, fruitsVegetablesExportersDeskVetting.getIsAnnualTrainingmatrixSchedule());
            values.put(KEY_TRAINING_MATRIX_AWARD, fruitsVegetablesExportersDeskVetting.getAnnualTrainingmatrixScheduleAward());
            values.put(KEY_TRAINING_MATRIX_TIMELINE, fruitsVegetablesExportersDeskVetting.getAnnualTrainingmatrixScheduleTimeline());
            values.put(KEY_TRAINING_MATRIX_REMARKS, fruitsVegetablesExportersDeskVetting.getAnnualTrainingmatrixScheduleRemarks());
            values.put(KEY_EVIDENCE_PEST_DISEASES, fruitsVegetablesExportersDeskVetting.getIsPestDiseaseControlprocedures());
            values.put(KEY_EVIDENCE_PEST_DISEASES_AWARD, fruitsVegetablesExportersDeskVetting.getPestDiseaseControlproceduresAward());
            values.put(KEY_EVIDENCE_PEST_DISEASES_TIMELINE, fruitsVegetablesExportersDeskVetting.getPestDiseaseControlproceduresTimeline());
            values.put(KEY_EVIDENCE_PEST_DISEASES_REMARKS, fruitsVegetablesExportersDeskVetting.getPestDiseaseControlproceduresRemarks());
            values.put(KEY_CLAIMS_ON_NON_PAYMENT, fruitsVegetablesExportersDeskVetting.getIsClaimsonNonPayment());
            values.put(KEY_CLAIMS_AWARD_CLAIMS_ON_NON_PAYMENT, fruitsVegetablesExportersDeskVetting.getClaimsonNonPaymentAward());
            values.put(KEY_CLAIMS_TIMELINE_CLAIMS_ON_NON_PAYMENT, fruitsVegetablesExportersDeskVetting.getClaimsonNonPaymentTimeline());
            values.put(KEY_CLAIMS_REMARKS_CLAIMS_ON_NON_PAYMENT, fruitsVegetablesExportersDeskVetting.getClaimsonNonPaymentRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, fruitsVegetablesExportersDeskVetting.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, fruitsVegetablesExportersDeskVetting.getOfficerrecommendation_remark());


            result = db.update(TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING, values, "id =" + Integer.parseInt(fruitsVegetablesExportersDeskVetting.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<FruitsAndVegetablesExporters> getFruitsAndVegetablesExportersList() {

        List<FruitsAndVegetablesExporters> fruitsAndVegetablesExporterslist = new ArrayList<FruitsAndVegetablesExporters>();
        FruitsAndVegetablesExporters td = new FruitsAndVegetablesExporters();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Fruits And veetables Exporters data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FruitsAndVegetablesExporters();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setaFA_HCD_Fruits_Vegetables_Exporterse_ID(c.getString((c.getColumnIndex(KEY_FRUITS_AND_VEGETABLES_ID))));

                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));

                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));


                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));

                    td.setTelephone(c.getString((c.getColumnIndex(KEY_TELEPHONE))));


                    td.setExportLicence(c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE))));


                    // adding to itinerary list
                    fruitsAndVegetablesExporterslist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + fruitsAndVegetablesExporterslist.size());
        return fruitsAndVegetablesExporterslist;
    }


    public List<FruitsAndVegetablesExporters> getFruitsAndVegetablesExportersDone() {

        List<FruitsAndVegetablesExporters> fruitsAndVegetablesExportersList = new ArrayList<FruitsAndVegetablesExporters>();
        FruitsAndVegetablesExporters td = new FruitsAndVegetablesExporters();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FruitsAndVegetablesExporters();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setaFA_HCD_Fruits_Vegetables_Exporterse_ID(c.getString((c.getColumnIndex(KEY_FRUITS_AND_VEGETABLES_ID))));

                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));

                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));


                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));

                    td.setTelephone(c.getString((c.getColumnIndex(KEY_TELEPHONE))));


                    td.setExportLicence(c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE))));

                    td.setIsCertificationtoKsh1758(c.getString((c.getColumnIndex(KEY_ISCERTIFICATION_TO_KSH_1758))));
                    td.setCertificationtoKsh1758Award(c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH_1758_AWARD))));
                    td.setCertificationtoKsh1758Timeline(c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH_1758_TIMELINE))));
                    td.setCertificationtoKsh1758Remarks(c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH_1758__REMARKS))));
                    td.setIsOtherRecognizedstandards(c.getString((c.getColumnIndex(KEY_ISOTHER_RECOGNIZED_STANDARDS))));
                    td.setOtherRecognizedstandardsAward(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNIZED_STANDARDS_AWARD))));
                    td.setOtherRecognizedstandardsTimeline(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNIZED_STANDARDS_TIMELINE))));
                    td.setOtherRecognizedstandardsremarks(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNIZED_STANDARDS_REMARKS))));
                    td.setIsEvidenceofRegonNaionalTraceability(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE))));
                    td.setEvidenceofRegonNaionalTraceabilityAward(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE_AWARD))));
                    td.setEvidenceofRegonNaionalTraceabilityTimeline(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE_TIMELINE))));
                    td.setEvidenceofRegonNaionalTraceabilityRemarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE_REMARKS))));
                    td.setIsEvidenceofRegSingleWindow(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG))));
                    td.setEvidenceofRegSingleWindowAward(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG_AWARD))));
                    td.setEvidenceofRegSingleWindowTimeline(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG_TIMELINE))));
                    td.setEvidenceofRegSingleWindowRemarks(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG_REMARKS))));
                    td.setIsCopyOfHcdexportLicence(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE))));
                    td.setCopyOfHcdexportLicenceAward(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE_AWARD))));
                    td.setCopyOfHcdexportLicenceTimeine(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE_TIMELINE))));
                    td.setCopyOfHcdexportLicenceRemarks(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE_REMARKS))));
                    td.setIsTraceablitylistOfTheCompany(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY))));
                    td.setTraceablitylistOfTheCompanyAward(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_AWARD))));
                    td.setTraceablitylistOfTheCompanyTimeline(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_TIMELINE))));
                    td.setTraceablitylistOfTheCompanyReamrks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_REMARKS))));
                    td.setIsDeclareMarketingAgents(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS))));
                    td.setDeclareMarketingAgentsAward(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS_AWARD))));
                    td.setDeclareMarketingAgentsTimeline(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS_TIMELINE))));
                    td.setDeclareMarketingAgentsRemarks(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS_REMARKS))));
                    td.setIsEvidenceOfhcdRegistered(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED))));
                    td.setEvidenceOfhcdRegisteredAward(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED_AWARD))));
                    td.setEvidenceOfhcdRegisteredTimeline(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED_TIMELINE))));
                    td.setEvidenceOfhcdRegisteredRemarks(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED_REMARKS))));
                    td.setIsSystempoliceAndProcedure(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS))));
                    td.setSystemPoliceAndProcedureAward(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS_AWARD))));
                    td.setSystemPoliceAndProcedureTimeline(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS_TIMELINE))));
                    td.setSystemPoliceAndProcedureRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS_REMARKS))));
                    td.setIsEvidenceofAtendanceOfAnnualTraining(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG))));
                    td.setEvidenceofAtendanceOfAnnualTrainingAward(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_AWARD))));
                    td.setEvidenceofAtendanceOfAnnualTrainingTimeline(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_TIMELINE))));
                    td.setEvidenceofAtendanceOfAnnualTrainingRemarks(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_REMARKS))));
                    td.setIsAnnualTrainingmatrixSchedule(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX))));
                    td.setAnnualTrainingmatrixScheduleAward(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX_AWARD))));
                    td.setAnnualTrainingmatrixScheduleTimeline(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX_TIMELINE))));
                    td.setAnnualTrainingmatrixScheduleRemarks(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX_REMARKS))));
                    td.setIsPestDiseaseControlprocedures(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES))));
                    td.setPestDiseaseControlproceduresAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES_AWARD))));
                    td.setPestDiseaseControlproceduresTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES_TIMELINE))));
                    td.setPestDiseaseControlproceduresRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES_REMARKS))));
                    td.setIsClaimsonNonPayment(c.getString((c.getColumnIndex(KEY_CLAIMS_ON_NON_PAYMENT))));
                    td.setClaimsonNonPaymentAward(c.getString((c.getColumnIndex(KEY_CLAIMS_AWARD_CLAIMS_ON_NON_PAYMENT))));
                    td.setClaimsonNonPaymentTimeline(c.getString((c.getColumnIndex(KEY_CLAIMS_TIMELINE_CLAIMS_ON_NON_PAYMENT))));
                    td.setClaimsonNonPaymentRemarks(c.getString((c.getColumnIndex(KEY_CLAIMS_REMARKS_CLAIMS_ON_NON_PAYMENT))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    fruitsAndVegetablesExportersList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + fruitsAndVegetablesExportersList.size());
        return fruitsAndVegetablesExportersList;
    }

    public void deleteFruitsAndVegetablesExportersList() {

        String deleteQuery = "DELETE FROM " + TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean updateFruitsAndVegetablesExportersSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FRUITS_AND_VEGETABLES_EXPORTERS_DESK_VETTING, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /*columns TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING COLUMNS*/
    public static final String TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING = "Fruits_and_Vegetables_Consolidators_Desk_Vetting_Checklist";

    private static final String KEY_FRUITS_AND_VEGETABLES_CONSOLIDATORS_ID = "Fruits_and_vegetables_consolidators_id";

    public static final String CREATE_TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FRUITS_AND_VEGETABLES_CONSOLIDATORS_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUMBER + " TEXT,"
            + KEY_DOCUMENT_DATE + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT,"
            + KEY_EXPORT_LICENCE + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_ISCERTIFICATION_TO_KSH_1758 + " TEXT ,"
            + KEY_CERTIFICATION_TO_KSH_1758_AWARD + " TEXT ,"
            + KEY_CERTIFICATION_TO_KSH_1758_TIMELINE + " TEXT ,"
            + KEY_CERTIFICATION_TO_KSH_1758__REMARKS + " TEXT ,"
            + KEY_ISOTHER_RECOGNIZED_STANDARDS + " TEXT ,"
            + KEY_OTHER_RECOGNIZED_STANDARDS_AWARD + " TEXT ,"
            + KEY_OTHER_RECOGNIZED_STANDARDS_TIMELINE + " TEXT ,"
            + KEY_OTHER_RECOGNIZED_STANDARDS_REMARKS + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE_AWARD + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE_TIMELINE + " TEXT ,"
            + KEY_REGISTRATION_EVIDENCE_REMARKS + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG_AWARD + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG_TIMELINE + " TEXT ,"
            + KEY_SINGLE_WINDOW_REG_REMARKS + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE_AWARD + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE_TIMELINE + " TEXT ,"
            + KEY_HCD_EXPORT_LICENCE_REMARKS + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY_AWARD + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY_REMARKS + " TEXT ,"
            + KEY_TRACEABILITY_LIST_OF_THE_COMPANY_TIMELINE + " TEXT ,"
            + KEY_MARKETING_AGENTS + " TEXT ,"
            + KEY_MARKETING_AGENTS_AWARD + " TEXT ,"
            + KEY_MARKETING_AGENTS_TIMELINE + " TEXT ,"
            + KEY_MARKETING_AGENTS_REMARKS + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED_AWARD + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED_TIMELINE + " TEXT ,"
            + KEY_HCD_UTILIZATION_REGISTERED_REMARKS + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS_AWARD + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS_TIMELINE + " TEXT ,"
            + KEY_TRACEABILTY_SYSTEM_QMS_REMARKS + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_AWARD + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_TIMELINE + " TEXT ,"
            + KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_REMARKS + " TEXT ,"
            + KEY_TRAINING_MATRIX + " TEXT ,"
            + KEY_TRAINING_MATRIX_AWARD + " TEXT ,"
            + KEY_TRAINING_MATRIX_TIMELINE + " TEXT ,"
            + KEY_TRAINING_MATRIX_REMARKS + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES_AWARD + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES_TIMELINE + " TEXT ,"
            + KEY_EVIDENCE_PEST_DISEASES_REMARKS + " TEXT ,"
            + KEY_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_CLAIMS_AWARD_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_CLAIMS_REMARKS_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_CLAIMS_TIMELINE_CLAIMS_ON_NON_PAYMENT + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_UPLOADED + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME" + ")";


    public long insertHCDFruitVegetableConsolidators(HCDFruitVegetableConsolidators hCDFruitVegetableConsolidators) {


        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_FRUITS_AND_VEGETABLES_CONSOLIDATORS_ID, hCDFruitVegetableConsolidators.getAFA_HCD_Fruit_Vegetable_Consolidators_ID());
        values.put(KEY_ID, hCDFruitVegetableConsolidators.getLocalID());

        values.put(KEY_DOCUMENT_NUMBER, hCDFruitVegetableConsolidators.getDocumentNumber());

        values.put(KEY_DOCUMENT_DATE, hCDFruitVegetableConsolidators.getDocumentDate());

        values.put(KEY_NAME_OF_APPLICANT, hCDFruitVegetableConsolidators.getNameOfApplicant());

        values.put(KEY_EXPORT_LICENCE, hCDFruitVegetableConsolidators.getExportLicence());

        values.put(KEY_INSPECTION_DONE, "N");

        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isFruitVegetableConsolidatorsStored(hCDFruitVegetableConsolidators.getAFA_HCD_Fruit_Vegetable_Consolidators_ID())) {
            long hCDFruitVegetableConsolidatorsID = db.insertWithOnConflict(TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("hCDFruitVegetableConsolidatorsID: " + hCDFruitVegetableConsolidatorsID);

            closeDB();
            return hCDFruitVegetableConsolidatorsID;
        } else {
        }
        long hCDFruitVegetableConsolidatorsID = -1;
        System.out.println("hCDFruitVegetableConsolidatorsID: " + hCDFruitVegetableConsolidatorsID);

        closeDB();
        return hCDFruitVegetableConsolidatorsID;
    }

    public boolean isFruitVegetableConsolidatorsStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING + " WHERE " + KEY_FRUITS_AND_VEGETABLES_CONSOLIDATORS_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public long UpdateFruitVegetableConsolidators(FruitVegetableConsolidators fruitVegetableConsolidators) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");


            values.put(KEY_ISCERTIFICATION_TO_KSH_1758, fruitVegetableConsolidators.getIsCertificationtoKsh1758());
            values.put(KEY_CERTIFICATION_TO_KSH_1758_AWARD, fruitVegetableConsolidators.getSsCertificationtoKsh1758Award());
            values.put(KEY_CERTIFICATION_TO_KSH_1758_TIMELINE, fruitVegetableConsolidators.getCertificationtoKsh1758Timeline());
            values.put(KEY_CERTIFICATION_TO_KSH_1758__REMARKS, fruitVegetableConsolidators.getCertificationtoKsh1758Remarks());
            values.put(KEY_ISOTHER_RECOGNIZED_STANDARDS, fruitVegetableConsolidators.getIsOtherrecognizedStandards());
            values.put(KEY_OTHER_RECOGNIZED_STANDARDS_AWARD, fruitVegetableConsolidators.getSsOtherrecognizedStandardsAward());
            values.put(KEY_OTHER_RECOGNIZED_STANDARDS_TIMELINE, fruitVegetableConsolidators.getOtherrecognizedStandardstimeline());
            values.put(KEY_OTHER_RECOGNIZED_STANDARDS_REMARKS, fruitVegetableConsolidators.getOtherrecognizedStandardsRemarks());
            values.put(KEY_REGISTRATION_EVIDENCE, fruitVegetableConsolidators.getIsEvidenceofRegonNaionalTraceability());
            values.put(KEY_REGISTRATION_EVIDENCE_AWARD, fruitVegetableConsolidators.getSsEvidenceofRegonNaionalTraceabilityAward());
            values.put(KEY_REGISTRATION_EVIDENCE_TIMELINE, fruitVegetableConsolidators.getEvidenceofRegonNaionalTraceabilityTimeline());
            values.put(KEY_REGISTRATION_EVIDENCE_REMARKS, fruitVegetableConsolidators.getEvidenceofRegonNaionalTraceabilityRemarks());
            values.put(KEY_SINGLE_WINDOW_REG, fruitVegetableConsolidators.getIsEvidenceofRegSingleWindow());
            values.put(KEY_SINGLE_WINDOW_REG_AWARD, fruitVegetableConsolidators.getSsEvidenceofRegSingleWindowAward());
            values.put(KEY_SINGLE_WINDOW_REG_TIMELINE, fruitVegetableConsolidators.getEvidenceofRegSingleWindowTimeline());
            values.put(KEY_SINGLE_WINDOW_REG_REMARKS, fruitVegetableConsolidators.getEvidenceofRegSingleWindowRemarks());
            values.put(KEY_HCD_EXPORT_LICENCE, fruitVegetableConsolidators.getIsCopyofHcdExportLicence());
            values.put(KEY_HCD_EXPORT_LICENCE_AWARD, fruitVegetableConsolidators.getSsCopyofHcdExportLicenceAward());
            values.put(KEY_HCD_EXPORT_LICENCE_TIMELINE, fruitVegetableConsolidators.getCopyofHcdExportLicenceTimeline());
            values.put(KEY_HCD_EXPORT_LICENCE_REMARKS, fruitVegetableConsolidators.getCopyofHcdExportLicenceRemarks());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY, fruitVegetableConsolidators.getIsTraceabilityListContractedfarmers());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_AWARD, fruitVegetableConsolidators.getSsTraceabilityListContractedfarmersAward());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_TIMELINE, fruitVegetableConsolidators.getTraceabilityListContractedfarmersTimeline());
            values.put(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_REMARKS, fruitVegetableConsolidators.getTraceabilityListContractedfarmersRemarks());
            values.put(KEY_MARKETING_AGENTS, fruitVegetableConsolidators.getIsDeclaremarketingAgent());
            values.put(KEY_MARKETING_AGENTS_AWARD, fruitVegetableConsolidators.getSsDeclaremarketingAgentAward());
            values.put(KEY_MARKETING_AGENTS_TIMELINE, fruitVegetableConsolidators.getDeclaremarketingAgentTimeline());
            values.put(KEY_MARKETING_AGENTS_REMARKS, fruitVegetableConsolidators.getDeclaremarketingAgentREmarks());
            values.put(KEY_HCD_UTILIZATION_REGISTERED, fruitVegetableConsolidators.getIsUtilizationofHCD());
            values.put(KEY_HCD_UTILIZATION_REGISTERED_AWARD, fruitVegetableConsolidators.getSsUtilizationofHCDAward());
            values.put(KEY_HCD_UTILIZATION_REGISTERED_TIMELINE, fruitVegetableConsolidators.getUtilizationofHCDTimeline());
            values.put(KEY_HCD_UTILIZATION_REGISTERED_REMARKS, fruitVegetableConsolidators.getUtilizationofHCDRemarks());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS, fruitVegetableConsolidators.getIsSystemPoliceandProcedure());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS_AWARD, fruitVegetableConsolidators.getSsSystemPoliceandProcedureAward());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS_TIMELINE, fruitVegetableConsolidators.getSystemPoliceandProcedureTimeline());
            values.put(KEY_TRACEABILTY_SYSTEM_QMS_REMARKS, fruitVegetableConsolidators.getSystemPoliceandProcedureRemarks());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG, fruitVegetableConsolidators.getIsEvidenceOfatendanceOfAnnualTraining());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_AWARD, fruitVegetableConsolidators.getSsEvidenceOfatendanceOfAnnualTrainingAward());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_TIMELINE, fruitVegetableConsolidators.getEvidenceOfatendanceOfAnnualTraininAwardTimeline());
            values.put(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_REMARKS, fruitVegetableConsolidators.getEvidenceOfatendanceOfAnnualTrainingRemarks());
            values.put(KEY_TRAINING_MATRIX, fruitVegetableConsolidators.getIsAnnualTrainingmatrixSchedule());
            values.put(KEY_TRAINING_MATRIX_AWARD, fruitVegetableConsolidators.getSsAnnualTrainingmatrixScheduleAward());
            values.put(KEY_TRAINING_MATRIX_TIMELINE, fruitVegetableConsolidators.getAnnualTrainingmatrixScheduleTimeline());
            values.put(KEY_TRAINING_MATRIX_REMARKS, fruitVegetableConsolidators.getAnnualTrainingmatrixScheduleRemarks());
            values.put(KEY_EVIDENCE_PEST_DISEASES, fruitVegetableConsolidators.getIsPestDiseasecontrolProcedures());
            values.put(KEY_EVIDENCE_PEST_DISEASES_AWARD, fruitVegetableConsolidators.getSsPestDiseasecontrolProceduresAward());
            values.put(KEY_EVIDENCE_PEST_DISEASES_TIMELINE, fruitVegetableConsolidators.getPestDiseasecontrolProceduresTimeline());
            values.put(KEY_EVIDENCE_PEST_DISEASES_REMARKS, fruitVegetableConsolidators.getPestDiseasecontrolProceduresRemarks());
            values.put(KEY_CLAIMS_ON_NON_PAYMENT, fruitVegetableConsolidators.getIsClaimsOnnonPayment());
            values.put(KEY_CLAIMS_AWARD_CLAIMS_ON_NON_PAYMENT, fruitVegetableConsolidators.getSsClaimsOnnonPaymentAward());
            values.put(KEY_CLAIMS_TIMELINE_CLAIMS_ON_NON_PAYMENT, fruitVegetableConsolidators.getClaimsOnnonPaymentTimeline());
            values.put(KEY_CLAIMS_REMARKS_CLAIMS_ON_NON_PAYMENT, fruitVegetableConsolidators.getClaimsOnnonPaymentRemarks());
            values.put(KEY_OFFICER_RECOMMENDATION, fruitVegetableConsolidators.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, fruitVegetableConsolidators.getOfficerrecommendation_remark());


            result = db.update(TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING, values, "id =" + Integer.parseInt(fruitVegetableConsolidators.getLocalID()), null);

            System.out.println("results is " + result);


        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<HCDFruitVegetableConsolidators> getHCDFruitVegetableConsolidatorsList() {

        List<HCDFruitVegetableConsolidators> HCDFruitVegetableConsolidatorslist = new ArrayList<HCDFruitVegetableConsolidators>();
        HCDFruitVegetableConsolidators td = new HCDFruitVegetableConsolidators();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Fruits And Vegetables consolidators data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HCDFruitVegetableConsolidators();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HCD_Fruit_Vegetable_Consolidators_ID(c.getString((c.getColumnIndex(KEY_FRUITS_AND_VEGETABLES_CONSOLIDATORS_ID))));

                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));

                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));

                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));

                    td.setExportLicence(c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE))));


                    // adding to itinerary list
                    HCDFruitVegetableConsolidatorslist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + HCDFruitVegetableConsolidatorslist.size());
        return HCDFruitVegetableConsolidatorslist;
    }


    public List<HCDFruitVegetableConsolidators> getHCDFruitVegetableConsolidatorsDone() {

        List<HCDFruitVegetableConsolidators> HCDFruitVegetableConsolidatorsList = new ArrayList<HCDFruitVegetableConsolidators>();
        HCDFruitVegetableConsolidators td = new HCDFruitVegetableConsolidators();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HCDFruitVegetableConsolidators();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HCD_Fruit_Vegetable_Consolidators_ID(c.getString((c.getColumnIndex(KEY_FRUITS_AND_VEGETABLES_CONSOLIDATORS_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                    td.setExportLicence(c.getString((c.getColumnIndex(KEY_EXPORT_LICENCE))));

                    td.setIsCertificationtoKsh1758(c.getString((c.getColumnIndex(KEY_ISCERTIFICATION_TO_KSH_1758))));
                    td.setSsCertificationtoKsh1758Award(c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH_1758_AWARD))));
                    td.setCertificationtoKsh1758Timeline(c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH_1758_TIMELINE))));
                    td.setCertificationtoKsh1758Remarks(c.getString((c.getColumnIndex(KEY_CERTIFICATION_TO_KSH_1758__REMARKS))));
                    td.setIsOtherrecognizedStandards(c.getString((c.getColumnIndex(KEY_ISOTHER_RECOGNIZED_STANDARDS))));
                    td.setSsOtherrecognizedStandardsAward(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNIZED_STANDARDS_AWARD))));
                    td.setOtherrecognizedStandardstimeline(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNIZED_STANDARDS_TIMELINE))));
                    td.setOtherrecognizedStandardsRemarks(c.getString((c.getColumnIndex(KEY_OTHER_RECOGNIZED_STANDARDS_REMARKS))));
                    td.setIsEvidenceofRegonNaionalTraceability(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE))));
                    td.setSsEvidenceofRegonNaionalTraceabilityAward(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE_AWARD))));
                    td.setEvidenceofRegonNaionalTraceabilityTimeline(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE_TIMELINE))));
                    td.setEvidenceofRegonNaionalTraceabilityRemarks(c.getString((c.getColumnIndex(KEY_REGISTRATION_EVIDENCE_REMARKS))));
                    td.setIsEvidenceofRegSingleWindow(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG))));
                    td.setSsEvidenceofRegSingleWindowAward(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG_AWARD))));
                    td.setEvidenceofRegSingleWindowTimeline(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG_TIMELINE))));
                    td.setEvidenceofRegSingleWindowRemarks(c.getString((c.getColumnIndex(KEY_SINGLE_WINDOW_REG_REMARKS))));
                    td.setIsCopyofHcdExportLicence(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE))));
                    td.setSsCopyofHcdExportLicenceAward(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE_AWARD))));
                    td.setCopyofHcdExportLicenceTimeline(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE_TIMELINE))));
                    td.setCopyofHcdExportLicenceRemarks(c.getString((c.getColumnIndex(KEY_HCD_EXPORT_LICENCE_REMARKS))));
                    td.setIsTraceabilityListContractedfarmers(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY))));
                    td.setSsTraceabilityListContractedfarmersAward(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_AWARD))));
                    td.setTraceabilityListContractedfarmersTimeline(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_TIMELINE))));
                    td.setTraceabilityListContractedfarmersRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILITY_LIST_OF_THE_COMPANY_REMARKS))));
                    td.setIsDeclaremarketingAgent(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS))));
                    td.setSsDeclaremarketingAgentAward(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS_AWARD))));
                    td.setDeclaremarketingAgentTimeline(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS_TIMELINE))));
                    td.setDeclaremarketingAgentREmarks(c.getString((c.getColumnIndex(KEY_MARKETING_AGENTS_REMARKS))));
                    td.setIsUtilizationofHCD(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED))));
                    td.setSsUtilizationofHCDAward(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED_AWARD))));
                    td.setUtilizationofHCDTimeline(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED_TIMELINE))));
                    td.setUtilizationofHCDRemarks(c.getString((c.getColumnIndex(KEY_HCD_UTILIZATION_REGISTERED_REMARKS))));
                    td.setIsSystemPoliceandProcedure(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS))));
                    td.setSsSystemPoliceandProcedureAward(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS_AWARD))));
                    td.setSystemPoliceandProcedureTimeline(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS_TIMELINE))));
                    td.setSystemPoliceandProcedureRemarks(c.getString((c.getColumnIndex(KEY_TRACEABILTY_SYSTEM_QMS_REMARKS))));
                    td.setIsEvidenceOfatendanceOfAnnualTraining(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG))));
                    td.setSsEvidenceOfatendanceOfAnnualTrainingAward(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_AWARD))));
                    td.setEvidenceOfatendanceOfAnnualTraininAwardTimeline(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_TIMELINE))));
                    td.setEvidenceOfatendanceOfAnnualTrainingRemarks(c.getString((c.getColumnIndex(KEY_ATTENDANCE_EVIDENCE_OF_ANNUAL_TRAINIG_REMARKS))));
                    td.setIsAnnualTrainingmatrixSchedule(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX))));
                    td.setSsAnnualTrainingmatrixScheduleAward(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX_AWARD))));
                    td.setAnnualTrainingmatrixScheduleTimeline(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX_TIMELINE))));
                    td.setAnnualTrainingmatrixScheduleRemarks(c.getString((c.getColumnIndex(KEY_TRAINING_MATRIX_REMARKS))));
                    td.setIsPestDiseasecontrolProcedures(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES))));
                    td.setSsPestDiseasecontrolProceduresAward(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES_AWARD))));
                    td.setPestDiseasecontrolProceduresTimeline(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES_TIMELINE))));
                    td.setPestDiseasecontrolProceduresRemarks(c.getString((c.getColumnIndex(KEY_EVIDENCE_PEST_DISEASES_REMARKS))));
                    td.setIsClaimsOnnonPayment(c.getString((c.getColumnIndex(KEY_CLAIMS_ON_NON_PAYMENT))));
                    td.setSsClaimsOnnonPaymentAward(c.getString((c.getColumnIndex(KEY_CLAIMS_AWARD_CLAIMS_ON_NON_PAYMENT))));
                    td.setClaimsOnnonPaymentTimeline(c.getString((c.getColumnIndex(KEY_CLAIMS_TIMELINE_CLAIMS_ON_NON_PAYMENT))));
                    td.setClaimsOnnonPaymentRemarks(c.getString((c.getColumnIndex(KEY_CLAIMS_REMARKS_CLAIMS_ON_NON_PAYMENT))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));


                    HCDFruitVegetableConsolidatorsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + HCDFruitVegetableConsolidatorsList.size());
        return HCDFruitVegetableConsolidatorsList;
    }

    public void deleteHCDFruitVegetableConsolidatorsList() {

        String deleteQuery = "DELETE FROM " + TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean updateHCDFruitVegetableConsolidatorsSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /* END OF TABLE_FRUITS_AND_VEGETABLES_CONSOLIDATORS_DESK_VETTING*/

    /* START OF COLD_ROOM_TEMPERATURE_RECORDS*/
    public static final String TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION = "cold_room_temperature_inspection";
    public static final String TABLE_HCD_COLD_ROOM_TEMPERATURE_DETAILS = "cold_room_temperature_details";
    private static final String KEY_HCD_COLD_ROOM_TEMPERATURE_ID = "hcd_cold_room_temperature_id";
    private static final String KEY_COLD_ROOM_NUMBER = "cold_room_number";
    private static final String KEY_TIME = "time";
    private static final String KEY_INDICATOR_TEMPERATURE = "indicator_temperature";
    private static final String KEY_THERMOMETER_PROBE_TEMP = "thermometer_probe_temp";

    public static final String CREATE_TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HCD_COLD_ROOM_TEMPERATURE_ID + " TEXT,"
            + KEY_NAME_OF_APPLICANT + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public static final String CREATE_TABLE_HCD_COLD_ROOM_TEMPERATURE_DETAILS = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HCD_COLD_ROOM_TEMPERATURE_DETAILS + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HCD_COLD_ROOM_TEMPERATURE_ID + " TEXT,"
            + KEY_COLD_ROOM_NUMBER + " TEXT,"
            + KEY_TIME + " TEXT,"
            + KEY_INDICATOR_TEMPERATURE + " TEXT,"
            + KEY_THERMOMETER_PROBE_TEMP + " TEXT,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertHCDColdRoomTemparatureInspection(HCDColdRoomTemperatures hcdColdRoomTemperatures) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_NAME_OF_APPLICANT, hcdColdRoomTemperatures.getNameOfApplicant());
        values.put(KEY_UPLOADED, "PENDING");
        // insert row
        long coldRoomTemparatureInspectionID = db.insertWithOnConflict(TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("coldRoomTemparatureInspectionID: " + coldRoomTemparatureInspectionID);

        closeDB();
        return coldRoomTemparatureInspectionID;
    }

    public long UpdateColdRoomTemparatureDetails(HCDColdRoomTemperatures hcdColdRoomTemperatures) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        long result = 0;
        try {

            values.put(KEY_UPLOADED, "PENDING");
            values.put(KEY_COLD_ROOM_NUMBER, hcdColdRoomTemperatures.getColdRoom());
            values.put(KEY_TIME, hcdColdRoomTemperatures.getTime());
            values.put(KEY_INDICATOR_TEMPERATURE, hcdColdRoomTemperatures.getIndicatorTempe());
            values.put(KEY_THERMOMETER_PROBE_TEMP, hcdColdRoomTemperatures.getThermometerProbeTem());

            long coldRoomTemparatureInspectionID = db.insertWithOnConflict(TABLE_HCD_COLD_ROOM_TEMPERATURE_DETAILS, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("coldRoomTemparatureInspectionID: " + coldRoomTemparatureInspectionID);


        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public HCDColdRoomTemperatures getSentColdRoomID(String shopID) {

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION + " WHERE " + KEY_ID + " = " + shopID;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        HCDColdRoomTemperatures td = new HCDColdRoomTemperatures();
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {

                td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                td.setServerID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));

                // adding to itinerary list

            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }

    public boolean updateColdRoomSent(String tableName, String shopID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        //  db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_SERVER_ID, serverRecordID);

            int result = db.update(tableName, values, "id=" + shopID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
        }

    }

    public List<HCDColdRoomTemperatures> getColdRoomTemparatureDetails() {

        List<HCDColdRoomTemperatures> hcdColdRoomTemperaturesList = new ArrayList<HCDColdRoomTemperatures>();
        HCDColdRoomTemperatures td = new HCDColdRoomTemperatures();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_COLD_ROOM_TEMPERATURE_DETAILS + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HCDColdRoomTemperatures();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setColdRoom(c.getString((c.getColumnIndex(KEY_COLD_ROOM_NUMBER))));
                    td.setTime(c.getString((c.getColumnIndex(KEY_TIME))));
                    td.setIndicatorTempe(c.getString((c.getColumnIndex(KEY_INDICATOR_TEMPERATURE))));
                    td.setThermometerProbeTem(c.getString((c.getColumnIndex(KEY_THERMOMETER_PROBE_TEMP))));

                    hcdColdRoomTemperaturesList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + hcdColdRoomTemperaturesList.size());
        return hcdColdRoomTemperaturesList;
    }

    public List<HCDColdRoomTemperatures> getColdRoomTemparatureInspection() {

        List<HCDColdRoomTemperatures> hcdColdRoomTemperaturesList = new ArrayList<HCDColdRoomTemperatures>();
        HCDColdRoomTemperatures td = new HCDColdRoomTemperatures();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_COLD_ROOM_TEMPERATURE_INSPECTION + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HCDColdRoomTemperatures();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));

                    hcdColdRoomTemperaturesList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + hcdColdRoomTemperaturesList.size());
        return hcdColdRoomTemperaturesList;
    }

    /* END OF COLD_ROOM_TEMPERATURE_RECORDS*/


    /*TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER*/
    public static final String TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER = "Horticultural_Crops_Cold_Storage_Register";
    public static final String TABLE_HORTICULTURE_COLD_STORAGE_IN = "Horticulture_Cold_Storage_In";
    public static final String TABLE_HORTICULTURE_COLD_STORAGE_OUT = "Horticulture_Cold_Storage_OUT";
    public static final String TABLE_HORTICULTURE_COLD_STORAGE_CHARGES = "Horticulture_Cold_Storage_Charges";

    private static final String KEY_HORTICULTURAL_CROPS_COLD_ID = "Horticultural_Crops_Cold__id";
    //    private static final String KEY_PRODUCT_CATEGORY = "product_category";
    private static final String KEY_PRODUCT_NAME = "product";
    private static final String KEY_COLD_ROOM = "cold_room";
    private static final String KEY_DATE_BROUGHT = "date_brought";
    private static final String KEY_PAY_CATEGORY = "pay_category";
    private static final String KEY_PAY_REMARKS = "pay_remarks";
    private static final String KEY_PACKAGING_MATERIAL = "packaging_materials";
    private static final String KEY_PACKAGING_REMARKS = "packaging_materials_remarks";
    private static final String KEY_QUALITY = "quality";
    private static final String KEY_DATE_OUT = "date_out";
    private static final String KEY_WEIGHT_IN = "weight_in";
    private static final String KEY_WEIGHT_OUT = "weight_out";
    private static final String KEY_BALANCE = "balance";
    private static final String KEY_CHARGES = "chages";

    ///Horticultural_Crops_Cold__id
    public static final String CREATE_TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HORTICULTURAL_CROPS_COLD_ID + " INTEGER,"
            + KEY_NAME + " TEXT,"
            + KEY_PARENT_ID + " TEXT,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    ///Horticultural_Crops_Cold__id
    public static final String CREATE_TABLE_HORTICULTURE_COLD_STORAGE_IN = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HORTICULTURE_COLD_STORAGE_IN + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HORTICULTURAL_CROPS_COLD_ID + " INTEGER,"
            + KEY_PRODUCT_CATEGORY + " TEXT,"
            + KEY_PRODUCT_NAME + " TEXT,"
            + KEY_COLD_ROOM + " TEXT,"
            + KEY_DATE_BROUGHT + " TEXT,"
            + KEY_PAY_CATEGORY + " TEXT,"
            + KEY_PAY_REMARKS + " TEXT,"
            + KEY_PACKAGING_MATERIAL + " TEXT,"
            + KEY_PACKAGING_REMARKS + " TEXT,"
            + KEY_WEIGHT_IN + " TEXT,"
            + KEY_QUALITY + " TEXT,"
            + KEY_PARENT_ID + " TEXT,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";
    ///Horticultural_Crops_Cold__id
    public static final String CREATE_TABLE_HORTICULTURE_COLD_STORAGE_OUT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HORTICULTURE_COLD_STORAGE_OUT + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HORTICULTURAL_CROPS_COLD_ID + " INTEGER,"
            + KEY_DATE_OUT + " TEXT,"
            + KEY_WEIGHT_OUT + " TEXT,"
            + KEY_PARENT_ID + " TEXT,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT
            + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    ///Horticultural_Crops_Cold__id
    public static final String CREATE_TABLE_HORTICULTURE_COLD_STORAGE_CHARGES = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HORTICULTURE_COLD_STORAGE_CHARGES + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HORTICULTURAL_CROPS_COLD_ID + " INTEGER,"
            + KEY_BALANCE + " TEXT,"
            + KEY_CHARGES + " TEXT,"
            + KEY_PARENT_ID + " TEXT,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertColdStorageRegister(String nameOfApplicant, String serverRecordID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_NAME, nameOfApplicant);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long Crops_Cold__id = db.insertWithOnConflict(TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("Crops_Cold__id register " + Crops_Cold__id);

        closeDB();
        return Crops_Cold__id;
    }

    public long insertColdStorageRegisterIn(String parentID, String productsCategory, String product, String
            coldRoomNo, String dateBrought, String payCategory, String packaginMaterial,
                                            String weightIn, String quality, String serverRecordID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_PRODUCT_CATEGORY, productsCategory);
        values.put(KEY_PRODUCT, product);
        values.put(KEY_COLD_ROOM, coldRoomNo);
        values.put(KEY_DATE_BROUGHT, dateBrought);
        values.put(KEY_PAY_CATEGORY, payCategory);
        values.put(KEY_PACKAGING_MATERIAL, packaginMaterial);
        values.put(KEY_WEIGHT_IN, weightIn);
        values.put(KEY_QUALITY, quality);
        values.put(KEY_PARENT_ID, parentID);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long Crops_Cold__id = db.insertWithOnConflict(TABLE_HORTICULTURE_COLD_STORAGE_IN, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("Crops_Cold__id in" + Crops_Cold__id);

        closeDB();
        return Crops_Cold__id;
    }

    public long insertColdStorageRegisterout(String parentID, String dateOut, String weightOut, String serverRecordID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_DATE_OUT, dateOut);
        values.put(KEY_WEIGHT_OUT, weightOut);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_PARENT_ID, parentID);
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long Crops_Cold__id = db.insertWithOnConflict(TABLE_HORTICULTURE_COLD_STORAGE_OUT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("Crops_Cold__id on" + Crops_Cold__id);


        closeDB();
        return Crops_Cold__id;
    }

    public long insertColdStorageRegisterCharges(String parentID, String balance, String charges, String serverRecordID) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_BALANCE, balance);
        values.put(KEY_CHARGES, charges);
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_PARENT_ID, parentID);
        values.put(KEY_SERVER_ID, serverRecordID);
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long Crops_Cold__id = db.insertWithOnConflict(TABLE_HORTICULTURE_COLD_STORAGE_CHARGES, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("Crops_Cold__id charges" + Crops_Cold__id);

        closeDB();
        return Crops_Cold__id;
    }

    public List<HorticulturalCropsColdStorageRegister> getAllHorticulturalCropsColdStorageRegister() {
        List<HorticulturalCropsColdStorageRegister> horticulturalCropsColdStorageRegisterList = new ArrayList<HorticulturalCropsColdStorageRegister>();
        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

//        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    HorticulturalCropsColdStorageRegister td = new HorticulturalCropsColdStorageRegister();
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_ID))));
                    td.setParentID((c.getString(c.getColumnIndex(KEY_PARENT_ID))));

                    // adding to itinerary list
                    horticulturalCropsColdStorageRegisterList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return horticulturalCropsColdStorageRegisterList;
    }


    public HorticulturalCropsColdStorageRegister getSentCropColdStorageRegisterID(String shopID) {

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURAL_CROPS_COLD_STORAGE_REGISTER + " WHERE " + KEY_ID + " = " + shopID;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        HorticulturalCropsColdStorageRegister td = new HorticulturalCropsColdStorageRegister();
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {

//                td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));

                // adding to itinerary list

            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }

    public List<HorticulturalCropsColdStorageOut> getAllHorticulturalCropsColdStorageOut() {
        List<HorticulturalCropsColdStorageOut> HorticulturalCropsColdStorageOutList = new ArrayList<HorticulturalCropsColdStorageOut>();
        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_COLD_STORAGE_OUT + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

//        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    HorticulturalCropsColdStorageOut td = new HorticulturalCropsColdStorageOut();
                    td.setDateOut(c.getString((c.getColumnIndex(KEY_DATE_OUT))));
                    td.setWeightOut(c.getString((c.getColumnIndex(KEY_WEIGHT_OUT))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_ID))));
                    td.setParentID((c.getString(c.getColumnIndex(KEY_PARENT_ID))));

                    // adding to itinerary list
                    HorticulturalCropsColdStorageOutList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return HorticulturalCropsColdStorageOutList;
    }

    public HorticulturalCropsColdStorageOut getSentCropColdStorageOutID(String shopID) {

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_COLD_STORAGE_OUT + " WHERE " + KEY_ID + " = " + shopID;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        HorticulturalCropsColdStorageOut td = new HorticulturalCropsColdStorageOut();
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {

//                td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));

                // adding to itinerary list

            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }

    public List<HorticulturalCropsColdStorageCharges> getAllHorticulturalCropsColdStorageCharges() {
        List<HorticulturalCropsColdStorageCharges> HorticulturalCropsColdStorageChargesList = new ArrayList<HorticulturalCropsColdStorageCharges>();
        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_COLD_STORAGE_CHARGES + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

//        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    HorticulturalCropsColdStorageCharges td = new HorticulturalCropsColdStorageCharges();
                    td.setBalance(c.getString((c.getColumnIndex(KEY_BALANCE))));
                    td.setCharges(c.getString((c.getColumnIndex(KEY_CHARGES))));
                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_ID))));
                    td.setParentID((c.getString(c.getColumnIndex(KEY_PARENT_ID))));

                    // adding to itinerary list
                    HorticulturalCropsColdStorageChargesList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return HorticulturalCropsColdStorageChargesList;
    }

    public List<HorticulturalCropsColdStorageIn> getAllHorticulturalCropsColdStorageIn() {
        List<HorticulturalCropsColdStorageIn> HorticulturalCropsColdStorageInList = new ArrayList<HorticulturalCropsColdStorageIn>();
        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_COLD_STORAGE_IN + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

//        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    HorticulturalCropsColdStorageIn td = new HorticulturalCropsColdStorageIn();

                    td.setProductsCategory(c.getString((c.getColumnIndex(KEY_PRODUCT_CATEGORY))));
                    td.setProduct(c.getString((c.getColumnIndex(KEY_PRODUCT))));
                    td.setColdRoomNo(c.getString((c.getColumnIndex(KEY_COLD_ROOM))));
                    td.setDateBrought(c.getString((c.getColumnIndex(KEY_DATE_BROUGHT))));
                    td.setPayCategory(c.getString((c.getColumnIndex(KEY_PAY_CATEGORY))));
                    td.setPackaginMaterial(c.getString((c.getColumnIndex(KEY_PACKAGING_MATERIAL))));
                    td.setWeightIn(c.getString((c.getColumnIndex(KEY_WEIGHT_IN))));
                    td.setQuality(c.getString((c.getColumnIndex(KEY_QUALITY))));

                    // td.setAFA_SD_SGR_Surveyshops_ID((c.getString((c.getColumnIndex(KEY_SURVEY_ID)))));
                    td.setLocalID((c.getString(c.getColumnIndex(KEY_ID))));
                    td.setParentID((c.getString(c.getColumnIndex(KEY_PARENT_ID))));

                    // adding to itinerary list
                    HorticulturalCropsColdStorageInList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return HorticulturalCropsColdStorageInList;
    }


    public HorticulturalCropsColdStorageIn getSentCropColdStorageInID(String shopID) {

        String selectQuery = "SELECT  * FROM " + TABLE_HORTICULTURE_COLD_STORAGE_IN + " WHERE " + KEY_ID + " = " + shopID;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        HorticulturalCropsColdStorageIn td = new HorticulturalCropsColdStorageIn();
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {

//                td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICANT))));
                td.setServerRecordID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));

                // adding to itinerary list

            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }


    /*end of HorticulturalCropsColdStorageInList*/


    /*TABLE_HCD_MANGO_QUALITY_INSPECTION*/
    public static final String TABLE_HCD_MANGO_QUALITY_INSPECTION = "HCD_Mango_Quality_Inspection";
    private static final String KEY_HCD_MANGO_QUALITY_INSPECTION_ID = "hcd_mango_quality_inspection__id";
    private static final String KEY_DOCUMENTNUMBER = "documentno";
    private static final String KEY_DOSUMENTDATE = "date";
    private static final String KEY_INSPECTIONREQUESTNO = "inspection_no";
    private static final String KEY_EXPORTERSNAME = "exportersname";
    private static final String KEY_EXPORTERSAGENTNAME = "exporters_agent_name";
    private static final String KEY_SIZEOFCONSIGNMENT = "size_of_consignment";
    private static final String KEY_ISLATEXSTAINS = "islatext_stains";
    private static final String KEY_LATEXSTAINSREMARKS = "islatext_stains_remarks";
    private static final String KEY_ISYELLOW = "isyellow";
    private static final String KEY_ISGREEN = "isgreen";
    private static final String KEY_ISFLESHYELLOW = "isfleshyellow";
    private static final String KEY_ISFLESHWHITESH = "isfleshwhitish";
    private static final String KEY_ISFLESHFIRMNESS = "isflesh_firmness";
    private static final String KEY_FLESHCOLORREMARKS = "flesh_color_remarks";
    private static final String KEY_ISWOUNDDAMAGE = "iswounds_damage";
    private static final String KEY_WOUNDDAMAGEREMARKS = "iswounds_damage_remarks";
    private static final String KEY_ISDISCOLORATION = "isdiscoloration";
    private static final String KEY_DISCOLORATIONREMARKS = "isdiscoloration_remarks";
    private static final String KEY_ISSTALKPRESSURE = "isstalk_Pressure";
    private static final String KEY_STALKPRESSUREREMARKS = "isstalk_Pressure_remarks";
    private static final String KEY_FRUITSIZING = "fruit_sizing";
    private static final String KEY_ISVARIETY = "isvariety";
    private static final String KEY_VARIETYREMARKS = "isvariety_remarks";
    private static final String KEY_ISHASSFLESHCOLORCREAMY = "ishas_fleshcolor_crreamy";
    private static final String KEY_COLORREMARKS = "color_remarks";
    private static final String KEY_ISSIZE = "issize";
    private static final String KEY_SIZEREMARKS = "size_remarks";
    private static final String KEY_ISFOREIGNMATTERPRESEN = "isforeign_matter_present";
    private static final String KEY_FOREIGNMATTERPRESENTREMARKS = "foreign_matter_present_remarks";
    private static final String KEY_ISMOISTUREONFRUITS = "ismoisture_fruits";
    private static final String KEY_MOISTUREONFRUITSREMARKS = "moisture_fruits_remarks";
    private static final String KEY_ISLOSTHARVESTTREATMENT = "islost_harvest_treatment";
    private static final String KEY_LOSTHARVESTTREATMENTREMARKS = "lost_harvest_treatment_remarks";

    public static final String CREATE_TABLE_HCD_MANGO_QUALITY_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HCD_MANGO_QUALITY_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HCD_MANGO_QUALITY_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENTNUMBER + " TEXT ,"
            + KEY_DOSUMENTDATE + " TEXT ,"
            + KEY_INSPECTIONREQUESTNO + " TEXT ,"
            + KEY_EXPORTERSNAME + " TEXT ,"
            + KEY_EXPORTERSAGENTNAME + " TEXT ,"
            + KEY_SIZEOFCONSIGNMENT + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_ISLATEXSTAINS + " TEXT ,"
            + KEY_LATEXSTAINSREMARKS + " TEXT ,"
            + KEY_ISYELLOW + " TEXT ,"
            + KEY_ISGREEN + " TEXT ,"
            + KEY_ISFLESHYELLOW + " TEXT ,"
            + KEY_ISFLESHWHITESH + " TEXT ,"
            + KEY_ISFLESHFIRMNESS + " TEXT ,"
            + KEY_FLESHCOLORREMARKS + " TEXT ,"
            + KEY_ISWOUNDDAMAGE + " TEXT ,"
            + KEY_WOUNDDAMAGEREMARKS + " TEXT ,"
            + KEY_ISDISCOLORATION + " TEXT ,"
            + KEY_DISCOLORATIONREMARKS + " TEXT ,"
            + KEY_ISSTALKPRESSURE + " TEXT ,"
            + KEY_STALKPRESSUREREMARKS + " TEXT ,"
            + KEY_FRUITSIZING + " TEXT ,"
            + KEY_ISVARIETY + " TEXT ,"
            + KEY_VARIETYREMARKS + " TEXT ,"
            + KEY_ISHASSFLESHCOLORCREAMY + " TEXT ,"
            + KEY_COLORREMARKS + " TEXT ,"
            + KEY_ISSIZE + " TEXT ,"
            + KEY_SIZEREMARKS + " TEXT ,"
            + KEY_ISFOREIGNMATTERPRESEN + " TEXT ,"
            + KEY_FOREIGNMATTERPRESENTREMARKS + " TEXT ,"
            + KEY_ISMOISTUREONFRUITS + " TEXT ,"
            + KEY_MOISTUREONFRUITSREMARKS + " TEXT ,"
            + KEY_ISLOSTHARVESTTREATMENT + " TEXT ,"
            + KEY_LOSTHARVESTTREATMENTREMARKS + " TEXT ,"
            + KEY_COMMENTS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_UPLOADED + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME" + ")";


    public long insertMangoQualityInspection(MangoQualityInspection mangoQualityInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, mangoQualityInspection.getLocalID());
        values.put(KEY_HCD_MANGO_QUALITY_INSPECTION_ID, mangoQualityInspection.getAFA_Mango_Quality_Inspection_ID());

        values.put(KEY_DOCUMENTNUMBER, mangoQualityInspection.getDocumentNumber());

        values.put(KEY_DOSUMENTDATE, mangoQualityInspection.getDocumentdate());

        values.put(KEY_INSPECTIONREQUESTNO, mangoQualityInspection.getInspectionRequestNo());

        values.put(KEY_EXPORTERSNAME, mangoQualityInspection.getExportersName());

        values.put(KEY_EXPORTERSAGENTNAME, mangoQualityInspection.getExportersAgentName());

        values.put(KEY_SIZEOFCONSIGNMENT, mangoQualityInspection.getSizeOfConsignment());

        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isMangoQualityInspectionStored(mangoQualityInspection.getAFA_Mango_Quality_Inspection_ID())) {
            long mangoQualityInspectionID = db.insertWithOnConflict(TABLE_HCD_MANGO_QUALITY_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("mangoQualityInspectionID: " + mangoQualityInspectionID);

            closeDB();
            return mangoQualityInspectionID;
        } else {
            long mangoQualityInspectionID = -1;
            System.out.println("mangoQualityInspectionID: " + mangoQualityInspectionID);

            closeDB();
            return mangoQualityInspectionID;
        }

    }

    public boolean isMangoQualityInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_HCD_MANGO_QUALITY_INSPECTION + " WHERE " + KEY_HCD_MANGO_QUALITY_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public void deleteMangoQualityInspection() {

        String deleteQuery = "DELETE FROM " + TABLE_HCD_MANGO_QUALITY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public long UpdateMangoQualityInspection(HCDMangoQualityInspection hCDMangoQualityInspection) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_ISLATEXSTAINS, hCDMangoQualityInspection.getIsLatexstains());
            values.put(KEY_LATEXSTAINSREMARKS, hCDMangoQualityInspection.getLatexStainsRemarks());
            values.put(KEY_ISYELLOW, hCDMangoQualityInspection.getIsyellow());
            values.put(KEY_ISGREEN, hCDMangoQualityInspection.getIsgreen());
            values.put(KEY_ISFLESHYELLOW, hCDMangoQualityInspection.getIsfleshYellow());
            values.put(KEY_ISFLESHWHITESH, hCDMangoQualityInspection.getIsfleshWhitesh());
            values.put(KEY_ISFLESHFIRMNESS, hCDMangoQualityInspection.getIsfleshFirmness());
            values.put(KEY_FLESHCOLORREMARKS, hCDMangoQualityInspection.getFleshColorRemarks());
            values.put(KEY_ISWOUNDDAMAGE, hCDMangoQualityInspection.getIswoundDamage());
            values.put(KEY_WOUNDDAMAGEREMARKS, hCDMangoQualityInspection.getWoundDamageRemarks());
            values.put(KEY_ISDISCOLORATION, hCDMangoQualityInspection.getIsdiscoloration());
            values.put(KEY_DISCOLORATIONREMARKS, hCDMangoQualityInspection.getDiscolorationRemarks());
            values.put(KEY_ISSTALKPRESSURE, hCDMangoQualityInspection.getIsStalkpressure());
            values.put(KEY_STALKPRESSUREREMARKS, hCDMangoQualityInspection.getStalkPressureRemarks());
            values.put(KEY_FRUITSIZING, hCDMangoQualityInspection.getFruitSizing());
            values.put(KEY_ISVARIETY, hCDMangoQualityInspection.getIsvariety());
            values.put(KEY_VARIETYREMARKS, hCDMangoQualityInspection.getVarietyRemarks());
            values.put(KEY_ISHASSFLESHCOLORCREAMY, hCDMangoQualityInspection.getIshassFleshColorCreamy());
            values.put(KEY_COLORREMARKS, hCDMangoQualityInspection.getColorRemarks());
            values.put(KEY_ISSIZE, hCDMangoQualityInspection.getIssize());
            values.put(KEY_SIZEREMARKS, hCDMangoQualityInspection.getSizeRemarks());
            values.put(KEY_ISFOREIGNMATTERPRESEN, hCDMangoQualityInspection.getIsforeignMatterpresen());
            values.put(KEY_FOREIGNMATTERPRESENTREMARKS, hCDMangoQualityInspection.getForeignMatterPresentRemarks());
            values.put(KEY_ISMOISTUREONFRUITS, hCDMangoQualityInspection.getIsMoistureonFruits());
            values.put(KEY_MOISTUREONFRUITSREMARKS, hCDMangoQualityInspection.getMoistureonFruitsRemarks());
            values.put(KEY_ISLOSTHARVESTTREATMENT, hCDMangoQualityInspection.getIsLostHarvesttreatment());
            values.put(KEY_LOSTHARVESTTREATMENTREMARKS, hCDMangoQualityInspection.getLostHarvesttreatmentRemarks());
            values.put(KEY_COMMENTS, hCDMangoQualityInspection.getComments());
            values.put(KEY_OFFICER_RECOMMENDATION, hCDMangoQualityInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, hCDMangoQualityInspection.getOfficerrecommendation_remark());

            result = db.update(TABLE_HCD_MANGO_QUALITY_INSPECTION, values, "id =" + Integer.parseInt(hCDMangoQualityInspection.getLocalID()), null);

            System.out.println("results is " + result);


        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<MangoQualityInspection> getMangoQualityInspectionList() {

        List<MangoQualityInspection> MangoQualityInspectionlist = new ArrayList<MangoQualityInspection>();
        MangoQualityInspection td = new MangoQualityInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_MANGO_QUALITY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Mango Quality inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new MangoQualityInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Mango_Quality_Inspection_ID(c.getString((c.getColumnIndex(KEY_HCD_MANGO_QUALITY_INSPECTION_ID))));

                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));

                    td.setDocumentdate(c.getString((c.getColumnIndex(KEY_DOSUMENTDATE))));

                    td.setInspectionRequestNo(c.getString((c.getColumnIndex(KEY_INSPECTIONREQUESTNO))));

                    td.setExportersName(c.getString((c.getColumnIndex(KEY_EXPORTERSNAME))));

                    td.setExportersAgentName(c.getString((c.getColumnIndex(KEY_EXPORTERSAGENTNAME))));

                    td.setSizeOfConsignment(c.getString((c.getColumnIndex(KEY_SIZEOFCONSIGNMENT))));


                    // adding to itinerary list
                    MangoQualityInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + MangoQualityInspectionlist.size());
        return MangoQualityInspectionlist;
    }


    public List<MangoQualityInspection> getMangoQualityInspectionDone() {

        List<MangoQualityInspection> MangoQualityInspectionList = new ArrayList<MangoQualityInspection>();
        MangoQualityInspection td = new MangoQualityInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_MANGO_QUALITY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new MangoQualityInspection();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Mango_Quality_Inspection_ID(c.getString((c.getColumnIndex(KEY_HCD_MANGO_QUALITY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));
                    td.setDocumentdate(c.getString((c.getColumnIndex(KEY_DOSUMENTDATE))));
                    td.setInspectionRequestNo(c.getString((c.getColumnIndex(KEY_INSPECTIONREQUESTNO))));
                    td.setExportersName(c.getString((c.getColumnIndex(KEY_EXPORTERSNAME))));
                    td.setExportersAgentName(c.getString((c.getColumnIndex(KEY_EXPORTERSAGENTNAME))));
                    td.setSizeOfConsignment(c.getString((c.getColumnIndex(KEY_SIZEOFCONSIGNMENT))));
                    td.setIsLatexstains(c.getString((c.getColumnIndex(KEY_ISLATEXSTAINS))));
                    td.setLatexStainsRemarks(c.getString((c.getColumnIndex(KEY_LATEXSTAINSREMARKS))));
                    td.setIsyellow(c.getString((c.getColumnIndex(KEY_ISYELLOW))));
                    td.setIsgreen(c.getString((c.getColumnIndex(KEY_ISGREEN))));
                    td.setIsfleshYellow(c.getString((c.getColumnIndex(KEY_ISFLESHYELLOW))));
                    td.setIsfleshWhitesh(c.getString((c.getColumnIndex(KEY_ISFLESHWHITESH))));
                    td.setIsfleshFirmness(c.getString((c.getColumnIndex(KEY_ISFLESHFIRMNESS))));
                    td.setFleshColorRemarks(c.getString((c.getColumnIndex(KEY_FLESHCOLORREMARKS))));
                    td.setIswoundDamage(c.getString((c.getColumnIndex(KEY_ISWOUNDDAMAGE))));
                    td.setWoundDamageRemarks(c.getString((c.getColumnIndex(KEY_WOUNDDAMAGEREMARKS))));
                    td.setIsdiscoloration(c.getString((c.getColumnIndex(KEY_ISDISCOLORATION))));
                    td.setDiscolorationRemarks(c.getString((c.getColumnIndex(KEY_DISCOLORATIONREMARKS))));
                    td.setIsStalkpressure(c.getString((c.getColumnIndex(KEY_ISSTALKPRESSURE))));
                    td.setStalkPressureRemarks(c.getString((c.getColumnIndex(KEY_STALKPRESSUREREMARKS))));
                    td.setFruitSizing(c.getString((c.getColumnIndex(KEY_FRUITSIZING))));
                    td.setIsvariety(c.getString((c.getColumnIndex(KEY_ISVARIETY))));
                    td.setVarietyRemarks(c.getString((c.getColumnIndex(KEY_VARIETYREMARKS))));
                    td.setIshassFleshColorCreamy(c.getString((c.getColumnIndex(KEY_ISHASSFLESHCOLORCREAMY))));
                    td.setColorRemarks(c.getString((c.getColumnIndex(KEY_COLORREMARKS))));
                    td.setIssize(c.getString((c.getColumnIndex(KEY_ISSIZE))));
                    td.setSizeRemarks(c.getString((c.getColumnIndex(KEY_SIZEREMARKS))));
                    td.setIsforeignMatterpresen(c.getString((c.getColumnIndex(KEY_ISFOREIGNMATTERPRESEN))));
                    td.setForeignMatterPresentRemarks(c.getString((c.getColumnIndex(KEY_FOREIGNMATTERPRESENTREMARKS))));
                    td.setIsMoistureonFruits(c.getString((c.getColumnIndex(KEY_ISMOISTUREONFRUITS))));
                    td.setMoistureonFruitsRemarks(c.getString((c.getColumnIndex(KEY_MOISTUREONFRUITSREMARKS))));
                    td.setIsLostHarvesttreatment(c.getString((c.getColumnIndex(KEY_ISLOSTHARVESTTREATMENT))));
                    td.setLostHarvesttreatmentRemarks(c.getString((c.getColumnIndex(KEY_LOSTHARVESTTREATMENTREMARKS))));
                    td.setComments(c.getString((c.getColumnIndex(KEY_COMMENTS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    MangoQualityInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + MangoQualityInspectionList.size());
        return MangoQualityInspectionList;
    }

    public void deleteMangoQualityInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_HCD_MANGO_QUALITY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean updateMangoQualityInspectionrSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_HCD_MANGO_QUALITY_INSPECTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    /*TABLE_HCD_AVOCADO_QUALITY_INSPECTION*/
    public static final String TABLE_HCD_AVOCADO_QUALITY_INSPECTION = "hcd_avocado_quality_inspection";
    public static final String TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT = "hcd_avocado_quality_inspection_oil_content";
    private static final String KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID = "hcd_mango_quality_inspection__id";
    private static final String KEY_DOCMENTNUMBER = "doc_number";
    private static final String KEY_DOCUMENTDATE = "doc_date";
    //    private static final String KEY_NAMEOFAPPLICANT = "name_of_appli";
    private static final String KEY_HORTICULTUREEXPORTERREQUEST = "hort_inspection_no";
    private static final String KEY_FAX = "fax";
    private static final String KEY_LOCATIONOFPRODUCE = "location_produce";
    private static final String KEY_TELEPHON = "telephone";
    private static final String KEY_EXPORTERSAGENTNAME2 = "exporters_agent_name";
    private static final String KEY_SIZEOFCONSIGNMENT2 = "size_f_consignment";
    private static final String KEY_DESIGNATION = "designation";
    //    private static final String KEY_LOCALID = "localid";
    private static final String KEY_ISFUARTESKINGLOSSYSHINE = "isfuarteskinglossyshine";
    private static final String KEY_FUARTESKINGLOSSYSHINEREMARKS = "isfuarteskinglossyshineremarks";
    private static final String KEY_ISFUARTECOLORGREEWITHYELOWFINT = "isfuartecolorgreewithyelowfint";
    private static final String KEY_FUARTECOLORGREEWITHYELOWFINTREMARKS = "fuartecolorgreewithyelowfintremarks";
    private static final String KEY_ISFUARTESKINTEXTURESMOOTH = "isfuarteskintexturesmooth";
    private static final String KEY_FUARTESKINTEXTURESMOOTHREMARKS = "fuarteskintexturesmoothremarks";
    private static final String KEY_ISFUARTEFLESHCOLORCREAMYYELLOW = "isfuartefleshcolorcreamyyellow";
    private static final String KEY_FUARTEFLESHCOLORCREAMYYELLOWREMARKS = "fuartefleshcolorcreamyyellowremarks";
    private static final String KEY_ISHASSCOLORGREEN = "ishasscolorgreen";
    private static final String KEY_HASSCOLORGREENREMARKS = "hasscolorgreenremarks";
    private static final String KEY_ISHASSSKINTEXTUREROUGH = "ishassskintexturerough";
    private static final String KEY_HASSSKINTEXTUREROUGHREMARK = "hassskintextureroughremarks";
    private static final String KEY_ISHASFLESHCOLORCREAMY = "ishasfleshcolorcreamy";
    private static final String KEY_HASSFLESHCOLORCREAMYREMARKS = "hassfleshcolorcreamyremarks";
    private static final String KEY_ISSKINCOLORGREENTOYELLOW = "isskincolorgreentoyellow";
    private static final String KEY_SKINCOLORGREENTOYELLOWREMARKS = "skincolorgreentoyellowremarks";
    private static final String KEY_ISSKINSMOOTHATBLOSSOM = "isskinsmoothatblossom";
    private static final String KEY_SKINSMOOTHATBLOSSOMREMARKS = "skinsmoothatblossomremarks";
    private static final String KEY_ISFLESHCOLORCREAMY = "isfleshcolorcreamy";
    private static final String KEY_FLESHCOLORCREAMYREMARKS = "fleshcolorcreamyremarks";
    private static final String KEY_ISOILCONTENT1 = "isoilcontent1";
    private static final String KEY_OILCONTENT1REMARKS = "oilcontent1remarks";
    private static final String KEY_ISSTALKPRESSENCE = "isstalkpressence";
    private static final String KEY_STALKPRESSENCEREMARKS = "stalkpressenceremarks";
    private static final String KEY_ISWOUNDS_DAMAGE = "iswounds_damage";
    private static final String KEY_WOUNDS_DAMAGEREMARKS = "wounds_damageremarks";
    private static final String KEY_IS_DISCOLORATION = "is_discoloration";
    private static final String KEY_DISCOLOURATIONREMARKS = "discolourationremarks";
    private static final String KEY_FRUIT_SIZING = "fruit_sizing";
    private static final String KEY_IS_VARIETY = "is_variety";
    private static final String KEY_VARIETY_REMARKS = "variety_remarks";
    private static final String KEY_ISHAS_FLESHCOLORCREAMY = "ishas_fleshcolorcreamy";
    private static final String KEY_COLOR_REMARKS = "color_remarks";
    private static final String KEY_IS_SIZE = "is_size";
    private static final String KEY_SIZE_REMARKS = "size_remarks";
    private static final String KEY_ISFRUITFIRM = "isfruitfirm";
    private static final String KEY_FRUITFIRMREMARKS = "fruitfirmremarks";
    private static final String KEY_ISFOREIGNMATTERPRESENT = "isforeignmatterpresent";
    private static final String KEY_FOREIGN_MATTERPRESENTREMARKS = "foreign_matterpresentremarks";
    private static final String KEY_ISMOISTUREON_FRUITS = "ismoistureon_fruits";
    private static final String KEY_MOISTUREONFRUITS_REMARKS = "moistureonfruits_remarks";
    private static final String KEY_ISPOSTHARVESTTREATMENT = "ispostharvesttreatment";
    private static final String KEY_POSTHARVESTTREATMENTREMARKS = "postharvesttreatmentremarks";
    private static final String KEY_AVACADO_COMMENTS = "avacado_comments";
    private static final String KEY_SOURCE = "source";
    private static final String KEY_DESTINATION = "destination";
    private static final String KEY_SAMPLEVARIETY = "samplevariety";
    private static final String KEY_SAMPLEFRUITSIZE = "samplefruitsize";
    private static final String KEY_INITIALWT = "initialwtt";
    private static final String KEY_FINALWT = "finalwt";
    private static final String KEY_MOISTURECONTENTIWFW = "moisturecontentiwfw";
    private static final String KEY_MOISTURECONTENTPERCETAGE = "moisturecontentpercetage";
    private static final String KEY_OILCONTENT = "oilcontent";
    private static final String KEY_REMARKS = "remarks";


    public static final String CREATE_TABLE_HCD_AVOCADO_QUALITY_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HCD_AVOCADO_QUALITY_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID + " TEXT,"
            + KEY_DOCMENTNUMBER + " TEXT ,"
            + KEY_DOCUMENTDATE + " TEXT ,"
            + KEY_NAMEOFAPPLICANT + " TEXT ,"
            + KEY_HORTICULTUREEXPORTERREQUEST + " TEXT ,"
            + KEY_FAX + " TEXT ,"
            + KEY_LOCATIONOFPRODUCE + " TEXT ,"
            + KEY_TELEPHON + " TEXT ,"
            + KEY_EXPORTERSAGENTNAME2 + " TEXT ,"
            + KEY_SIZEOFCONSIGNMENT2 + " TEXT ,"
            + KEY_DESIGNATION + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_LOCALID + " TEXT ,"
            + KEY_ISFUARTESKINGLOSSYSHINE + " TEXT ,"
            + KEY_FUARTESKINGLOSSYSHINEREMARKS + " TEXT ,"
            + KEY_ISFUARTECOLORGREEWITHYELOWFINT + " TEXT ,"
            + KEY_FUARTECOLORGREEWITHYELOWFINTREMARKS + " TEXT ,"
            + KEY_ISFUARTESKINTEXTURESMOOTH + " TEXT ,"
            + KEY_FUARTESKINTEXTURESMOOTHREMARKS + " TEXT ,"
            + KEY_ISFUARTEFLESHCOLORCREAMYYELLOW + " TEXT ,"
            + KEY_FUARTEFLESHCOLORCREAMYYELLOWREMARKS + " TEXT ,"
            + KEY_ISHASSCOLORGREEN + " TEXT ,"
            + KEY_HASSCOLORGREENREMARKS + " TEXT ,"
            + KEY_ISHASSSKINTEXTUREROUGH + " TEXT ,"
            + KEY_HASSSKINTEXTUREROUGHREMARK + " TEXT ,"
            + KEY_ISHASFLESHCOLORCREAMY + " TEXT ,"
            + KEY_HASSFLESHCOLORCREAMYREMARKS + " TEXT ,"
            + KEY_ISSKINCOLORGREENTOYELLOW + " TEXT ,"
            + KEY_SKINCOLORGREENTOYELLOWREMARKS + " TEXT ,"
            + KEY_ISSKINSMOOTHATBLOSSOM + " TEXT ,"
            + KEY_SKINSMOOTHATBLOSSOMREMARKS + " TEXT ,"
            + KEY_ISFLESHCOLORCREAMY + " TEXT ,"
            + KEY_FLESHCOLORCREAMYREMARKS + " TEXT ,"
            + KEY_ISOILCONTENT1 + " TEXT ,"
            + KEY_OILCONTENT1REMARKS + " TEXT ,"
            + KEY_ISSTALKPRESSENCE + " TEXT ,"
            + KEY_STALKPRESSENCEREMARKS + " TEXT ,"
            + KEY_ISWOUNDS_DAMAGE + " TEXT ,"
            + KEY_WOUNDS_DAMAGEREMARKS + " TEXT ,"
            + KEY_IS_DISCOLORATION + " TEXT ,"
            + KEY_DISCOLOURATIONREMARKS + " TEXT ,"
            + KEY_FRUIT_SIZING + " TEXT ,"
            + KEY_IS_VARIETY + " TEXT ,"
            + KEY_VARIETY_REMARKS + " TEXT ,"
            + KEY_ISHAS_FLESHCOLORCREAMY + " TEXT ,"
            + KEY_COLOR_REMARKS + " TEXT ,"
            + KEY_IS_SIZE + " TEXT ,"
            + KEY_SIZE_REMARKS + " TEXT ,"
            + KEY_ISFRUITFIRM + " TEXT ,"
            + KEY_FRUITFIRMREMARKS + " TEXT ,"
            + KEY_ISFOREIGNMATTERPRESENT + " TEXT ,"
            + KEY_FOREIGN_MATTERPRESENTREMARKS + " TEXT ,"
            + KEY_ISMOISTUREON_FRUITS + " TEXT ,"
            + KEY_MOISTUREONFRUITS_REMARKS + " TEXT ,"
            + KEY_ISPOSTHARVESTTREATMENT + " TEXT ,"
            + KEY_POSTHARVESTTREATMENTREMARKS + " TEXT ,"
            + KEY_AVACADO_COMMENTS + " TEXT ,"
            + KEY_SOURCE + " TEXT ,"
            + KEY_DESTINATION + " TEXT ,"
            + KEY_SAMPLEVARIETY + " TEXT ,"
            + KEY_SAMPLEFRUITSIZE + " TEXT ,"
            + KEY_INITIALWT + " TEXT ,"
            + KEY_FINALWT + " TEXT ,"
            + KEY_MOISTURECONTENTIWFW + " TEXT ,"
            + KEY_MOISTURECONTENTPERCETAGE + " TEXT ,"
            + KEY_OILCONTENT + " TEXT ,"
            + KEY_REMARKS + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public static final String CREATE_TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_SOURCE + " TEXT ,"
            + KEY_DESTINATION + " TEXT ,"
            + KEY_SAMPLEVARIETY + " TEXT ,"
            + KEY_SAMPLEFRUITSIZE + " TEXT ,"
            + KEY_INITIALWT + " TEXT ,"
            + KEY_FINALWT + " TEXT ,"
            + KEY_MOISTURECONTENTIWFW + " TEXT ,"
            + KEY_MOISTURECONTENTPERCETAGE + " TEXT ,"
            + KEY_OILCONTENT + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertHCDAvocadoQualityInspection(AvocadoQualityInspection avocadoQualityInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_ID, avocadoQualityInspection.getLocalID());
        values.put(KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID, avocadoQualityInspection.getAFA_HCD_Avocado_Quality_Inspection_ID());
        values.put(KEY_DOCMENTNUMBER, avocadoQualityInspection.getDocumentNumber());
        values.put(KEY_DOCUMENTDATE, avocadoQualityInspection.getDocumentDate());
        values.put(KEY_NAMEOFAPPLICANT, avocadoQualityInspection.getNameOfApplicant());
        values.put(KEY_HORTICULTUREEXPORTERREQUEST, avocadoQualityInspection.getHorticultureExporterRequest());
        values.put(KEY_FAX, avocadoQualityInspection.getFax());
        values.put(KEY_LOCATIONOFPRODUCE, avocadoQualityInspection.getLocationOfProduce());
        values.put(KEY_TELEPHON, avocadoQualityInspection.getTelephone());
        values.put(KEY_EXPORTERSAGENTNAME2, avocadoQualityInspection.getExportersAgentName());
        values.put(KEY_SIZEOFCONSIGNMENT2, avocadoQualityInspection.getSizeOfConsignment());
        values.put(KEY_DESIGNATION, avocadoQualityInspection.getDesignation());

        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isAvocadoQualityInspectionStored(avocadoQualityInspection.getAFA_HCD_Avocado_Quality_Inspection_ID())) {
            long avocadoQualityInspectionID = db.insertWithOnConflict(TABLE_HCD_AVOCADO_QUALITY_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("avocadoQualityInspectionID: " + avocadoQualityInspectionID);

            closeDB();
            return avocadoQualityInspectionID;
        } else {
            long avocadoQualityInspectionID = -1;
            System.out.println("avocadoQualityInspectionID: " + avocadoQualityInspectionID);

            closeDB();
            return avocadoQualityInspectionID;
        }

    }

    public boolean isAvocadoQualityInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION + " WHERE " + KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public void deleteAvocadoQualityInspection() {

        String deleteQuery = "DELETE FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public boolean updateAvocadoQualityInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_HCD_AVOCADO_QUALITY_INSPECTION, values, KEY_ID + " =" + localID, null);

            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long UpdateHCDAvocadoQualityInspection(HCDAvocadoQualityInspection hCDAvocadoQualityInspection) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");

            values.put(KEY_ISFUARTESKINGLOSSYSHINE, hCDAvocadoQualityInspection.getIsFuarteSkinglossyShine());
            values.put(KEY_ISFUARTESKINGLOSSYSHINE, hCDAvocadoQualityInspection.getIsFuarteSkinglossyShine());
            values.put(KEY_FUARTESKINGLOSSYSHINEREMARKS, hCDAvocadoQualityInspection.getFuarteSkinglossyShineRemarks());
            values.put(KEY_ISFUARTECOLORGREEWITHYELOWFINT, hCDAvocadoQualityInspection.getIsFuartecolorGreeWithYelowFint());
            values.put(KEY_FUARTECOLORGREEWITHYELOWFINTREMARKS, hCDAvocadoQualityInspection.getFuarteColorGreeWithYelowFintRemarks());
            values.put(KEY_ISFUARTESKINTEXTURESMOOTH, hCDAvocadoQualityInspection.getIsFuarteskinTextureSmooth());
            values.put(KEY_FUARTESKINTEXTURESMOOTHREMARKS, hCDAvocadoQualityInspection.getFuarteSkinTextureSmoothRemarks());
            values.put(KEY_ISFUARTEFLESHCOLORCREAMYYELLOW, hCDAvocadoQualityInspection.getIsFuarteFleshcolorCreamyYellow());
            values.put(KEY_FUARTEFLESHCOLORCREAMYYELLOWREMARKS, hCDAvocadoQualityInspection.getFuarteFleshcolorCreamyYellowRemarks());
            values.put(KEY_ISHASSCOLORGREEN, hCDAvocadoQualityInspection.getIsHasscolorGreen());
            values.put(KEY_HASSCOLORGREENREMARKS, hCDAvocadoQualityInspection.getHassColorGreenRemarks());
            values.put(KEY_ISHASSSKINTEXTUREROUGH, hCDAvocadoQualityInspection.getIsHassSkintextureRough());
            values.put(KEY_HASSSKINTEXTUREROUGHREMARK, hCDAvocadoQualityInspection.getHassSkinTextureRoughRemarks());
            values.put(KEY_ISHASFLESHCOLORCREAMY, hCDAvocadoQualityInspection.getIsHassFleshcolorCreamy());
            values.put(KEY_HASSFLESHCOLORCREAMYREMARKS, hCDAvocadoQualityInspection.getHassFleshColorCreamyRemarks());
            values.put(KEY_ISSKINCOLORGREENTOYELLOW, hCDAvocadoQualityInspection.getIsSkinColorgreenToYellow());
            values.put(KEY_SKINCOLORGREENTOYELLOWREMARKS, hCDAvocadoQualityInspection.getSkinColorGreenToYellowRemarks());
            values.put(KEY_ISSKINSMOOTHATBLOSSOM, hCDAvocadoQualityInspection.getIsSkinsmoothAtBlossom());
            values.put(KEY_SKINSMOOTHATBLOSSOMREMARKS, hCDAvocadoQualityInspection.getSkinSmoothAtBlossomRemarks());
            values.put(KEY_ISFLESHCOLORCREAMY, hCDAvocadoQualityInspection.getIsFleshcolorCreamyYellow());
            values.put(KEY_FLESHCOLORCREAMYREMARKS, hCDAvocadoQualityInspection.getFleshColorCreamyRemarks());
            values.put(KEY_ISOILCONTENT1, hCDAvocadoQualityInspection.getIsOilcontent1());
            values.put(KEY_OILCONTENT1REMARKS, hCDAvocadoQualityInspection.getOilContent());
            values.put(KEY_ISSTALKPRESSENCE, hCDAvocadoQualityInspection.getIsStalkpressence());
            values.put(KEY_STALKPRESSENCEREMARKS, hCDAvocadoQualityInspection.getStalkPressenceRemarks());
            values.put(KEY_ISWOUNDS_DAMAGE, hCDAvocadoQualityInspection.getIsWoundsdamage());
            values.put(KEY_WOUNDS_DAMAGEREMARKS, hCDAvocadoQualityInspection.getWoundsDamageRemarks());
            values.put(KEY_IS_DISCOLORATION, hCDAvocadoQualityInspection.getIsDiscoloration());
            values.put(KEY_DISCOLOURATIONREMARKS, hCDAvocadoQualityInspection.getDiscolourationRemarks());
            values.put(KEY_FRUIT_SIZING, hCDAvocadoQualityInspection.getFruitSizing());
            values.put(KEY_IS_VARIETY, hCDAvocadoQualityInspection.getIsvariety());
            values.put(KEY_VARIETY_REMARKS, hCDAvocadoQualityInspection.getVarietyRemarks());
            values.put(KEY_ISHAS_FLESHCOLORCREAMY, hCDAvocadoQualityInspection.getIsHassFleshcolorCreamy());
            values.put(KEY_COLOR_REMARKS, hCDAvocadoQualityInspection.getColorRemarks());
            values.put(KEY_IS_SIZE, hCDAvocadoQualityInspection.getIssize());
            values.put(KEY_SIZE_REMARKS, hCDAvocadoQualityInspection.getSizeRemarks());
            values.put(KEY_ISFRUITFIRM, hCDAvocadoQualityInspection.getIsFruitfirm());
            values.put(KEY_FRUITFIRMREMARKS, hCDAvocadoQualityInspection.getFruitFirmRemarks());
            values.put(KEY_ISFOREIGNMATTERPRESENT, hCDAvocadoQualityInspection.getIsForeignmatterPresent());
            values.put(KEY_FOREIGN_MATTERPRESENTREMARKS, hCDAvocadoQualityInspection.getForeignMatterPresentRemarks());
            values.put(KEY_ISMOISTUREON_FRUITS, hCDAvocadoQualityInspection.getIsMoistureonFruits());
            values.put(KEY_MOISTUREONFRUITS_REMARKS, hCDAvocadoQualityInspection.getMoistureOnFruitsRemarks());
            values.put(KEY_ISPOSTHARVESTTREATMENT, hCDAvocadoQualityInspection.getIsPostharvestTreatment());
            values.put(KEY_POSTHARVESTTREATMENTREMARKS, hCDAvocadoQualityInspection.getPostHarvestTreatmentRemarks());
            values.put(KEY_AVACADO_COMMENTS, hCDAvocadoQualityInspection.getComments());
            values.put(KEY_OFFICER_RECOMMENDATION, hCDAvocadoQualityInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, hCDAvocadoQualityInspection.getOfficerrecommendation_remark());

            result = db.update(TABLE_HCD_AVOCADO_QUALITY_INSPECTION, values, "id =" + Integer.parseInt(hCDAvocadoQualityInspection.getLocalID()), null);

            System.out.println("results is " + result);


        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<AvocadoQualityInspection> getAvocadoQualityInspectionList() {

        List<AvocadoQualityInspection> avocadoQualityInspectionlist = new ArrayList<AvocadoQualityInspection>();
        AvocadoQualityInspection td = new AvocadoQualityInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Avocado Quality Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new AvocadoQualityInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HCD_Avocado_Quality_Inspection_ID(c.getString((c.getColumnIndex(KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAMEOFAPPLICANT))));
                    td.setHorticultureExporterRequest(c.getString((c.getColumnIndex(KEY_HORTICULTUREEXPORTERREQUEST))));
                    td.setFax(c.getString((c.getColumnIndex(KEY_FAX))));
                    td.setLocationOfProduce(c.getString((c.getColumnIndex(KEY_LOCATIONOFPRODUCE))));
                    td.setTelephone(c.getString((c.getColumnIndex(KEY_TELEPHON))));
                    td.setExportersAgentName(c.getString((c.getColumnIndex(KEY_EXPORTERSAGENTNAME2))));
                    td.setSizeOfConsignment(c.getString((c.getColumnIndex(KEY_SIZEOFCONSIGNMENT2))));
                    td.setDesignation(c.getString((c.getColumnIndex(KEY_DESIGNATION))));


                    // adding to itinerary list
                    avocadoQualityInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + avocadoQualityInspectionlist.size());
        return avocadoQualityInspectionlist;
    }


    public List<AvocadoQualityInspection> getAvocadoQualityInspectionDone() {

        List<AvocadoQualityInspection> AvocadoQualityInspectionList = new ArrayList<AvocadoQualityInspection>();
        AvocadoQualityInspection td = new AvocadoQualityInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new AvocadoQualityInspection();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HCD_Avocado_Quality_Inspection_ID(c.getString((c.getColumnIndex(KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAMEOFAPPLICANT))));
                    td.setHorticultureExporterRequest(c.getString((c.getColumnIndex(KEY_HORTICULTUREEXPORTERREQUEST))));
                    td.setFax(c.getString((c.getColumnIndex(KEY_FAX))));
                    td.setLocationOfProduce(c.getString((c.getColumnIndex(KEY_LOCATIONOFPRODUCE))));
                    td.setTelephone(c.getString((c.getColumnIndex(KEY_TELEPHON))));
                    td.setExportersAgentName(c.getString((c.getColumnIndex(KEY_EXPORTERSAGENTNAME2))));
                    td.setSizeOfConsignment(c.getString((c.getColumnIndex(KEY_SIZEOFCONSIGNMENT2))));
                    td.setDesignation(c.getString((c.getColumnIndex(KEY_DESIGNATION))));
                    td.setIsFuarteSkinglossyShine(c.getString((c.getColumnIndex(KEY_ISFUARTESKINGLOSSYSHINE))));
                    td.setFuarteSkinglossyShineRemarks(c.getString((c.getColumnIndex(KEY_FUARTESKINGLOSSYSHINEREMARKS))));
                    td.setIsFuartecolorGreeWithYelowFint(c.getString((c.getColumnIndex(KEY_ISFUARTECOLORGREEWITHYELOWFINT))));
                    td.setFuarteColorGreeWithYelowFintRemarks(c.getString((c.getColumnIndex(KEY_FUARTECOLORGREEWITHYELOWFINTREMARKS))));
                    td.setIsFuarteskinTextureSmooth(c.getString((c.getColumnIndex(KEY_ISFUARTESKINTEXTURESMOOTH))));
                    td.setFuarteSkinTextureSmoothRemarks(c.getString((c.getColumnIndex(KEY_FUARTESKINTEXTURESMOOTHREMARKS))));
                    td.setIsFuarteFleshcolorCreamyYellow(c.getString((c.getColumnIndex(KEY_ISFUARTEFLESHCOLORCREAMYYELLOW))));
                    td.setFuarteFleshcolorCreamyYellowRemarks(c.getString((c.getColumnIndex(KEY_FUARTEFLESHCOLORCREAMYYELLOWREMARKS))));
                    td.setIsHasscolorGreen(c.getString((c.getColumnIndex(KEY_ISHASSCOLORGREEN))));
                    td.setHassColorGreenRemarks(c.getString((c.getColumnIndex(KEY_HASSCOLORGREENREMARKS))));
                    td.setIsHassSkintextureRough(c.getString((c.getColumnIndex(KEY_ISHASSSKINTEXTUREROUGH))));
                    td.setHassSkinTextureRoughRemarks(c.getString((c.getColumnIndex(KEY_HASSSKINTEXTUREROUGHREMARK))));
                    td.setIsHassFleshcolorCreamy(c.getString((c.getColumnIndex(KEY_ISHASFLESHCOLORCREAMY))));
                    td.setHassFleshColorCreamyRemarks(c.getString((c.getColumnIndex(KEY_HASSFLESHCOLORCREAMYREMARKS))));
                    td.setIsSkinColorgreenToYellow(c.getString((c.getColumnIndex(KEY_ISSKINCOLORGREENTOYELLOW))));
                    td.setSkinColorGreenToYellowRemarks(c.getString((c.getColumnIndex(KEY_SKINCOLORGREENTOYELLOWREMARKS))));
                    td.setIsSkinsmoothAtBlossom(c.getString((c.getColumnIndex(KEY_ISSKINSMOOTHATBLOSSOM))));
                    td.setSkinSmoothAtBlossomRemarks(c.getString((c.getColumnIndex(KEY_SKINSMOOTHATBLOSSOMREMARKS))));
                    td.setIsFleshcolorCreamy(c.getString((c.getColumnIndex(KEY_ISFLESHCOLORCREAMY))));
                    td.setFleshColorCreamyRemarks(c.getString((c.getColumnIndex(KEY_FLESHCOLORCREAMYREMARKS))));
                    td.setIsOilcontent1(c.getString((c.getColumnIndex(KEY_ISOILCONTENT1))));
                    td.setOilContent1Remarks(c.getString((c.getColumnIndex(KEY_OILCONTENT1REMARKS))));
                    td.setIsStalkpressence(c.getString((c.getColumnIndex(KEY_ISSTALKPRESSENCE))));
                    td.setStalkPressenceRemarks(c.getString((c.getColumnIndex(KEY_STALKPRESSENCEREMARKS))));
                    td.setIsWoundsdamage(c.getString((c.getColumnIndex(KEY_ISWOUNDS_DAMAGE))));
                    td.setWoundsDamageRemarks(c.getString((c.getColumnIndex(KEY_WOUNDS_DAMAGEREMARKS))));
                    td.setIsDiscoloration(c.getString((c.getColumnIndex(KEY_IS_DISCOLORATION))));
                    td.setDiscolourationRemarks(c.getString((c.getColumnIndex(KEY_DISCOLOURATIONREMARKS))));
                    td.setFruitSizing(c.getString((c.getColumnIndex(KEY_FRUIT_SIZING))));
                    td.setIsvariety(c.getString((c.getColumnIndex(KEY_IS_VARIETY))));
                    td.setVarietyRemarks(c.getString((c.getColumnIndex(KEY_VARIETY_REMARKS))));
                    td.setIsHassFleshcolorCreamy(c.getString((c.getColumnIndex(KEY_ISHAS_FLESHCOLORCREAMY))));
                    td.setColorRemarks(c.getString((c.getColumnIndex(KEY_COLOR_REMARKS))));
                    td.setIssize(c.getString((c.getColumnIndex(KEY_IS_SIZE))));
                    td.setSizeRemarks(c.getString((c.getColumnIndex(KEY_SIZE_REMARKS))));
                    td.setIsFruitfirm(c.getString((c.getColumnIndex(KEY_ISFRUITFIRM))));
                    td.setFruitFirmRemarks(c.getString((c.getColumnIndex(KEY_FRUITFIRMREMARKS))));
                    td.setIsForeignmatterPresent(c.getString((c.getColumnIndex(KEY_ISFOREIGNMATTERPRESENT))));
                    td.setForeignMatterPresentRemarks(c.getString((c.getColumnIndex(KEY_FOREIGN_MATTERPRESENTREMARKS))));
                    td.setIsMoistureonFruits(c.getString((c.getColumnIndex(KEY_ISMOISTUREON_FRUITS))));
                    td.setMoistureOnFruitsRemarks(c.getString((c.getColumnIndex(KEY_MOISTUREONFRUITS_REMARKS))));
                    td.setIsPostharvestTreatment(c.getString((c.getColumnIndex(KEY_ISPOSTHARVESTTREATMENT))));
                    td.setPostHarvestTreatmentRemarks(c.getString((c.getColumnIndex(KEY_POSTHARVESTTREATMENTREMARKS))));
                    td.setComments(c.getString((c.getColumnIndex(KEY_AVACADO_COMMENTS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    AvocadoQualityInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + AvocadoQualityInspectionList.size());
        return AvocadoQualityInspectionList;
    }

    public void deleteAvocadoQualityInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    public long UpdateHCDAvocadoQualityInspectionOilContent(String parentID, String source, String destination, String sampleVariety, String sampleFruitSize,
                                                            String initialWT, String finalWt, String moistureContentIWFW, String moistureContentPercetage,
                                                            String oilContent, String remarks) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();


        values.put(KEY_INSPECTION_DONE, "Y");
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID, parentID);
        values.put(KEY_SOURCE, source);
        values.put(KEY_DESTINATION, destination);
        values.put(KEY_SAMPLEVARIETY, sampleVariety);
        values.put(KEY_SAMPLEFRUITSIZE, sampleFruitSize);
        values.put(KEY_INITIALWT, initialWT);
        values.put(KEY_FINALWT, finalWt);
        values.put(KEY_MOISTURECONTENTIWFW, moistureContentIWFW);
        values.put(KEY_MOISTURECONTENTPERCETAGE, moistureContentPercetage);
        values.put(KEY_OILCONTENT, oilContent);
        values.put(KEY_REMARKS, remarks);

        long localavacadoID = db.insertWithOnConflict(TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("localavacadoID" + localavacadoID);
        closeDB();

        return localavacadoID;
    }

    public void updateHCDAvocadoQualityInspectionOilContentSent(String localID) {

        db = dbHelper.getReadableDatabase();
        String updateQuery = "update " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT + " set " + KEY_UPLOADED + " = 'SENT' where " + KEY_ID + " =" + localID;

        db.execSQL(updateQuery);

        closeDB();
    }


    public List<AvocadoQualityInspectionOilContent> getAvocadoQualityInspectionOilContentDone() {

        List<AvocadoQualityInspectionOilContent> AvocadoQualityInspectionOilContentList = new ArrayList<AvocadoQualityInspectionOilContent>();
        AvocadoQualityInspectionOilContent td = new AvocadoQualityInspectionOilContent();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION_OIL_CONTENT + " where " + KEY_INSPECTION_DONE + " =" + "'Y'" +
                " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new AvocadoQualityInspectionOilContent();
                    td.setLocalID(c.getString(c.getColumnIndex(KEY_ID)));
                    td.setAFA_HCD_Avocado_Quality_Inspection_ID(c.getString(c.getColumnIndex(KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID)));
                    td.setSource(c.getString(c.getColumnIndex(KEY_SOURCE)));
                    td.setDestination(c.getString(c.getColumnIndex(KEY_DESTINATION)));
                    td.setSampleVariety(c.getString(c.getColumnIndex(KEY_SAMPLEVARIETY)));
                    td.setSampleFruitSize(c.getString(c.getColumnIndex(KEY_SAMPLEFRUITSIZE)));
                    td.setInitialWT(c.getString(c.getColumnIndex(KEY_INITIALWT)));
                    td.setFinalWt(c.getString(c.getColumnIndex(KEY_FINALWT)));
                    td.setMoistureContentIWFW(c.getString(c.getColumnIndex(KEY_MOISTURECONTENTIWFW)));
                    td.setMoistureContentPercetage(c.getString(c.getColumnIndex(KEY_MOISTURECONTENTPERCETAGE)));
                    td.setOilContent(c.getString(c.getColumnIndex(KEY_OILCONTENT)));
                    td.setRemarks(c.getString(c.getColumnIndex(KEY_REMARKS)));

                    AvocadoQualityInspectionOilContentList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + AvocadoQualityInspectionOilContentList.size());
        return AvocadoQualityInspectionOilContentList;
    }

    public String getAvocadoQualityInspectionCBPartnerID(String parentID) {

        String cbPartnerID = "";

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION + " WHERE " + KEY_HCD_AVOCADO_QUALITY_INSPECTION_ID + " =" + parentID;

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    cbPartnerID = c.getString(c.getColumnIndex(KEY_NAMEOFAPPLICANT));

                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + cbPartnerID);
        return cbPartnerID;
    }

    public void deleteSingleAvocadoQualityInspectionList(String localID) {

        String deleteQuery = "DELETE FROM " + TABLE_HCD_AVOCADO_QUALITY_INSPECTION + " WHERE " + KEY_ID + " = " + Integer.parseInt(localID);

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }
    /*end of TABLE_HCD_AVOCADO_QUALITY_INSPECTION */


    /*TABLE_HCD_PERSONAL_HYGIENE_INSPECTION*/
    public static final String TABLE_HCD_PERSONAL_HYGIENE = "personal_hygiene_inspection";
    public static final String TABLE_HCD_PERSONAL_HYGIENE_DETAILS = "personal_hygiene_details";
    private static final String KEY_HCD_PERSONAL_HYGIENE_ID = "hcd_Personal_hygiene_id";
    private static final String KEY_SSNAMEOFAPPLICANT = "ssnameofapplicant";
    private static final String KEY_NAMES = "names";
    private static final String KEY_NATIONALID = "national_id";
    private static final String KEY_MEDICALCERTNO = "medical_cert";
    private static final String KEY_ISDUSTCOTS = "isdustcots";
    private static final String KEY_ISHGEARCAPS = "ishgearcaps";
    private static final String KEY_ISJEWELS = "isjewels";
    private static final String KEY_ISNAILSCUT = "isnailscut";
    private static final String KEY_ISBODYCLEAN = "isbodyclean";
    private static final String KEY_ISSHOES = "isshoes";

    public static final String CREATE_TABLE_HCD_PERSONAL_HYGIENE = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HCD_PERSONAL_HYGIENE + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HCD_PERSONAL_HYGIENE_ID + " TEXT,"
            + KEY_SSNAMEOFAPPLICANT + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public static final String CREATE_TABLE_HCD_PERSONAL_HYGIENE_DETAILS = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_HCD_PERSONAL_HYGIENE_DETAILS + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_HCD_PERSONAL_HYGIENE_ID + " TEXT,"
            + KEY_NAMES + " TEXT,"
            + KEY_NATIONALID + " TEXT,"
            + KEY_MEDICALCERTNO + " TEXT,"
            + KEY_ISDUSTCOTS + " TEXT,"
            + KEY_ISHGEARCAPS + " TEXT,"
            + KEY_ISJEWELS + " TEXT,"
            + KEY_ISNAILSCUT + " TEXT,"
            + KEY_ISBODYCLEAN + " TEXT,"
            + KEY_ISSHOES + " TEXT,"
            + KEY_SERVER_ID + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertHCDpersanlHygiene(HCDPersonalHygene persanlHygiene) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_SSNAMEOFAPPLICANT, persanlHygiene.getSsnameOfApplicant());
        values.put(KEY_UPLOADED, "PENDING");
        // insert row
        long avocadoQualityInspectionID = db.insertWithOnConflict(TABLE_HCD_PERSONAL_HYGIENE, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("avocadoQualityInspectionID: " + avocadoQualityInspectionID);

        closeDB();
        return avocadoQualityInspectionID;
    }

    public long UpdatePersonalHygienDetails(HCDPersonalHygene hCDPersonalHygene) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        long result = 0;
        try {

            values.put(KEY_UPLOADED, "PENDING");
            values.put(KEY_NAMES, hCDPersonalHygene.getNames());
            values.put(KEY_NATIONALID, hCDPersonalHygene.getNationalId());
            values.put(KEY_MEDICALCERTNO, hCDPersonalHygene.getMedicalCertNo());
            values.put(KEY_ISDUSTCOTS, hCDPersonalHygene.getIsdustCots());
            values.put(KEY_ISHGEARCAPS, hCDPersonalHygene.getHgearCaps());
            values.put(KEY_ISJEWELS, hCDPersonalHygene.getIsjewels());
            values.put(KEY_ISNAILSCUT, hCDPersonalHygene.getIsnailsCut());
            values.put(KEY_ISBODYCLEAN, hCDPersonalHygene.getIsbodyClean());
            values.put(KEY_ISSHOES, hCDPersonalHygene.getIsshoes());

            result = db.insertWithOnConflict(TABLE_HCD_PERSONAL_HYGIENE_DETAILS, null, values, SQLiteDatabase.CONFLICT_REPLACE);

            System.out.println("results is " + result);


        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public List<HCDPersonalHygene> getPersonalHygiene() {

        List<HCDPersonalHygene> PersonalHygienDetailsList = new ArrayList<HCDPersonalHygene>();
        HCDPersonalHygene td = new HCDPersonalHygene();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_PERSONAL_HYGIENE + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HCDPersonalHygene();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HCD_Persanl_Hygiene_ID(c.getString((c.getColumnIndex(KEY_HCD_PERSONAL_HYGIENE_ID))));
                    td.setSsnameOfApplicant(c.getString((c.getColumnIndex(KEY_SSNAMEOFAPPLICANT))));

                    PersonalHygienDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + PersonalHygienDetailsList.size());
        return PersonalHygienDetailsList;
    }

    public List<HCDPersonalHygene> getPersonalHygienDetails() {

        List<HCDPersonalHygene> PersonalHygienDetailsList = new ArrayList<HCDPersonalHygene>();
        HCDPersonalHygene td = new HCDPersonalHygene();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_PERSONAL_HYGIENE_DETAILS + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new HCDPersonalHygene();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_HCD_Persanl_Hygiene_ID(c.getString((c.getColumnIndex(KEY_HCD_PERSONAL_HYGIENE_ID))));
                    td.setNames(c.getString((c.getColumnIndex(KEY_NAMES))));
                    td.setNationalId(c.getString((c.getColumnIndex(KEY_NATIONALID))));
                    td.setMedicalCertNo(c.getString((c.getColumnIndex(KEY_MEDICALCERTNO))));
                    td.setIsdustCots(c.getString((c.getColumnIndex(KEY_ISDUSTCOTS))));
                    td.setHgearCaps(c.getString((c.getColumnIndex(KEY_ISHGEARCAPS))));
                    td.setIsjewels(c.getString((c.getColumnIndex(KEY_ISJEWELS))));
                    td.setIsnailsCut(c.getString((c.getColumnIndex(KEY_ISNAILSCUT))));
                    td.setIsbodyClean(c.getString((c.getColumnIndex(KEY_ISBODYCLEAN))));
                    td.setIsshoes(c.getString((c.getColumnIndex(KEY_ISSHOES))));

                    PersonalHygienDetailsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + PersonalHygienDetailsList.size());
        return PersonalHygienDetailsList;
    }

    public HCDPersonalHygene getSentPersonalHygieneID(String shopID) {

        String selectQuery = "SELECT  * FROM " + TABLE_HCD_PERSONAL_HYGIENE + " WHERE " + KEY_ID + " = " + shopID;


        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        HCDPersonalHygene td = new HCDPersonalHygene();
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {

                td.setSsnameOfApplicant(c.getString((c.getColumnIndex(KEY_SSNAMEOFAPPLICANT))));
                td.setServerID(c.getString(c.getColumnIndex(KEY_SERVER_ID)));

                // adding to itinerary list

            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }



    /*TABLE_FCD_SISAL_FACTORY_INSPECTION*/

    public static final String TABLE_FCD_SISAL_FACTORY_INSPECTION = "sisal_factory_inspection";
    private static final String KEY_FCD_SISAL_FACTORY_INSPECTION_ID = "sisal_Factory_Inspection_id";
    private static final String KEY_SS_NAMEOFAPPLICANT = "ssnameofapplicant";
    private static final String KEY_DOCUMENT_NUM = "doc_number";
    private static final String KEY_DOCUMENT_DAT = "doc_date";
    private static final String KEY_NAME_OFAPPLICANT = "nameofapplicant";
    private static final String KEY_SISALSPINNINGEXPORTNUMBER = "sisalspinningexportnumber";
    private static final String KEY_ISVALIDTRADINGLICENCE = "isvalidtradinglicence";
    private static final String KEY_VALIDTRADINGLICENCEREMARKS = "validtradinglicenceremarks";
    private static final String KEY_ISVALIDNEMACERIFICAION = "isvalidnemacerificaion";
    private static final String KEY_VALIDNEMACERIFICAIONREMARKS = "validnemacerificaionremarks";
    private static final String KEY_ISFIRERISKASSESSMENT = "isfireriskassessment";
    private static final String KEY_FIRERISKASSESSMENTREMARKS = "fireriskassessmentremarks";
    private static final String KEY_ISOCCUPATIONALHEALTHREPORT = "isoccupationalhealthreport";
    private static final String KEY_OCCUPATIONALHEALTHREPORTREMARKS = "occupationalhealthreportremarks";
    private static final String KEY_ISFIREMARSHALLS = "isfiremarshallsremarks";
    private static final String KEY_FIREMARSHALLSREMARKS = "firemarshallsremarks";
    private static final String KEY_ISACCESSIBLEFIREEMERGENCYEXITS = "isaccessiblefireemergencyexitsremarks";
    private static final String KEY_ACCESSIBLEFIREEMERGENCYEXITSREMARKS = "accessiblefireemergencyexitsremarks";
    private static final String KEY_ISFIRSTAIDKIT = "isfirstaidkitremarks";
    private static final String KEY_FIRSTAIDKITREMARKS = "firstaidkitremarks";
    private static final String KEY_ISAPPROPRIATEPROTECTIVECLOTHING = "isappropriateprotectiveclothing";
    private static final String KEY_APPROPRIATEPROTECTIVECLOTHING = "appropriateprotectiveclothing";
    private static final String KEY_ISPROTECTEDMOVINGPARTS = "is_protected_moving_parts_remarks";
    private static final String KEY_PROTECTEDMOVINGPARTS = "protected_moving_parts_remarks";
    private static final String KEY_ISGENERALCONDITION = "is_general_condition_remarks";
    private static final String KEY_GENERALCONDITIONREMARKS = "general_condition_remarks";
    private static final String KEY_ISSTORAGECONDITION = "is_storage_condition";
    private static final String KEY_STORAGECONDITIONREMARKS = "storage_condition_remarks";
    private static final String KEY_ISPROOFOFSUBMISSION = "is_proof_of_submission";
    private static final String KEY_PROOFOFSUBMISSION = "proof_of_submission";
    private static final String KEY_ISCERTIFICATIONBYAFA = "is_Certification_by_AFA";
    private static final String KEY_CERTIFICATIONBYAFAREMARKS = "certifification_by_AFA_remarks";
    private static final String KEY_ISFIREENGINES = "isfireengines";
    private static final String KEY_ISWATER = "iswater";
    private static final String KEY_ISCARBONDIOXIDE = "iscarbondiaoxide";
    private static final String KEY_ISSAND = "issand";
    private static final String KEY_ISFOAM = "isfoam";
    private static final String KEY_ISHYDRANTSYSTEM = "ishydrantsystem";
    private static final String KEY_IS_DRY_POWDER = "is_dry_powder";
    private static final String KEY_ETFIREFIGHTINGREMARKS = "etfirefightingremarks";


    public static final String CREATE_TABLE_FCD_SISAL_FACTORY_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FCD_SISAL_FACTORY_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FCD_SISAL_FACTORY_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUM + " TEXT,"
            + KEY_DOCUMENT_DAT + " TEXT,"
            + KEY_NAME_OFAPPLICANT + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_SISALSPINNINGEXPORTNUMBER + " TEXT,"
            + KEY_ISVALIDTRADINGLICENCE + " TEXT,"
            + KEY_VALIDTRADINGLICENCEREMARKS + " TEXT,"
            + KEY_ISVALIDNEMACERIFICAION + " TEXT,"
            + KEY_VALIDNEMACERIFICAIONREMARKS + " TEXT,"
            + KEY_ISFIRERISKASSESSMENT + " TEXT,"
            + KEY_FIRERISKASSESSMENTREMARKS + " TEXT,"
            + KEY_ISOCCUPATIONALHEALTHREPORT + " TEXT,"
            + KEY_OCCUPATIONALHEALTHREPORTREMARKS + " TEXT,"
            + KEY_ISFIREMARSHALLS + " TEXT,"
            + KEY_FIREMARSHALLSREMARKS + " TEXT,"
            + KEY_ISACCESSIBLEFIREEMERGENCYEXITS + " TEXT,"
            + KEY_ACCESSIBLEFIREEMERGENCYEXITSREMARKS + " TEXT,"
            + KEY_ISFIRSTAIDKIT + " TEXT,"
            + KEY_FIRSTAIDKITREMARKS + " TEXT,"
            + KEY_ISAPPROPRIATEPROTECTIVECLOTHING + " TEXT,"
            + KEY_APPROPRIATEPROTECTIVECLOTHING + " TEXT,"
            + KEY_ISPROTECTEDMOVINGPARTS + " TEXT,"
            + KEY_PROTECTEDMOVINGPARTS + " TEXT,"
            + KEY_ISGENERALCONDITION + " TEXT,"
            + KEY_GENERALCONDITIONREMARKS + " TEXT,"
            + KEY_ISSTORAGECONDITION + " TEXT,"
            + KEY_STORAGECONDITIONREMARKS + " TEXT,"
            + KEY_ISPROOFOFSUBMISSION + " TEXT,"
            + KEY_PROOFOFSUBMISSION + " TEXT,"
            + KEY_ISCERTIFICATIONBYAFA + " TEXT,"
            + KEY_CERTIFICATIONBYAFAREMARKS + " TEXT,"
            + KEY_ISFIREENGINES + " TEXT,"
            + KEY_ISWATER + " TEXT,"
            + KEY_ISCARBONDIOXIDE + " TEXT,"
            + KEY_ISSAND + " TEXT,"
            + KEY_ISFOAM + " TEXT,"
            + KEY_ISHYDRANTSYSTEM + " TEXT,"
            + KEY_IS_DRY_POWDER + " TEXT,"
            + KEY_ETFIREFIGHTINGREMARKS + " TEXT,"
            + KEY_COMMENTS + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertFCDSisalFactoryInspection(SisalFactoryInspection sisalFactoryInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_ID, sisalFactoryInspection.getLocalID());
        values.put(KEY_FCD_SISAL_FACTORY_INSPECTION_ID, sisalFactoryInspection.getAFA_Sisal_Factory_Inspection_ID());
        values.put(KEY_DOCUMENT_NUM, sisalFactoryInspection.getDocumentNumber());
        values.put(KEY_DOCUMENT_DAT, sisalFactoryInspection.getDocumentDate());
        values.put(KEY_NAME_OFAPPLICANT, sisalFactoryInspection.getNameOfApplicant());
        values.put(KEY_SISALSPINNINGEXPORTNUMBER, sisalFactoryInspection.getSisalSpinningExportNumber());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");


        // insert row
        if (!isFCDSisalFactoryInspectionStored(sisalFactoryInspection.getAFA_Sisal_Factory_Inspection_ID())) {
            long sisalFactoryInspectionID = db.insertWithOnConflict(TABLE_FCD_SISAL_FACTORY_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("sisalFactoryInspectionID: " + sisalFactoryInspectionID);

            closeDB();
            return sisalFactoryInspectionID;
        } else {
            long sisalFactoryInspectionID = -1;
            System.out.println("sisalFactoryInspectionID: " + sisalFactoryInspectionID);

            closeDB();
            return sisalFactoryInspectionID;
        }

    }

    public boolean isFCDSisalFactoryInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FCD_SISAL_FACTORY_INSPECTION + " WHERE " + KEY_FCD_SISAL_FACTORY_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean isFCDSisalSpinningFactoryInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION + " WHERE " + KEY_FCD_SISAL_SPINNING_FACTORY_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateFCDSisalFactoryInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FCD_SISAL_FACTORY_INSPECTION, values, KEY_ID + " =" + localID, null);

            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public boolean updateFCDSisalSpinningFactoryInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION, values, KEY_ID + " =" + localID, null);

            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }


    public long UpdateSisalFactoryInspection(FCDSisalFactoryInspection fCDSisalFactoryInspection) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_ISVALIDTRADINGLICENCE, fCDSisalFactoryInspection.getIsValidTradinglicence());
            values.put(KEY_VALIDTRADINGLICENCEREMARKS, fCDSisalFactoryInspection.getValidTradinglicenceRemarks());
            values.put(KEY_ISVALIDNEMACERIFICAION, fCDSisalFactoryInspection.getIsValidNeMACerificaion());
            values.put(KEY_VALIDNEMACERIFICAIONREMARKS, fCDSisalFactoryInspection.getValidNeMACerificaionRemarks());
            values.put(KEY_ISFIRERISKASSESSMENT, fCDSisalFactoryInspection.getIsFireriskAssessment());
            values.put(KEY_FIRERISKASSESSMENTREMARKS, fCDSisalFactoryInspection.getFireriskAssessmentRemarks());
            values.put(KEY_ISOCCUPATIONALHEALTHREPORT, fCDSisalFactoryInspection.getIsOccupationalhealthReport());
            values.put(KEY_OCCUPATIONALHEALTHREPORTREMARKS, fCDSisalFactoryInspection.getOccupationalhealthReportRemarks());
            values.put(KEY_ISFIREMARSHALLS, fCDSisalFactoryInspection.getIsFiremarshalls());
            values.put(KEY_FIREMARSHALLSREMARKS, fCDSisalFactoryInspection.getFiremarshallsRemarks());
            values.put(KEY_ISACCESSIBLEFIREEMERGENCYEXITS, fCDSisalFactoryInspection.getIsAccessiblefireemergencyexits());
            values.put(KEY_ACCESSIBLEFIREEMERGENCYEXITSREMARKS, fCDSisalFactoryInspection.getAccessibleFireemergencyexitsRemarks());
            values.put(KEY_ISFIRSTAIDKIT, fCDSisalFactoryInspection.getIsFirstAidkit());
            values.put(KEY_FIRSTAIDKITREMARKS, fCDSisalFactoryInspection.getFirstAidkitRemarks());
            values.put(KEY_ISAPPROPRIATEPROTECTIVECLOTHING, fCDSisalFactoryInspection.getIsAppropriateprotectiveclothing());
            values.put(KEY_APPROPRIATEPROTECTIVECLOTHING, fCDSisalFactoryInspection.getAppropriateprotectiveclothing());
            values.put(KEY_ISPROTECTEDMOVINGPARTS, fCDSisalFactoryInspection.getIsProtectedmovingParts());
            values.put(KEY_PROTECTEDMOVINGPARTS, fCDSisalFactoryInspection.getProtectedmovingParts());
            values.put(KEY_ISGENERALCONDITION, fCDSisalFactoryInspection.getIsGeneralcondition());
            values.put(KEY_GENERALCONDITIONREMARKS, fCDSisalFactoryInspection.getGeneralconditionRemarks());
            values.put(KEY_ISSTORAGECONDITION, fCDSisalFactoryInspection.getIsStoragecondition());
            values.put(KEY_STORAGECONDITIONREMARKS, fCDSisalFactoryInspection.getStorageconditionRemarks());
            values.put(KEY_ISPROOFOFSUBMISSION, fCDSisalFactoryInspection.getIsProofofSubmission());
            values.put(KEY_PROOFOFSUBMISSION, fCDSisalFactoryInspection.getProofofSubmission());
            values.put(KEY_ISCERTIFICATIONBYAFA, fCDSisalFactoryInspection.getIsCertificationbyAFA());
            values.put(KEY_CERTIFICATIONBYAFAREMARKS, fCDSisalFactoryInspection.getCertificationbyAFARemarks());
            values.put(KEY_ISFIREENGINES, fCDSisalFactoryInspection.getIsFireengines());
            values.put(KEY_ISWATER, fCDSisalFactoryInspection.getIswater());
            values.put(KEY_ISCARBONDIOXIDE, fCDSisalFactoryInspection.getIsCarbondioxide());
            values.put(KEY_ISSAND, fCDSisalFactoryInspection.getIssand());
            values.put(KEY_ISFOAM, fCDSisalFactoryInspection.getIsfoam());
            values.put(KEY_ISHYDRANTSYSTEM, fCDSisalFactoryInspection.getIsHydrantsystem());
            values.put(KEY_IS_DRY_POWDER, fCDSisalFactoryInspection.getIsDrypowder());
            values.put(KEY_ETFIREFIGHTINGREMARKS, fCDSisalFactoryInspection.getEtFirefightingRemarks());
            values.put(KEY_COMMENTS, fCDSisalFactoryInspection.getComments());
            values.put(KEY_OFFICER_RECOMMENDATION, fCDSisalFactoryInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, fCDSisalFactoryInspection.getOfficerrecommendation_remark());


            result = db.update(TABLE_FCD_SISAL_FACTORY_INSPECTION, values, "id =" + Integer.parseInt(fCDSisalFactoryInspection.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<SisalFactoryInspection> getSisalFactoryInspectionList() {

        List<SisalFactoryInspection> SisalFactoryInspectionlist = new ArrayList<SisalFactoryInspection>();
        SisalFactoryInspection td = new SisalFactoryInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_SISAL_FACTORY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Sisal Factory Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new SisalFactoryInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Sisal_Factory_Inspection_ID(c.getString((c.getColumnIndex(KEY_FCD_SISAL_FACTORY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUM))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DAT))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setSisalSpinningExportNumber(c.getString((c.getColumnIndex(KEY_SISALSPINNINGEXPORTNUMBER))));

                    // adding to itinerary list
                    SisalFactoryInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + SisalFactoryInspectionlist.size());
        return SisalFactoryInspectionlist;
    }


    public List<SisalFactoryInspection> getSisalFactoryInspectionDone() {

        List<SisalFactoryInspection> SisalFactoryInspectionList = new ArrayList<SisalFactoryInspection>();
        SisalFactoryInspection td = new SisalFactoryInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_SISAL_FACTORY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new SisalFactoryInspection();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Sisal_Factory_Inspection_ID(c.getString((c.getColumnIndex(KEY_FCD_SISAL_FACTORY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUM))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DAT))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setSisalSpinningExportNumber(c.getString((c.getColumnIndex(KEY_SISALSPINNINGEXPORTNUMBER))));
                    td.setIsValidTradinglicence(c.getString((c.getColumnIndex(KEY_ISVALIDTRADINGLICENCE))));
                    td.setValidTradinglicenceRemarks(c.getString((c.getColumnIndex(KEY_VALIDTRADINGLICENCEREMARKS))));
                    td.setIsValidNeMACerificaion(c.getString((c.getColumnIndex(KEY_ISVALIDNEMACERIFICAION))));
                    td.setValidNeMACerificaionRemarks(c.getString((c.getColumnIndex(KEY_VALIDNEMACERIFICAIONREMARKS))));
                    td.setIsFireriskAssessment(c.getString((c.getColumnIndex(KEY_ISFIRERISKASSESSMENT))));
                    td.setFireriskAssessmentRemarks(c.getString((c.getColumnIndex(KEY_FIRERISKASSESSMENTREMARKS))));
                    td.setIsOccupationalhealthReport(c.getString((c.getColumnIndex(KEY_ISOCCUPATIONALHEALTHREPORT))));
                    td.setOccupationalhealthReportRemarks(c.getString((c.getColumnIndex(KEY_OCCUPATIONALHEALTHREPORTREMARKS))));
                    td.setIsFiremarshalls(c.getString((c.getColumnIndex(KEY_ISFIREMARSHALLS))));
                    td.setFiremarshallsRemarks(c.getString((c.getColumnIndex(KEY_FIREMARSHALLSREMARKS))));
                    td.setIsAccessiblefireemergencyexits(c.getString((c.getColumnIndex(KEY_ISACCESSIBLEFIREEMERGENCYEXITS))));
                    td.setAccessibleFireemergencyexitsRemarks(c.getString((c.getColumnIndex(KEY_ACCESSIBLEFIREEMERGENCYEXITSREMARKS))));
                    td.setIsFirstAidkit(c.getString((c.getColumnIndex(KEY_ISFIRSTAIDKIT))));
                    td.setFirstAidkitRemarks(c.getString((c.getColumnIndex(KEY_FIRSTAIDKITREMARKS))));
                    td.setIsAppropriateprotectiveclothing(c.getString((c.getColumnIndex(KEY_ISAPPROPRIATEPROTECTIVECLOTHING))));
                    td.setAppropriateprotectiveclothing(c.getString((c.getColumnIndex(KEY_APPROPRIATEPROTECTIVECLOTHING))));
                    td.setIsProtectedmovingParts(c.getString((c.getColumnIndex(KEY_ISPROTECTEDMOVINGPARTS))));
                    td.setProtectedmovingParts(c.getString((c.getColumnIndex(KEY_PROTECTEDMOVINGPARTS))));
                    td.setIsGeneralcondition(c.getString((c.getColumnIndex(KEY_ISGENERALCONDITION))));
                    td.setGeneralconditionRemarks(c.getString((c.getColumnIndex(KEY_GENERALCONDITIONREMARKS))));
                    td.setIsStoragecondition(c.getString((c.getColumnIndex(KEY_ISSTORAGECONDITION))));
                    td.setStorageconditionRemarks(c.getString((c.getColumnIndex(KEY_STORAGECONDITIONREMARKS))));
                    td.setIsProofofSubmission(c.getString((c.getColumnIndex(KEY_ISPROOFOFSUBMISSION))));
                    td.setProofofSubmission(c.getString((c.getColumnIndex(KEY_PROOFOFSUBMISSION))));
                    td.setIsCertificationbyAFA(c.getString((c.getColumnIndex(KEY_ISCERTIFICATIONBYAFA))));
                    td.setCertificationbyAFARemarks(c.getString((c.getColumnIndex(KEY_CERTIFICATIONBYAFAREMARKS))));
                    td.setIsFireengines(c.getString((c.getColumnIndex(KEY_ISFIREENGINES))));
                    td.setIsCarbondioxide(c.getString((c.getColumnIndex(KEY_ISCARBONDIOXIDE))));
                    td.setIssand(c.getString((c.getColumnIndex(KEY_ISSAND))));
                    td.setIswater(c.getString((c.getColumnIndex(KEY_ISWATER))));
                    td.setIsfoam(c.getString((c.getColumnIndex(KEY_ISFOAM))));
                    td.setIsHydrantsystem(c.getString((c.getColumnIndex(KEY_ISHYDRANTSYSTEM))));
                    td.setIsDrypowder(c.getString((c.getColumnIndex(KEY_IS_DRY_POWDER))));
                    td.setEtFirefightingRemarks(c.getString((c.getColumnIndex(KEY_ETFIREFIGHTINGREMARKS))));
                    td.setComments(c.getString((c.getColumnIndex(KEY_COMMENTS))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    SisalFactoryInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + SisalFactoryInspectionList.size());
        return SisalFactoryInspectionList;
    }

    public void deleteSisalFactoryInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_FCD_SISAL_FACTORY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    /*TABLE_FCD_SISAL_SPINNING_INSPECTION*/
    public static final String TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION = "sisal_Spinning_Factory_Inspection";
    private static final String KEY_FCD_SISAL_SPINNING_FACTORY_INSPECTION_ID = "Sisal_spinning_Factory_Inspection_id";
    private static final String KEY_SS_NAME_OF_APPLICAN = "ssnameofapplicant";
    private static final String KEY_DOCUMENT_NUMB = "doc_number";
    private static final String KEY_DOCUMENT_DTE= "doc_date";
    private static final String KEY_NAME_OF_APPLICAN = "nameofapplicant";
    private static final String KEY_SISALSPINNING_EXPORTNUMBER = "sisalspinningexportnumber";


    public static final String CREATE_TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FCD_SISAL_SPINNING_FACTORY_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_SS_NAME_OF_APPLICAN + " TEXT,"
            + KEY_DOCUMENT_NUMB + " TEXT,"
            + KEY_DOCUMENT_DTE + " TEXT,"
            + KEY_NAME_OF_APPLICAN + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_SISALSPINNING_EXPORTNUMBER + " TEXT,"
            + KEY_ISVALIDTRADINGLICENCE + " TEXT,"
            + KEY_VALIDTRADINGLICENCEREMARKS + " TEXT,"
            + KEY_ISVALIDNEMACERIFICAION + " TEXT,"
            + KEY_VALIDNEMACERIFICAIONREMARKS + " TEXT,"
            + KEY_ISFIRERISKASSESSMENT + " TEXT,"
            + KEY_FIRERISKASSESSMENTREMARKS + " TEXT,"
            + KEY_ISOCCUPATIONALHEALTHREPORT + " TEXT,"
            + KEY_OCCUPATIONALHEALTHREPORTREMARKS + " TEXT,"
            + KEY_ISFIREMARSHALLS + " TEXT,"
            + KEY_FIREMARSHALLSREMARKS + " TEXT,"
            + KEY_ISACCESSIBLEFIREEMERGENCYEXITS + " TEXT,"
            + KEY_ACCESSIBLEFIREEMERGENCYEXITSREMARKS + " TEXT,"
            + KEY_ISFIRSTAIDKIT + " TEXT,"
            + KEY_FIRSTAIDKITREMARKS + " TEXT,"
            + KEY_ISAPPROPRIATEPROTECTIVECLOTHING + " TEXT,"
            + KEY_APPROPRIATEPROTECTIVECLOTHING + " TEXT,"
            + KEY_ISPROTECTEDMOVINGPARTS + " TEXT,"
            + KEY_PROTECTEDMOVINGPARTS + " TEXT,"
            + KEY_ISGENERALCONDITION + " TEXT,"
            + KEY_GENERALCONDITIONREMARKS + " TEXT,"
            + KEY_ISSTORAGECONDITION + " TEXT,"
            + KEY_STORAGECONDITIONREMARKS + " TEXT,"
            + KEY_ISPROOFOFSUBMISSION + " TEXT,"
            + KEY_PROOFOFSUBMISSION + " TEXT,"
            + KEY_ISCERTIFICATIONBYAFA + " TEXT,"
            + KEY_CERTIFICATIONBYAFAREMARKS + " TEXT,"
            + KEY_ISFIREENGINES + " TEXT,"
            + KEY_ISWATER + " TEXT,"
            + KEY_ISCARBONDIOXIDE + " TEXT,"
            + KEY_ISSAND + " TEXT,"
            + KEY_ISFOAM + " TEXT,"
            + KEY_ISHYDRANTSYSTEM + " TEXT,"
            + KEY_IS_DRY_POWDER + " TEXT,"
            + KEY_ETFIREFIGHTINGREMARKS + " TEXT,"
            + KEY_COMMENTS + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertSisalSpinningFactoryInspection(SisalSpinningFactoryInspection sisalSpinningFactoryInspection) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_ID, sisalSpinningFactoryInspection.getLocalID());
        values.put(KEY_FCD_SISAL_SPINNING_FACTORY_INSPECTION_ID, sisalSpinningFactoryInspection.getAFA_Sisal_Spinning_Factory_Inspection_ID());
        values.put(KEY_DOCUMENT_NUMB, sisalSpinningFactoryInspection.getDocumentNumber());
        values.put(KEY_DOCUMENT_DTE, sisalSpinningFactoryInspection.getDocumentDate());
        values.put(KEY_NAME_OF_APPLICAN, sisalSpinningFactoryInspection.getNameOfApplicant());
        values.put(KEY_SISALSPINNINGEXPORTNUMBER, sisalSpinningFactoryInspection.getSisalSpinningExportNumber());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");


        // insert row

        long sisalSpinningFactoryInspectionID = db.insertWithOnConflict(TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("foodProcessingInpection: " + sisalSpinningFactoryInspectionID);

        closeDB();
        return sisalSpinningFactoryInspectionID;
        // insert row
        /*if (!isFCDSisalSpinningFactoryInspectionStored(sisalSpinningFactoryInspection.getAFA_Sisal_Spinning_Factory_Inspection_ID())) {
            long sisalSpinningFactoryInspectionID = db.insertWithOnConflict(TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("sisalSpinningFactoryInspectionID: " + sisalSpinningFactoryInspectionID);

            closeDB();
            return sisalSpinningFactoryInspectionID;
        } else {
            long sisalSpinningFactoryInspectionID = -1;
            System.out.println("sisalSpinningFactoryInspectionID: " + sisalSpinningFactoryInspectionID);

            closeDB();
            return sisalSpinningFactoryInspectionID;
        }*/
    }

    public long UpdateFCDSisalSpinningFactoryInspection(FCDSisalSpinningFactoryInspection fCDSisalSpinningFactoryInspection) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_ISVALIDTRADINGLICENCE, fCDSisalSpinningFactoryInspection.getIsValidTradinglicence());
            values.put(KEY_VALIDTRADINGLICENCEREMARKS, fCDSisalSpinningFactoryInspection.getValidTradinglicenceRemarks());
            values.put(KEY_ISVALIDNEMACERIFICAION, fCDSisalSpinningFactoryInspection.getIsValidNeMACerificaion());
            values.put(KEY_VALIDNEMACERIFICAIONREMARKS, fCDSisalSpinningFactoryInspection.getValidNeMACerificaionRemarks());
            values.put(KEY_ISFIRERISKASSESSMENT, fCDSisalSpinningFactoryInspection.getIsFireriskAssessment());
            values.put(KEY_FIRERISKASSESSMENTREMARKS, fCDSisalSpinningFactoryInspection.getFireriskAssessmentRemarks());
            values.put(KEY_ISOCCUPATIONALHEALTHREPORT, fCDSisalSpinningFactoryInspection.getIsOccupationalhealthReport());
            values.put(KEY_OCCUPATIONALHEALTHREPORTREMARKS, fCDSisalSpinningFactoryInspection.getOccupationalhealthReportRemarks());
            values.put(KEY_ISFIREMARSHALLS, fCDSisalSpinningFactoryInspection.getIsFiremarshalls());
            values.put(KEY_FIREMARSHALLSREMARKS, fCDSisalSpinningFactoryInspection.getFiremarshallsRemarks());
            values.put(KEY_ISACCESSIBLEFIREEMERGENCYEXITS, fCDSisalSpinningFactoryInspection.getIsAccessiblefireemergencyexits());
            values.put(KEY_ACCESSIBLEFIREEMERGENCYEXITSREMARKS, fCDSisalSpinningFactoryInspection.getAccessibleFireemergencyexitsRemarks());
            values.put(KEY_ISFIRSTAIDKIT, fCDSisalSpinningFactoryInspection.getIsFirstAidkit());
            values.put(KEY_FIRSTAIDKITREMARKS, fCDSisalSpinningFactoryInspection.getFirstAidkitRemarks());
            values.put(KEY_ISAPPROPRIATEPROTECTIVECLOTHING, fCDSisalSpinningFactoryInspection.getIsAppropriateprotectiveclothing());
            values.put(KEY_APPROPRIATEPROTECTIVECLOTHING, fCDSisalSpinningFactoryInspection.getAppropriateprotectiveclothing());
            values.put(KEY_ISPROTECTEDMOVINGPARTS, fCDSisalSpinningFactoryInspection.getIsProtectedmovingParts());
            values.put(KEY_PROTECTEDMOVINGPARTS, fCDSisalSpinningFactoryInspection.getProtectedmovingParts());
            values.put(KEY_ISGENERALCONDITION, fCDSisalSpinningFactoryInspection.getIsGeneralcondition());
            values.put(KEY_GENERALCONDITIONREMARKS, fCDSisalSpinningFactoryInspection.getGeneralconditionRemarks());
            values.put(KEY_ISSTORAGECONDITION, fCDSisalSpinningFactoryInspection.getIsStoragecondition());
            values.put(KEY_STORAGECONDITIONREMARKS, fCDSisalSpinningFactoryInspection.getStorageconditionRemarks());
            values.put(KEY_ISPROOFOFSUBMISSION, fCDSisalSpinningFactoryInspection.getIsProofofSubmission());
            values.put(KEY_PROOFOFSUBMISSION, fCDSisalSpinningFactoryInspection.getProofofSubmission());
            values.put(KEY_ISCERTIFICATIONBYAFA, fCDSisalSpinningFactoryInspection.getIsCertificationbyAFA());
            values.put(KEY_CERTIFICATIONBYAFAREMARKS, fCDSisalSpinningFactoryInspection.getCertificationbyAFARemarks());
            values.put(KEY_ISFIREENGINES, fCDSisalSpinningFactoryInspection.getIsFireengines());
            values.put(KEY_ISWATER, fCDSisalSpinningFactoryInspection.getIswater());
            values.put(KEY_ISCARBONDIOXIDE, fCDSisalSpinningFactoryInspection.getIsCarbondioxide());
            values.put(KEY_ISSAND, fCDSisalSpinningFactoryInspection.getIssand());
            values.put(KEY_ISFOAM, fCDSisalSpinningFactoryInspection.getIsfoam());
            values.put(KEY_ISHYDRANTSYSTEM, fCDSisalSpinningFactoryInspection.getIsHydrantsystem());
            values.put(KEY_IS_DRY_POWDER, fCDSisalSpinningFactoryInspection.getIsDrypowder());
            values.put(KEY_ETFIREFIGHTINGREMARKS, fCDSisalSpinningFactoryInspection.getEtFirefightingRemarks());
            values.put(KEY_COMMENTS, fCDSisalSpinningFactoryInspection.getComments());
            values.put(KEY_OFFICER_RECOMMENDATION, fCDSisalSpinningFactoryInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, fCDSisalSpinningFactoryInspection.getOfficerrecommendation_remark());


            result = db.update(TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION, values, "id =" + Integer.parseInt(fCDSisalSpinningFactoryInspection.getLocalID()), null);

            System.out.println("updateresults is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<SisalSpinningFactoryInspection> getSisalSpinningFactoryInspectionList() {

        List<SisalSpinningFactoryInspection> sisalSpinningFactoryInspectionlist = new ArrayList<SisalSpinningFactoryInspection>();
        SisalSpinningFactoryInspection td = new SisalSpinningFactoryInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Sisal Spinning Factory Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new SisalSpinningFactoryInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Sisal_Spinning_Factory_Inspection_ID(c.getString((c.getColumnIndex(KEY_FCD_SISAL_SPINNING_FACTORY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMB))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DTE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICAN))));
                    td.setSisalSpinningExportNumber(c.getString((c.getColumnIndex(KEY_SISALSPINNINGEXPORTNUMBER))));

                    // adding to itinerary list
                    sisalSpinningFactoryInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + sisalSpinningFactoryInspectionlist.size());
        return sisalSpinningFactoryInspectionlist;
    }


    public List<SisalSpinningFactoryInspection> getSisalSpinningFactoryInspectionDone() {

        List<SisalSpinningFactoryInspection> sisalSpinningFactoryInspectionList = new ArrayList<SisalSpinningFactoryInspection>();
        SisalSpinningFactoryInspection td = new SisalSpinningFactoryInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new SisalSpinningFactoryInspection();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Sisal_Spinning_Factory_Inspection_ID(c.getString((c.getColumnIndex(KEY_FCD_SISAL_SPINNING_FACTORY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUMB))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DTE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OF_APPLICAN))));
                    td.setSisalSpinningExportNumber(c.getString((c.getColumnIndex(KEY_SISALSPINNINGEXPORTNUMBER))));
                    td.setIsValidTradinglicence(c.getString((c.getColumnIndex(KEY_ISVALIDTRADINGLICENCE))));
                    td.setValidTradinglicenceRemarks(c.getString((c.getColumnIndex(KEY_VALIDTRADINGLICENCEREMARKS))));
                    td.setIsValidNeMACerificaion(c.getString((c.getColumnIndex(KEY_ISVALIDNEMACERIFICAION))));
                    td.setValidNeMACerificaionRemarks(c.getString((c.getColumnIndex(KEY_VALIDNEMACERIFICAIONREMARKS))));
                    td.setIsFireriskAssessment(c.getString((c.getColumnIndex(KEY_ISFIRERISKASSESSMENT))));
                    td.setFireriskAssessmentRemarks(c.getString((c.getColumnIndex(KEY_FIRERISKASSESSMENTREMARKS))));
                    td.setIsOccupationalhealthReport(c.getString((c.getColumnIndex(KEY_ISOCCUPATIONALHEALTHREPORT))));
                    td.setOccupationalhealthReportRemarks(c.getString((c.getColumnIndex(KEY_OCCUPATIONALHEALTHREPORTREMARKS))));
                    td.setIsFiremarshalls(c.getString((c.getColumnIndex(KEY_ISFIREMARSHALLS))));
                    td.setFiremarshallsRemarks(c.getString((c.getColumnIndex(KEY_FIREMARSHALLSREMARKS))));
                    td.setIsAccessiblefireemergencyexits(c.getString((c.getColumnIndex(KEY_ISACCESSIBLEFIREEMERGENCYEXITS))));
                    td.setAccessibleFireemergencyexitsRemarks(c.getString((c.getColumnIndex(KEY_ACCESSIBLEFIREEMERGENCYEXITSREMARKS))));
                    td.setIsFirstAidkit(c.getString((c.getColumnIndex(KEY_ISFIRSTAIDKIT))));
                    td.setFirstAidkitRemarks(c.getString((c.getColumnIndex(KEY_FIRSTAIDKITREMARKS))));
                    td.setIsAppropriateprotectiveclothing(c.getString((c.getColumnIndex(KEY_ISAPPROPRIATEPROTECTIVECLOTHING))));
                    td.setAppropriateprotectiveclothing(c.getString((c.getColumnIndex(KEY_APPROPRIATEPROTECTIVECLOTHING))));
                    td.setIsProtectedmovingParts(c.getString((c.getColumnIndex(KEY_ISPROTECTEDMOVINGPARTS))));
                    td.setProtectedmovingParts(c.getString((c.getColumnIndex(KEY_PROTECTEDMOVINGPARTS))));
                    td.setIsGeneralcondition(c.getString((c.getColumnIndex(KEY_ISGENERALCONDITION))));
                    td.setGeneralconditionRemarks(c.getString((c.getColumnIndex(KEY_GENERALCONDITIONREMARKS))));
                    td.setIsStoragecondition(c.getString((c.getColumnIndex(KEY_ISSTORAGECONDITION))));
                    td.setStorageconditionRemarks(c.getString((c.getColumnIndex(KEY_STORAGECONDITIONREMARKS))));
                    td.setIsProofofSubmission(c.getString((c.getColumnIndex(KEY_ISPROOFOFSUBMISSION))));
                    td.setProofofSubmission(c.getString((c.getColumnIndex(KEY_PROOFOFSUBMISSION))));
                    td.setIsCertificationbyAFA(c.getString((c.getColumnIndex(KEY_ISCERTIFICATIONBYAFA))));
                    td.setCertificationbyAFARemarks(c.getString((c.getColumnIndex(KEY_CERTIFICATIONBYAFAREMARKS))));
                    td.setIsFireengines(c.getString((c.getColumnIndex(KEY_ISFIREENGINES))));
                    td.setIsFireengines(c.getString((c.getColumnIndex(KEY_ISWATER))));
                    td.setIsCarbondioxide(c.getString((c.getColumnIndex(KEY_ISCARBONDIOXIDE))));
                    td.setIssand(c.getString((c.getColumnIndex(KEY_ISSAND))));
                    td.setIsfoam(c.getString((c.getColumnIndex(KEY_ISFOAM))));
                    td.setIsHydrantsystem(c.getString((c.getColumnIndex(KEY_ISHYDRANTSYSTEM))));
                    td.setIsDrypowder(c.getString((c.getColumnIndex(KEY_IS_DRY_POWDER))));
                    td.setEtFirefightingRemarks(c.getString((c.getColumnIndex(KEY_ETFIREFIGHTINGREMARKS))));
                    td.setComments(c.getString((c.getColumnIndex(KEY_COMMENTS))));
                    td.setOfficerrecommendation(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION))));
                    td.setOfficerrecommendation_remark(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS))));

                    sisalSpinningFactoryInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking Sisal Spinning data from the db" + sisalSpinningFactoryInspectionList.size());
        return sisalSpinningFactoryInspectionList;
    }

    public void deleteSisalSpinningFactoryInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_FCD_SISAL_SPINNING_FACTORY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    /*TABLE_FCD_COTTON_BUYING_STORE_INSPECTION*/
    public static final String TABLE_FCD_COTTON_BUYING_STORE_INSPECTION = "FCD_Cotton_Buying_Store_Inspection";
    private static final String KEY_FCD_COTTON_BUYING_STORE_INSPECTION_ID = "Sisal_cotton_buying_Inspection_id";
    private static final String KEY_NAMEOFOPERATOR = "nameofoperator";
    private static final String KEY_ISSURROUNDINGSOFBUYINGSANITARYCONDITION = "issurroundingsofbuyingsanitarycondition";
    private static final String KEY_SURROUNDINGSOFBUYINGSANITARYCONDITIONREMARKS = "surroundingsofbuyingsanitaryconditionremarks";
    private static final String KEY_ISFLOORWELLSURFACED = "isfloorwellsurfaced";
    private static final String KEY_FLOORWELLSURFACEDREMARKS = "floorwellsurfacedremarks";
    private static final String KEY_ISGRADEBOXAPPROVED = "isgradeboxapproved";
    private static final String KEY_GRADEBOXAPPROVEDREMARKS = "gradeboxapprovedremarks";
    private static final String KEY_ISCERTIFIEDWEIGHINGSCALE = "iscertifiedweighingscale";
    private static final String KEY_CERTIFIEDWEIGHINGSCALEREMARKS = "certifiedweighingscaleremarks";
    private static final String KEY_ISCOTTONBUYERCENTERQUALIFIED = "iscottonbuyercenterqualified";
    private static final String KEY_COTTONBUYERCENTERQUALIFIEDREMARKS = "cottonbuyercenterqualifiedremarks";
    private static final String KEY_ISFIREPRECAUIONARYMEASURE = "isfireprecauionarymeasure";
    private static final String KEY_FIREPRECAUIONARYMEASUREREMARKS = "fire_precauionary_measure_remarks";
    private static final String KEY_ISPROPERLYCLEAN = "is_proper_clean";
    private static final String KEY_PROPERLYCLEANREMARKS = "properly_clean_remarks";
    private static final String KEY_ISINTACT = "isintact";
    private static final String KEY_INTACTREMARKS = "intact_remarks";
    private static final String KEY_ISFUMIGATED = "is_fumigated";
    private static final String KEY_FUMIGATEDREMARKS = "fumigated_remarks";
    private static final String KEY_AR = "AR";
    private static final String KEY_BR = "BR";
    private static final String KEY_RECOMMENDAION = "recommendation";
    private static final String KEY_REASONFORTHEGIVERECCOMM = "reason_for_recommendation";


    public static final String CREATE_TABLE_FCD_COTTON_BUYING_STORE_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FCD_COTTON_BUYING_STORE_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FCD_COTTON_BUYING_STORE_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENT_NUM + " TEXT,"
            + KEY_DOCUMENT_DAT + " TEXT,"
            + KEY_NAME_OFAPPLICANT + " TEXT,"
            + KEY_SISALSPINNINGEXPORTNUMBER + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_NAMEOFOPERATOR + " TEXT,"
            + KEY_ISSURROUNDINGSOFBUYINGSANITARYCONDITION + " TEXT,"
            + KEY_SURROUNDINGSOFBUYINGSANITARYCONDITIONREMARKS + " TEXT,"
            + KEY_ISFLOORWELLSURFACED + " TEXT,"
            + KEY_FLOORWELLSURFACEDREMARKS + " TEXT,"
            + KEY_ISGRADEBOXAPPROVED + " TEXT,"
            + KEY_GRADEBOXAPPROVEDREMARKS + " TEXT,"
            + KEY_ISCERTIFIEDWEIGHINGSCALE + " TEXT,"
            + KEY_CERTIFIEDWEIGHINGSCALEREMARKS + " TEXT,"
            + KEY_ISCOTTONBUYERCENTERQUALIFIED + " TEXT,"
            + KEY_COTTONBUYERCENTERQUALIFIEDREMARKS + " TEXT,"
            + KEY_ISFIREPRECAUIONARYMEASURE + " TEXT,"
            + KEY_FIREPRECAUIONARYMEASUREREMARKS + " TEXT,"
            + KEY_ISPROPERLYCLEAN + " TEXT,"
            + KEY_PROPERLYCLEANREMARKS + " TEXT,"
            + KEY_ISINTACT + " TEXT,"
            + KEY_INTACTREMARKS + " TEXT,"
            + KEY_ISFUMIGATED + " TEXT,"
            + KEY_FUMIGATEDREMARKS + " TEXT,"
            + KEY_AR + " TEXT,"
            + KEY_BR + " TEXT,"
            + KEY_RECOMMENDAION + " TEXT,"
            + KEY_REASONFORTHEGIVERECCOMM + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertCottonBuyingStoreInspection(CottonBuyingStoreInspection cottonBuyingStoreInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_ID, cottonBuyingStoreInspection.getLocalID());
        values.put(KEY_FCD_COTTON_BUYING_STORE_INSPECTION_ID, cottonBuyingStoreInspection.getAFA_Cotton_Buying_Store_Inspection_ID());
        values.put(KEY_DOCUMENT_NUM, cottonBuyingStoreInspection.getDocumentNumber());
        values.put(KEY_DOCUMENT_DAT, cottonBuyingStoreInspection.getDocumentDate());
        values.put(KEY_NAME_OFAPPLICANT, cottonBuyingStoreInspection.getNameOfApplicant());
        values.put(KEY_SISALSPINNINGEXPORTNUMBER, cottonBuyingStoreInspection.getCottonExportNumber());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCottonBuyingStoreInspectionStored(cottonBuyingStoreInspection.getAFA_Cotton_Buying_Store_Inspection_ID())) {
            long cottonBuyingStoreInspectionID = db.insertWithOnConflict(TABLE_FCD_COTTON_BUYING_STORE_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("cottonBuyingStoreInspectionID: " + cottonBuyingStoreInspectionID);

            closeDB();
            return cottonBuyingStoreInspectionID;
        } else {
            long cottonBuyingStoreInspectionID = -1;
            System.out.println("cottonBuyingStoreInspectionID: " + cottonBuyingStoreInspectionID);

            closeDB();
            return cottonBuyingStoreInspectionID;
        }

    }

    public boolean isCottonBuyingStoreInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FCD_COTTON_BUYING_STORE_INSPECTION + " WHERE " + KEY_FCD_COTTON_BUYING_STORE_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCottonBuyingStoreInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FCD_COTTON_BUYING_STORE_INSPECTION, values, KEY_ID + " =" + localID, null);

            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long UpdateFCDCottonBuyingStoreInspection(FCDCottonBuyingStoreInspection fCDCottonBuyingStoreInspection) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_NAMEOFOPERATOR, fCDCottonBuyingStoreInspection.getNameOfOperator());
            values.put(KEY_ISSURROUNDINGSOFBUYINGSANITARYCONDITION, fCDCottonBuyingStoreInspection.getIsSurroundingsofBuyingSanitaryCondition());
            values.put(KEY_SURROUNDINGSOFBUYINGSANITARYCONDITIONREMARKS, fCDCottonBuyingStoreInspection.getSurroundingsofBuyingSanitaryConditionRemarks());
            values.put(KEY_ISFLOORWELLSURFACED, fCDCottonBuyingStoreInspection.getIsFloorWellsurfaced());
            values.put(KEY_FLOORWELLSURFACEDREMARKS, fCDCottonBuyingStoreInspection.getFloorWellsurfacedRemarks());
            values.put(KEY_ISGRADEBOXAPPROVED, fCDCottonBuyingStoreInspection.getIsGradeBoxapproved());
            values.put(KEY_GRADEBOXAPPROVEDREMARKS, fCDCottonBuyingStoreInspection.getGradeBoxapprovedRemarks());
            values.put(KEY_ISCERTIFIEDWEIGHINGSCALE, fCDCottonBuyingStoreInspection.getIsCertifiedWeighingscale());
            values.put(KEY_CERTIFIEDWEIGHINGSCALEREMARKS, fCDCottonBuyingStoreInspection.getCertifiedWeighingScaleRemarks());
            values.put(KEY_ISCOTTONBUYERCENTERQUALIFIED, fCDCottonBuyingStoreInspection.getIsCottonBuyercenterQualified());
            values.put(KEY_COTTONBUYERCENTERQUALIFIEDREMARKS, fCDCottonBuyingStoreInspection.getCottonBuyercenterQualifiedRemarks());
            values.put(KEY_ISFIREPRECAUIONARYMEASURE, fCDCottonBuyingStoreInspection.getIsFirePrecauionarymeasure());
            values.put(KEY_FIREPRECAUIONARYMEASUREREMARKS, fCDCottonBuyingStoreInspection.getFirePrecauionarymeasureRemarks());
            values.put(KEY_ISPROPERLYCLEAN, fCDCottonBuyingStoreInspection.getIsProperlyclean());
            values.put(KEY_PROPERLYCLEANREMARKS, fCDCottonBuyingStoreInspection.getProperlycleanRemarks());
            values.put(KEY_ISINTACT, fCDCottonBuyingStoreInspection.getIsintact());
            values.put(KEY_INTACTREMARKS, fCDCottonBuyingStoreInspection.getIntactRemarks());
            values.put(KEY_ISFUMIGATED, fCDCottonBuyingStoreInspection.getIsfumigated());
            values.put(KEY_FUMIGATEDREMARKS, fCDCottonBuyingStoreInspection.getFumigatedRemarks());
            values.put(KEY_AR, fCDCottonBuyingStoreInspection.getAr());
            values.put(KEY_BR, fCDCottonBuyingStoreInspection.getBr());
            values.put(KEY_RECOMMENDAION, fCDCottonBuyingStoreInspection.getRecommendaion());
            values.put(KEY_REASONFORTHEGIVERECCOMM, fCDCottonBuyingStoreInspection.getReasonForThegiveReccomm());

            result = db.update(TABLE_FCD_COTTON_BUYING_STORE_INSPECTION, values, "id =" + Integer.parseInt(fCDCottonBuyingStoreInspection.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<CottonBuyingStoreInspection> getCottonBuyingStoreInspectionList() {

        List<CottonBuyingStoreInspection> CottonBuyingStoreInspectionlist = new ArrayList<CottonBuyingStoreInspection>();
        CottonBuyingStoreInspection td = new CottonBuyingStoreInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_COTTON_BUYING_STORE_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Cotton Buying Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CottonBuyingStoreInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Cotton_Buying_Store_Inspection_ID(c.getString((c.getColumnIndex(KEY_FCD_COTTON_BUYING_STORE_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUM))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DAT))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setCottonExportNumber(c.getString((c.getColumnIndex(KEY_SISALSPINNINGEXPORTNUMBER))));

                    // adding to itinerary list
                    CottonBuyingStoreInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + CottonBuyingStoreInspectionlist.size());
        return CottonBuyingStoreInspectionlist;
    }


    public List<CottonBuyingStoreInspection> getCottonBuyingStoreInspectionDone() {

        List<CottonBuyingStoreInspection> CottonBuyingStoreInspectionList = new ArrayList<CottonBuyingStoreInspection>();
        CottonBuyingStoreInspection td = new CottonBuyingStoreInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_COTTON_BUYING_STORE_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CottonBuyingStoreInspection();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Cotton_Buying_Store_Inspection_ID(c.getString((c.getColumnIndex(KEY_FCD_COTTON_BUYING_STORE_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENT_NUM))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENT_DAT))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setNameOfOperator(c.getString((c.getColumnIndex(KEY_NAMEOFOPERATOR))));
                    td.setCottonExportNumber(c.getString((c.getColumnIndex(KEY_SISALSPINNINGEXPORTNUMBER))));
                    td.setIsSurroundingsofBuyingSanitaryCondition(c.getString((c.getColumnIndex(KEY_ISSURROUNDINGSOFBUYINGSANITARYCONDITION))));
                    td.setSurroundingsofBuyingSanitaryConditionRemarks(c.getString((c.getColumnIndex(KEY_SURROUNDINGSOFBUYINGSANITARYCONDITIONREMARKS))));
                    td.setIsFloorWellsurfaced(c.getString((c.getColumnIndex(KEY_ISFLOORWELLSURFACED))));
                    td.setFloorWellsurfacedRemarks(c.getString((c.getColumnIndex(KEY_FLOORWELLSURFACEDREMARKS))));
                    td.setIsGradeBoxapproved(c.getString((c.getColumnIndex(KEY_ISGRADEBOXAPPROVED))));
                    td.setGradeBoxapprovedRemarks(c.getString((c.getColumnIndex(KEY_GRADEBOXAPPROVEDREMARKS))));
                    td.setIsCertifiedWeighingscale(c.getString((c.getColumnIndex(KEY_ISCERTIFIEDWEIGHINGSCALE))));
                    td.setCertifiedWeighingScaleRemarks(c.getString((c.getColumnIndex(KEY_CERTIFIEDWEIGHINGSCALEREMARKS))));
                    td.setIsCottonBuyercenterQualified(c.getString((c.getColumnIndex(KEY_ISCOTTONBUYERCENTERQUALIFIED))));
                    td.setCottonBuyercenterQualifiedRemarks(c.getString((c.getColumnIndex(KEY_COTTONBUYERCENTERQUALIFIEDREMARKS))));
                    td.setIsFirePrecauionarymeasure(c.getString((c.getColumnIndex(KEY_ISFIREPRECAUIONARYMEASURE))));
                    td.setFirePrecauionarymeasureRemarks(c.getString((c.getColumnIndex(KEY_FIREPRECAUIONARYMEASUREREMARKS))));
                    td.setIsProperlyclean(c.getString((c.getColumnIndex(KEY_ISPROPERLYCLEAN))));
                    td.setProperlycleanRemarks(c.getString((c.getColumnIndex(KEY_PROPERLYCLEANREMARKS))));
                    td.setIsintact(c.getString((c.getColumnIndex(KEY_ISINTACT))));
                    td.setIntactRemarks(c.getString((c.getColumnIndex(KEY_INTACTREMARKS))));
                    td.setIsfumigated(c.getString((c.getColumnIndex(KEY_ISFUMIGATED))));
                    td.setFumigatedRemarks(c.getString((c.getColumnIndex(KEY_FUMIGATEDREMARKS))));
                    td.setAr(c.getString((c.getColumnIndex(KEY_AR))));
                    td.setBr(c.getString((c.getColumnIndex(KEY_BR))));
                    td.setRecommendaion(c.getString((c.getColumnIndex(KEY_RECOMMENDAION))));
                    td.setReasonForThegiveReccomm(c.getString((c.getColumnIndex(KEY_REASONFORTHEGIVERECCOMM))));


                    CottonBuyingStoreInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + CottonBuyingStoreInspectionList.size());
        return CottonBuyingStoreInspectionList;
    }

    public void deleteCottonBuyingStoreInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_FCD_COTTON_BUYING_STORE_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }




    /* Cotton Ginnery Inspection Conformity Assessment*/

    /*TABLE_FCD_COTTON_GINNERY_INSPECTION*/
    public static final String TABLE_FCD_COTTON_GINNERY_INSPECTION = "fcd_cotton_ginnery_inspection";
    private static final String KEY_COTTON_GINNERY_INSPECTION_ID = "cotton_ginnery_inspection_id";
    private static final String KEY_DOC_NUMBER = "doc_number";
    private static final String KEY_DOC_DATE = "doc_date";
    private static final String KEY_NAMEOF_APPLICANT = "nameof_applicant";
    private static final String KEY_GINNINGLICENCE = "ginninglicence";
    private static final String KEY_SSSEEDVARIETY = "ssseedvariety";
    private static final String KEY_SEEDCOTTONGRADE = "seedcottongrade";
    private static final String KEY_SEEDCOTTONWEIGHTOPENER = "seedcottonweightopener";
    private static final String KEY_LESSTAREWEIGHT = "lesstareweight";
    private static final String KEY_NETTWEIGHTOFUNCLEANEDSEEDCOTTON = "nettweightofuncleanedseedcotton";
    private static final String KEY_CLEANSEEDCOTTONGROSSKG = "cleanseedcottongrosskg";
    private static final String KEY_LESSTAREWEIGHTBEFOREFEEDINGCLEANED = "lesstareweightbeforefeedingcleaned";
    private static final String KEY_NETTWEIGHTUNCLEANEDSEEDKG = "nettweightuncleanedseedkg";
    private static final String KEY_OPENERWASTEORDIRECTBEFORE = "openerwasteordirectbefore";
    private static final String KEY_ISAPPROPIRATEPROTECTIVE = "isappropirateprotective";
    private static final String KEY_ISFIREFIGHTINGPRECAUTIONARY = "isfirefightingprecautionary";
    private static final String KEY_ISPROTECTED_MOVINGPARTS = "isprotected_movingparts";
    private static final String KEY_HOWMANYSEEDSTORES = "howmanyseedstores";
    private static final String KEY_SURROUNDINGSOF_BUYINGSANITARYCONDITION_REMARKS = "surroundingsof_buyingsanitarycondition_remarks";
    private static final String KEY_BULKSTORAGE = "bulkstorage";
    private static final String KEY_BAGS = "bags";
    private static final String KEY_TYPEOFBAGS = "typeofbags";
    private static final String KEY_TOTALSEEDCOTTONPURCHASEINFIELDDBR = "totalseedcottonpurchaseinfielddbr";
    private static final String KEY_TOTALSEEDPURCHASEDFIELDARKG = "totalseedpurchasedfieldarkg";
    private static final String KEY_SEEDCOTTONBROUGHTTOGINNERRYBR = "seedcottonbroughttoginnerrybr";
    private static final String KEY_SEEDCOTTONBROUGHTTOGINNERRYAR = "seedcottonbroughttoginnerryar";
    private static final String KEY_TOTALCOTTONGINNEDTODATEBR = "totalcottonginnedtodatebr";
    private static final String KEY_TOTALCOTTONGINNEDTODATEAR = "totalcottonginnedtodatear";
    private static final String KEY_TOTALCOTTONREMAININGINSTOREBR = "totalcottonremaininginstorebr";
    private static final String KEY_TOTALCOTTONREMAININGINSTOREAR = "totalcottonremaininginstorear";
    private static final String KEY_REMAININGSTORESPACE = "remainingstorespace";
    private static final String KEY_ISROLLER = "isroller";
    private static final String KEY_ISSAW = "issaw";
    private static final String KEY_CATEGORY = "category";
    private static final String KEY_TOTALNOOFGINNINGMACHINES = "totalnoofginningmachines";
    private static final String KEY_NOOFWORKINGGINNINGUNITS = "noofworkingginningunits";
    private static final String KEY_NOOFCURRENTSALESOUPUT8HRS = "noofcurrentsalesouput8hrs";
    private static final String KEY_NOOFINSTALLEDBALESOUTPUT8HRS = "noofinstalledbalesoutput8hrs";
    private static final String KEY_NOOFBALESPRODUCEDFROMBEGGININGOFSESSION = "noofbalesproducedfrombegginingofsession";
    private static final String KEY_NOOFBASELSSOLDLOCAL = "noofbaselssoldlocal";
    private static final String KEY_NOOFBALESSOLDEXPORT = "noofbalessoldexport";
    private static final String KEY_BALESREMAININGINFACTORY = "balesremaininginfactory";
    private static final String KEY_ALESREMAININGINFACTORYBRKG = "alesremaininginfactorybrkg";
    private static final String KEY_SEEDSPRODUCEDBRKG = "seedsproducedbrkg";
    private static final String KEY_SEEDSPRODUCEARKG = "seedsproducearkg";
    private static final String KEY_PLANTINGSEEDAVAILABLEKG = "plantingseedavailablekg";
    private static final String KEY_LASTYEARCARRYOVER = "lastyearcarryover";
    private static final String KEY_SEEDSSOLDFORPLANTING = "seedssoldforplanting";
    private static final String KEY_SEEDSSOLDTOMILLERSKG = "seedssoldtomillerskg";
    private static final String KEY_SEEDREMAINING = "seedremaining";
    private static final String KEY_BUYINGCENTERSTORE = "buyingcenterstore";
    private static final String KEY_BOUGHTKG = "boughtkg";
    private static final String KEY_RECEIVEDATGINNER = "receivedatginner";
    private static final String KEY_REMAINING_IN_THE_FIELD = "remaining_in_the_field";


    public static final String CREATE_TABLE_FCD_COTTON_GINNERY_INSPECTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FCD_COTTON_GINNERY_INSPECTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COTTON_GINNERY_INSPECTION_ID + " TEXT UNIQUE,"
            + KEY_DOC_NUMBER + " TEXT,"
            + KEY_DOC_DATE + " TEXT,"
            + KEY_NAMEOF_APPLICANT + " TEXT,"
            + KEY_GINNINGLICENCE + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_SSSEEDVARIETY + " TEXT,"
            + KEY_SEEDCOTTONGRADE + " TEXT,"
            + KEY_SEEDCOTTONWEIGHTOPENER + " TEXT,"
            + KEY_LESSTAREWEIGHT + " TEXT,"
            + KEY_NETTWEIGHTOFUNCLEANEDSEEDCOTTON + " TEXT,"
            + KEY_CLEANSEEDCOTTONGROSSKG + " TEXT,"
            + KEY_LESSTAREWEIGHTBEFOREFEEDINGCLEANED + " TEXT,"
            + KEY_NETTWEIGHTUNCLEANEDSEEDKG + " TEXT,"
            + KEY_OPENERWASTEORDIRECTBEFORE + " TEXT,"
            + KEY_ISAPPROPIRATEPROTECTIVE + " TEXT,"
            + KEY_ISFIREFIGHTINGPRECAUTIONARY + " TEXT,"
            + KEY_ISPROTECTED_MOVINGPARTS + " TEXT,"
            + KEY_ISFIREENGINES + " TEXT,"
            + KEY_ISWATER + " TEXT,"
            + KEY_ISCARBONDIOXIDE + " TEXT,"
            + KEY_ISSAND + " TEXT,"
            + KEY_ISFOAM + " TEXT,"
            + KEY_ISHYDRANTSYSTEM + " TEXT,"
            + KEY_IS_DRY_POWDER + " TEXT,"
            + KEY_HOWMANYSEEDSTORES + " TEXT,"
            + KEY_SURROUNDINGSOF_BUYINGSANITARYCONDITION_REMARKS + " TEXT,"
            + KEY_BULKSTORAGE + " TEXT,"
            + KEY_BAGS + " TEXT,"
            + KEY_TYPEOFBAGS + " TEXT,"
            + KEY_TOTALSEEDCOTTONPURCHASEINFIELDDBR + " TEXT,"
            + KEY_TOTALSEEDPURCHASEDFIELDARKG + " TEXT,"
            + KEY_SEEDCOTTONBROUGHTTOGINNERRYBR + " TEXT,"
            + KEY_SEEDCOTTONBROUGHTTOGINNERRYAR + " TEXT,"
            + KEY_TOTALCOTTONGINNEDTODATEBR + " TEXT,"
            + KEY_TOTALCOTTONGINNEDTODATEAR + " TEXT,"
            + KEY_TOTALCOTTONREMAININGINSTOREBR + " TEXT,"
            + KEY_TOTALCOTTONREMAININGINSTOREAR + " TEXT,"
            + KEY_REMAININGSTORESPACE + " TEXT,"
            + KEY_ISROLLER + " TEXT,"
            + KEY_ISSAW + " TEXT,"
            + KEY_CATEGORY + " TEXT,"
            + KEY_TOTALNOOFGINNINGMACHINES + " TEXT,"
            + KEY_NOOFWORKINGGINNINGUNITS + " TEXT,"
            + KEY_NOOFCURRENTSALESOUPUT8HRS + " TEXT,"
            + KEY_NOOFINSTALLEDBALESOUTPUT8HRS + " TEXT,"
            + KEY_NOOFBALESPRODUCEDFROMBEGGININGOFSESSION + " TEXT,"
            + KEY_NOOFBASELSSOLDLOCAL + " TEXT,"
            + KEY_NOOFBALESSOLDEXPORT + " TEXT,"
            + KEY_BALESREMAININGINFACTORY + " TEXT,"
            + KEY_ALESREMAININGINFACTORYBRKG + " TEXT,"
            + KEY_SEEDSPRODUCEDBRKG + " TEXT,"
            + KEY_SEEDSPRODUCEARKG + " TEXT,"
            + KEY_PLANTINGSEEDAVAILABLEKG + " TEXT,"
            + KEY_LASTYEARCARRYOVER + " TEXT,"
            + KEY_SEEDSSOLDFORPLANTING + " TEXT,"
            + KEY_SEEDSSOLDTOMILLERSKG + " TEXT,"
            + KEY_SEEDREMAINING + " TEXT,"
            + KEY_BUYINGCENTERSTORE + " TEXT,"
            + KEY_BOUGHTKG + " TEXT,"
            + KEY_RECEIVEDATGINNER + " TEXT,"
            + KEY_REMAINING_IN_THE_FIELD + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertCottonGinneryInspection(CottonGinneryInspection cottonGinneryInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, cottonGinneryInspection.getLocalId());
        values.put(KEY_COTTON_GINNERY_INSPECTION_ID, cottonGinneryInspection.getAFA_Cotton_Ginnery_Inspection_ID());
        values.put(KEY_DOC_NUMBER, cottonGinneryInspection.getDocumentNumber());
        values.put(KEY_DOC_DATE, cottonGinneryInspection.getDocumentDate());
        values.put(KEY_NAMEOF_APPLICANT, cottonGinneryInspection.getNameOfApplicant());
        values.put(KEY_GINNINGLICENCE, cottonGinneryInspection.getGinningLicence());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCottonGinneryInspectionStored(cottonGinneryInspection.getAFA_Cotton_Ginnery_Inspection_ID())) {
            long cottonGinneryInspectionID = db.insertWithOnConflict(TABLE_FCD_COTTON_GINNERY_INSPECTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("cottonGinneryInspectionID: " + cottonGinneryInspectionID);

            closeDB();
            return cottonGinneryInspectionID;
        } else {
            long cottonGinneryInspectionID = -1;
            System.out.println("cottonGinneryInspectionID: " + cottonGinneryInspectionID);

            closeDB();
            return cottonGinneryInspectionID;
        }

    }

    public boolean isCottonGinneryInspectionStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FCD_COTTON_GINNERY_INSPECTION + " WHERE " + KEY_COTTON_GINNERY_INSPECTION_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCottonGinneryInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FCD_COTTON_GINNERY_INSPECTION, values, KEY_ID + " =" + localID, null);

            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long UpdateFCDCottonGinneryInspection(FCDCottonGinneryInspection fCDCottonGinneryInspection) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_SSSEEDVARIETY, fCDCottonGinneryInspection.getSsSeedvariety());
            values.put(KEY_SEEDCOTTONGRADE, fCDCottonGinneryInspection.getSeedCottonGrade());
            values.put(KEY_SEEDCOTTONWEIGHTOPENER, fCDCottonGinneryInspection.getSeedCottonWeightOpener());
            values.put(KEY_LESSTAREWEIGHT, fCDCottonGinneryInspection.getLessTareWeight());
            values.put(KEY_NETTWEIGHTOFUNCLEANEDSEEDCOTTON, fCDCottonGinneryInspection.getNettWeightOfUnCleanedSeedCotton());
            values.put(KEY_CLEANSEEDCOTTONGROSSKG, fCDCottonGinneryInspection.getCleanSeedCottonGrossKg());
            values.put(KEY_LESSTAREWEIGHTBEFOREFEEDINGCLEANED, fCDCottonGinneryInspection.getLessTareWeightBeforeFeedingCleaned());
            values.put(KEY_NETTWEIGHTUNCLEANEDSEEDKG, fCDCottonGinneryInspection.getNettWeightUncleanedSeedKg());
            values.put(KEY_OPENERWASTEORDIRECTBEFORE, fCDCottonGinneryInspection.getOpenerWasteOrDirectBefore());
            values.put(KEY_ISAPPROPIRATEPROTECTIVE, fCDCottonGinneryInspection.getIsAppropirateprotective());
            values.put(KEY_ISFIREFIGHTINGPRECAUTIONARY, fCDCottonGinneryInspection.getIsFireFightingprecautionary());
            values.put(KEY_ISPROTECTED_MOVINGPARTS, fCDCottonGinneryInspection.getIsProtectedMovingparts());
            values.put(KEY_ISFIREENGINES, fCDCottonGinneryInspection.getIsFireengines());
            values.put(KEY_ISWATER, fCDCottonGinneryInspection.getIswater());
            values.put(KEY_ISCARBONDIOXIDE, fCDCottonGinneryInspection.getIsCarbondioxide());
            values.put(KEY_ISSAND, fCDCottonGinneryInspection.getIssand());
            values.put(KEY_ISFOAM, fCDCottonGinneryInspection.getIsfoam());
            values.put(KEY_ISHYDRANTSYSTEM, fCDCottonGinneryInspection.getIsHydrantsystem());
            values.put(KEY_IS_DRY_POWDER, fCDCottonGinneryInspection.getIsDrypowder());
            values.put(KEY_HOWMANYSEEDSTORES, fCDCottonGinneryInspection.getHowManySeedStores());
            values.put(KEY_SURROUNDINGSOF_BUYINGSANITARYCONDITION_REMARKS, fCDCottonGinneryInspection.getSurroundingsOfBuyingSanitaryConditionRemarks());
            values.put(KEY_BULKSTORAGE, fCDCottonGinneryInspection.getBulkStorage());
            values.put(KEY_BAGS, fCDCottonGinneryInspection.getBags());
            values.put(KEY_TYPEOFBAGS, fCDCottonGinneryInspection.getTypeofBags());
            values.put(KEY_TOTALSEEDCOTTONPURCHASEINFIELDDBR, fCDCottonGinneryInspection.getTotalseedCottonPurchaseinFielddBR());
            values.put(KEY_TOTALSEEDPURCHASEDFIELDARKG, fCDCottonGinneryInspection.getTotalSeedPurchasedFieldARkg());
            values.put(KEY_SEEDCOTTONBROUGHTTOGINNERRYBR, fCDCottonGinneryInspection.getSeedCottonBroughtToGinnerryBR());
            values.put(KEY_SEEDCOTTONBROUGHTTOGINNERRYAR, fCDCottonGinneryInspection.getSeedCottonBroughtToGinnerryAR());
            values.put(KEY_TOTALCOTTONGINNEDTODATEBR, fCDCottonGinneryInspection.getTotalCottonGinnedToDateBR());
            values.put(KEY_TOTALCOTTONGINNEDTODATEAR, fCDCottonGinneryInspection.getTotalCottonGinnedToDateAR());
            values.put(KEY_TOTALCOTTONREMAININGINSTOREBR, fCDCottonGinneryInspection.getTotalCottonRemainingInStoreBR());
            values.put(KEY_TOTALCOTTONREMAININGINSTOREAR, fCDCottonGinneryInspection.getTotalCottonRemainingInStoreAR());
            values.put(KEY_REMAININGSTORESPACE, fCDCottonGinneryInspection.getRemainingStoreSpace());
            values.put(KEY_ISROLLER, fCDCottonGinneryInspection.getIsroller());
            values.put(KEY_ISSAW, fCDCottonGinneryInspection.getIssaw());
            values.put(KEY_CATEGORY, fCDCottonGinneryInspection.getCategory());
            values.put(KEY_TOTALNOOFGINNINGMACHINES, fCDCottonGinneryInspection.getTotalNoOfGinningMachines());
            values.put(KEY_NOOFWORKINGGINNINGUNITS, fCDCottonGinneryInspection.getNoOfWorkingGinningUnits());
            values.put(KEY_NOOFCURRENTSALESOUPUT8HRS, fCDCottonGinneryInspection.getNoOfCurrentSalesOuput8hrs());
            values.put(KEY_NOOFINSTALLEDBALESOUTPUT8HRS, fCDCottonGinneryInspection.getNoOfInstalledBalesOutput8hrs());
            values.put(KEY_NOOFBALESPRODUCEDFROMBEGGININGOFSESSION, fCDCottonGinneryInspection.getNoOfBalesProducedFromBegginingOfSession());
            values.put(KEY_NOOFBASELSSOLDLOCAL, fCDCottonGinneryInspection.getNoOfBaselsSoldLocal());
            values.put(KEY_NOOFBALESSOLDEXPORT, fCDCottonGinneryInspection.getNoOfBalesSoldExport());
            values.put(KEY_BALESREMAININGINFACTORY, fCDCottonGinneryInspection.getBalesRemainingInFactory());
            values.put(KEY_ALESREMAININGINFACTORYBRKG, fCDCottonGinneryInspection.getAlesRemainingInFactoryBRKg());
            values.put(KEY_SEEDSPRODUCEDBRKG, fCDCottonGinneryInspection.getSeedsProducedBRkg());
            values.put(KEY_SEEDSPRODUCEARKG, fCDCottonGinneryInspection.getSeedsProduceArKg());
            values.put(KEY_PLANTINGSEEDAVAILABLEKG, fCDCottonGinneryInspection.getPlantingSeedAvailableKg());
            values.put(KEY_LASTYEARCARRYOVER, fCDCottonGinneryInspection.getLastYearCarryOver());
            values.put(KEY_SEEDSSOLDFORPLANTING, fCDCottonGinneryInspection.getSeedsSoldForPlanting());
            values.put(KEY_SEEDSSOLDTOMILLERSKG, fCDCottonGinneryInspection.getSeedsSoldToMillersKg());
            values.put(KEY_SEEDREMAINING, fCDCottonGinneryInspection.getSeedRemaining());
            values.put(KEY_BUYINGCENTERSTORE, fCDCottonGinneryInspection.getBuyingCenterStore());
            values.put(KEY_BOUGHTKG, fCDCottonGinneryInspection.getBoughtKg());
            values.put(KEY_RECEIVEDATGINNER, fCDCottonGinneryInspection.getReceivedAtGinner());
            values.put(KEY_REMAINING_IN_THE_FIELD, fCDCottonGinneryInspection.getRemainingInTheField());
            values.put(KEY_OFFICER_RECOMMENDATION, fCDCottonGinneryInspection.getOfficerrecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, fCDCottonGinneryInspection.getOfficerrecommendation_remark());

            result = db.update(TABLE_FCD_COTTON_GINNERY_INSPECTION, values, "id =" + Integer.parseInt(fCDCottonGinneryInspection.getLocalId()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<CottonGinneryInspection> getCottonGinneryInspectionList() {

        List<CottonGinneryInspection> CottonGinneryInspectionlist = new ArrayList<CottonGinneryInspection>();
        CottonGinneryInspection td = new CottonGinneryInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_COTTON_GINNERY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Cotton Ginnery Inspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CottonGinneryInspection();

                    td.setLocalId(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Cotton_Ginnery_Inspection_ID(c.getString((c.getColumnIndex(KEY_COTTON_GINNERY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOC_NUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOC_DATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAMEOF_APPLICANT))));
                    td.setGinningLicence(c.getString((c.getColumnIndex(KEY_GINNINGLICENCE))));

                    // adding to itinerary list
                    CottonGinneryInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + CottonGinneryInspectionlist.size());
        return CottonGinneryInspectionlist;
    }


    public List<CottonGinneryInspection> getCottonGinneryInspectionDone() {

        List<CottonGinneryInspection> CottonGinneryInspectionList = new ArrayList<CottonGinneryInspection>();
        CottonGinneryInspection td = new CottonGinneryInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_COTTON_GINNERY_INSPECTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CottonGinneryInspection();
                    td.setLocalId(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Cotton_Ginnery_Inspection_ID(c.getString((c.getColumnIndex(KEY_COTTON_GINNERY_INSPECTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOC_NUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOC_DATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAMEOF_APPLICANT))));
                    td.setGinningLicence(c.getString((c.getColumnIndex(KEY_GINNINGLICENCE))));
                    td.setSsSeedvariety(c.getString((c.getColumnIndex(KEY_SSSEEDVARIETY))));
                    td.setSeedCottonGrade(c.getString((c.getColumnIndex(KEY_SEEDCOTTONGRADE))));
                    td.setSeedCottonWeightOpener(c.getString((c.getColumnIndex(KEY_SEEDCOTTONWEIGHTOPENER))));
                    td.setLessTareWeight(c.getString((c.getColumnIndex(KEY_LESSTAREWEIGHT))));
                    td.setNettWeightOfUnCleanedSeedCotton(c.getString((c.getColumnIndex(KEY_NETTWEIGHTOFUNCLEANEDSEEDCOTTON))));
                    td.setCleanSeedCottonGrossKg(c.getString((c.getColumnIndex(KEY_CLEANSEEDCOTTONGROSSKG))));
                    td.setLessTareWeightBeforeFeedingCleaned(c.getString((c.getColumnIndex(KEY_LESSTAREWEIGHTBEFOREFEEDINGCLEANED))));
                    td.setNettWeightUncleanedSeedKg(c.getString((c.getColumnIndex(KEY_NETTWEIGHTUNCLEANEDSEEDKG))));
                    td.setOpenerWasteOrDirectBefore(c.getString((c.getColumnIndex(KEY_OPENERWASTEORDIRECTBEFORE))));
                    td.setIsAppropirateprotective(c.getString((c.getColumnIndex(KEY_ISAPPROPIRATEPROTECTIVE))));
                    td.setIsFireFightingprecautionary(c.getString((c.getColumnIndex(KEY_ISFIREFIGHTINGPRECAUTIONARY))));
                    td.setIsProtectedMovingparts(c.getString((c.getColumnIndex(KEY_ISPROTECTED_MOVINGPARTS))));
                    td.setIsFireengines(c.getString((c.getColumnIndex(KEY_ISFIREENGINES))));
                    td.setIsCarbondioxide(c.getString((c.getColumnIndex(KEY_ISCARBONDIOXIDE))));
                    td.setIssand(c.getString((c.getColumnIndex(KEY_ISSAND))));
                    td.setIswater(c.getString((c.getColumnIndex(KEY_ISWATER))));
                    td.setIsfoam(c.getString((c.getColumnIndex(KEY_ISFOAM))));
                    td.setIsHydrantsystem(c.getString((c.getColumnIndex(KEY_ISHYDRANTSYSTEM))));
                    td.setIsDrypowder(c.getString((c.getColumnIndex(KEY_IS_DRY_POWDER))));
                    td.setHowManySeedStores(c.getString((c.getColumnIndex(KEY_HOWMANYSEEDSTORES))));
                    td.setSurroundingsOfBuyingSanitaryConditionRemarks(c.getString((c.getColumnIndex(KEY_SURROUNDINGSOF_BUYINGSANITARYCONDITION_REMARKS))));
                    td.setBulkStorage(c.getString((c.getColumnIndex(KEY_BULKSTORAGE))));
                    td.setBags(c.getString((c.getColumnIndex(KEY_BAGS))));
                    td.setTypeofBags(c.getString((c.getColumnIndex(KEY_TYPEOFBAGS))));
                    td.setTotalseedCottonPurchaseinFielddBR(c.getString((c.getColumnIndex(KEY_TOTALSEEDCOTTONPURCHASEINFIELDDBR))));
                    td.setTotalSeedPurchasedFieldARkg(c.getString((c.getColumnIndex(KEY_TOTALSEEDPURCHASEDFIELDARKG))));
                    td.setSeedCottonBroughtToGinnerryBR(c.getString((c.getColumnIndex(KEY_SEEDCOTTONBROUGHTTOGINNERRYBR))));
                    td.setSeedCottonBroughtToGinnerryAR(c.getString((c.getColumnIndex(KEY_SEEDCOTTONBROUGHTTOGINNERRYAR))));
                    td.setTotalCottonGinnedToDateBR(c.getString((c.getColumnIndex(KEY_TOTALCOTTONGINNEDTODATEBR))));
                    td.setTotalCottonGinnedToDateAR(c.getString((c.getColumnIndex(KEY_TOTALCOTTONGINNEDTODATEAR))));
                    td.setTotalCottonRemainingInStoreBR(c.getString((c.getColumnIndex(KEY_TOTALCOTTONREMAININGINSTOREBR))));
                    td.setTotalCottonRemainingInStoreAR(c.getString((c.getColumnIndex(KEY_TOTALCOTTONREMAININGINSTOREAR))));
                    td.setRemainingStoreSpace(c.getString((c.getColumnIndex(KEY_REMAININGSTORESPACE))));
                    td.setIsroller(c.getString((c.getColumnIndex(KEY_ISROLLER))));
                    td.setIssaw(c.getString((c.getColumnIndex(KEY_ISSAW))));
                    td.setCategory(c.getString((c.getColumnIndex(KEY_CATEGORY))));
                    td.setTotalNoOfGinningMachines(c.getString((c.getColumnIndex(KEY_TOTALNOOFGINNINGMACHINES))));
                    td.setNoOfWorkingGinningUnits(c.getString((c.getColumnIndex(KEY_NOOFWORKINGGINNINGUNITS))));
                    td.setNoOfCurrentSalesOuput8hrs(c.getString((c.getColumnIndex(KEY_NOOFCURRENTSALESOUPUT8HRS))));
                    td.setNoOfInstalledBalesOutput8hrs(c.getString((c.getColumnIndex(KEY_NOOFINSTALLEDBALESOUTPUT8HRS))));
                    td.setNoOfBalesProducedFromBegginingOfSession(c.getString((c.getColumnIndex(KEY_NOOFBALESPRODUCEDFROMBEGGININGOFSESSION))));
                    td.setNoOfBaselsSoldLocal(c.getString((c.getColumnIndex(KEY_NOOFBASELSSOLDLOCAL))));
                    td.setNoOfBalesSoldExport(c.getString((c.getColumnIndex(KEY_NOOFBALESSOLDEXPORT))));
                    td.setBalesRemainingInFactory(c.getString((c.getColumnIndex(KEY_BALESREMAININGINFACTORY))));
                    td.setAlesRemainingInFactoryBRKg(c.getString((c.getColumnIndex(KEY_ALESREMAININGINFACTORYBRKG))));
                    td.setSeedsProducedBRkg(c.getString((c.getColumnIndex(KEY_SEEDSPRODUCEDBRKG))));
                    td.setSeedsProduceArKg(c.getString((c.getColumnIndex(KEY_SEEDSPRODUCEARKG))));
                    td.setPlantingSeedAvailableKg(c.getString((c.getColumnIndex(KEY_PLANTINGSEEDAVAILABLEKG))));
                    td.setLastYearCarryOver(c.getString((c.getColumnIndex(KEY_LASTYEARCARRYOVER))));
                    td.setSeedsSoldForPlanting(c.getString((c.getColumnIndex(KEY_SEEDSSOLDFORPLANTING))));
                    td.setSeedsSoldToMillersKg(c.getString((c.getColumnIndex(KEY_SEEDSSOLDTOMILLERSKG))));
                    td.setSeedRemaining(c.getString((c.getColumnIndex(KEY_SEEDREMAINING))));
                    td.setBuyingCenterStore(c.getString((c.getColumnIndex(KEY_BUYINGCENTERSTORE))));
                    td.setBoughtKg(c.getString((c.getColumnIndex(KEY_BOUGHTKG))));
                    td.setReceivedAtGinner(c.getString((c.getColumnIndex(KEY_RECEIVEDATGINNER))));
                    td.setRemainingInTheField(c.getString((c.getColumnIndex(KEY_REMAINING_IN_THE_FIELD))));
                    td.setOfficerrecommendation(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION)));
                    td.setOfficerrecommendation_remark(c.getString(c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS)));

                    CottonGinneryInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + CottonGinneryInspectionList.size());
        return CottonGinneryInspectionList;
    }

    public void deleteCottonGinneryInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_FCD_COTTON_GINNERY_INSPECTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }

    /*End of CottonGinnery Inspection List*/
    /*TABLE_FCD_COTTON_LINT_CLASSING_REPORT*/
    public static final String TABLE_FCD_COTTON_LINT_CLASSING_REPORT = "fcd_cotton_lint_classing_report";
    private static final String KEY_COTTON_LINT_CLASSING_REPORT_ID = "cotton_lint_classing_report_id";
    private static final String KEY_LINTLICENCE = "lintlicence";
    private static final String KEY_SAMPLE_IDENTIFICATION = "sample_identification";
    private static final String KEY_ANALYSIS_DATE = "analysis_date";
    private static final String KEY_ORIGIN = "origin";
    private static final String KEY_MICRONAIRE = "micronaire";
    private static final String KEY_LENGTH_INCHES = "length_inches";
    private static final String KEY_LENGTH_MILLIMETERS = "length_millimeters";
    private static final String KEY_UNIFORMITY_INDEX = "uniformity_index";
    private static final String KEY_STRENGTH = "strength";
    private static final String KEY_COLOR_RD = "color_rd";
    private static final String KEY_COLOR_B = "color_b";
    private static final String KEY_COLOR_GRADE = "color_grade";


    public static final String CREATE_TABLE_FCD_COTTON_LINT_CLASSING_REPORT = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FCD_COTTON_LINT_CLASSING_REPORT + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COTTON_LINT_CLASSING_REPORT_ID + " TEXT UNIQUE,"
            + KEY_DOC_NUMBER + " TEXT,"
            + KEY_DOC_DATE + " TEXT,"
            + KEY_NAMEOF_APPLICANT + " TEXT,"
            + KEY_LINTLICENCE + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_SAMPLE_IDENTIFICATION + " TEXT,"
            + KEY_ANALYSIS_DATE + " TEXT,"
            + KEY_ORIGIN + " TEXT,"
            + KEY_MICRONAIRE + " TEXT,"
            + KEY_LENGTH_INCHES + " TEXT,"
            + KEY_LENGTH_MILLIMETERS + " TEXT,"
            + KEY_UNIFORMITY_INDEX + " TEXT,"
            + KEY_STRENGTH + " TEXT,"
            + KEY_COLOR_RD + " TEXT,"
            + KEY_COLOR_B + " TEXT,"
            + KEY_COLOR_GRADE + " TEXT,"
            + KEY_REMARKS + " TEXT,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertCottonLintClassingReport(CottonLintClassingReport cottonLintClassingReport) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, cottonLintClassingReport.getLocalId());
        values.put(KEY_COTTON_LINT_CLASSING_REPORT_ID, cottonLintClassingReport.getAFA_Cotton_Lint_Classing_Report_ID());
        values.put(KEY_DOC_NUMBER, cottonLintClassingReport.getDocumentNumber());
        values.put(KEY_DOC_DATE, cottonLintClassingReport.getDocumentDate());
        values.put(KEY_NAMEOF_APPLICANT, cottonLintClassingReport.getNameOfApplicant());
        values.put(KEY_LINTLICENCE, cottonLintClassingReport.getLintLicence());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        // insert row
        if (!isCottonLintClassingReportStored(cottonLintClassingReport.getAFA_Cotton_Lint_Classing_Report_ID())) {
            long cottonLintClassingReportID = db.insertWithOnConflict(TABLE_FCD_COTTON_LINT_CLASSING_REPORT, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            System.out.println("cottonLintClassingReportID: " + cottonLintClassingReportID);

            closeDB();
            return cottonLintClassingReportID;
        } else {
            long cottonLintClassingReportID = -1;
            System.out.println("cottonLintClassingReportID: " + cottonLintClassingReportID);

            closeDB();
            return cottonLintClassingReportID;
        }

    }

    public boolean isCottonLintClassingReportStored(String serverID) {
        String selectQuery = "SELECT * FROM " + TABLE_FCD_COTTON_LINT_CLASSING_REPORT + " WHERE " + KEY_COTTON_LINT_CLASSING_REPORT_ID
                + " = " + serverID;
        db = dbHelper.getReadableDatabase();


        // updating row
        Cursor c = db.rawQuery(selectQuery, null);
        if (c.moveToFirst()) {
            closeDB();
            return true;
        } else {
            closeDB();
            return false;
        }

    }

    public boolean updateCottonLintClassingReportSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FCD_COTTON_LINT_CLASSING_REPORT, values, KEY_ID + " =" + localID, null);

            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long UpdateFCDCottonLintClassingReport(FCDCottonLintClassingReport fcdCottonLintClassingReport) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_SAMPLE_IDENTIFICATION, fcdCottonLintClassingReport.getSampleIdentification());
            values.put(KEY_ANALYSIS_DATE, fcdCottonLintClassingReport.getAnalysisDate());
            values.put(KEY_ORIGIN, fcdCottonLintClassingReport.getOrigin());
            values.put(KEY_MICRONAIRE, fcdCottonLintClassingReport.getMicronaire());
            values.put(KEY_LENGTH_INCHES, fcdCottonLintClassingReport.getLengthInches());
            values.put(KEY_LENGTH_MILLIMETERS, fcdCottonLintClassingReport.getLengthMillimeters());
            values.put(KEY_UNIFORMITY_INDEX, fcdCottonLintClassingReport.getUniformityIndex());
            values.put(KEY_STRENGTH, fcdCottonLintClassingReport.getStrength());
            values.put(KEY_COLOR_RD, fcdCottonLintClassingReport.getColorRd());
            values.put(KEY_COLOR_B, fcdCottonLintClassingReport.getColorB());
            values.put(KEY_COLOR_GRADE, fcdCottonLintClassingReport.getColorGrade());
            values.put(KEY_REMARKS, fcdCottonLintClassingReport.getRemarks());

            result = db.update(TABLE_FCD_COTTON_LINT_CLASSING_REPORT, values, "id =" + Integer.parseInt(fcdCottonLintClassingReport.getLocalId()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<CottonLintClassingReport> getCottonLintClassingReportList() {

        List<CottonLintClassingReport> cottonLintClassingReportList = new ArrayList<CottonLintClassingReport>();
        CottonLintClassingReport td = new CottonLintClassingReport();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_COTTON_LINT_CLASSING_REPORT + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking Cotton Lint Classing Report data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CottonLintClassingReport();

                    td.setLocalId(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Cotton_Lint_Classing_Report_ID(c.getString((c.getColumnIndex(KEY_COTTON_LINT_CLASSING_REPORT_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOC_NUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOC_DATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAMEOF_APPLICANT))));
                    td.setLintLicence(c.getString((c.getColumnIndex(KEY_LINTLICENCE))));

                    // adding to itinerary list
                    cottonLintClassingReportList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + cottonLintClassingReportList.size());
        return cottonLintClassingReportList;
    }


    public List<CottonLintClassingReport> getCottonLintClassingReportDone() {

        List<CottonLintClassingReport> cottonLintClassingReportList = new ArrayList<CottonLintClassingReport>();
        CottonLintClassingReport td = new CottonLintClassingReport();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FCD_COTTON_LINT_CLASSING_REPORT + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new CottonLintClassingReport();
                    td.setLocalId(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_Cotton_Lint_Classing_Report_ID(c.getString((c.getColumnIndex(KEY_COTTON_LINT_CLASSING_REPORT_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOC_NUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOC_DATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAMEOF_APPLICANT))));
                    td.setLintLicence(c.getString((c.getColumnIndex(KEY_LINTLICENCE))));
                    td.setSampleIdentification(c.getString((c.getColumnIndex(KEY_SAMPLE_IDENTIFICATION))));
                    td.setAnalysisDate(c.getString((c.getColumnIndex(KEY_ANALYSIS_DATE))));
                    td.setOrigin(c.getString((c.getColumnIndex(KEY_ORIGIN))));
                    td.setMicronaire(c.getString((c.getColumnIndex(KEY_MICRONAIRE))));
                    td.setLengthInches(c.getString((c.getColumnIndex(KEY_LENGTH_INCHES))));
                    td.setLengthMillimeters(c.getString((c.getColumnIndex(KEY_LENGTH_MILLIMETERS))));
                    td.setUniformityIndex(c.getString((c.getColumnIndex(KEY_UNIFORMITY_INDEX))));
                    td.setStrength(c.getString((c.getColumnIndex(KEY_STRENGTH))));
                    td.setColorRd(c.getString((c.getColumnIndex(KEY_COLOR_RD))));
                    td.setColorB(c.getString((c.getColumnIndex(KEY_COLOR_B))));
                    td.setColorGrade(c.getString((c.getColumnIndex(KEY_COLOR_GRADE))));
                    td.setRemarks(c.getString((c.getColumnIndex(KEY_REMARKS))));

                    cottonLintClassingReportList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + cottonLintClassingReportList.size());
        return cottonLintClassingReportList;
    }

    public void deleteCottonLintClassingReportList() {

        String deleteQuery = "DELETE FROM " + TABLE_FCD_COTTON_LINT_CLASSING_REPORT;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }


    /*food inspection*/
    public static final String TABLE_FOOD_PROCESSING_INSPECCTION = "food_processing_inspection";
    private static final String KEY_FOOD_PROCESSING_INSPECCTION_ID = "food_processing_inspection_id";
    private static final String KEY_FOODCROPMANUFACTURINGPLANAPPROVAL = "foodcropmanufacturingplanapproval";
    private static final String KEY_SUPPLIERS_SOURCE_RAW_MATERIALS = "suppliers_source_raw_materials";
    private static final String KEY_INSTALLEDCAPACITY = "installedcapacity";
    private static final String KEY_ISLOCATIONDESIGNCONSTRUCTIONSTANDARDS = "islocationdesignconstructionstandards";
    private static final String KEY_LOCATIONDESIGNCONSTRUCTIONSTANDARDS_REMARKS = "locationdesignconstructionstandards_remarks";
    private static final String KEY_ISPROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE = "isproceduresforensuring_personalhygienearein_place";
    private static final String KEY_PROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE_REMARKS = "proceduresforensuring_personalhygieneareinplace_remarks";
    private static final String KEY_ISPROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE = "isproceduresfor_receiving_handlingandstoragearein_place";
    private static final String KEY_PROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE_REMARKS = "proceduresforreceiving_handlingandstorageare_inplace_remarks";
    private static final String KEY_ISMONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE = "ismonitoringproceduresforpestcontroloftheareinplace";
    private static final String KEY_MONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE_REMARKS = "monitoringproceduresforpestcontroloftheareinplace_remarks";
    private static final String KEY_ISCLEANINGANDSANITIZINGPROCEDURESINPLACE = "iscleaningandsanitizingproceduresinplace";
    private static final String KEY_CLEANINGANDSANITIZINGPROCEDURESINPLACE_REMARKS = "cleaningandsanitizingproceduresinplace_remarks";
    private static final String KEY_ISPROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION = "isproceduresdescribingpreventivemaintenanceandcalibration";
    private static final String KEY_PROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION_REMARKS = "proceduresdescribingpreventivemaintenanceandcalibration_remarks";
    private static final String KEY_ISRECALLANDTRACEABILITYPROCEDURES = "isrecallandtraceabilityprocedures";
    private static final String KEY_RECALLANDTRACEABILITYPROCEDURES_REMARKS = "recallandtraceabilityprocedures_remarks";
    private static final String KEY_ISWATERSAFETYMONITORINGPROCEDURES = "iswatersafetymonitoringprocedures";
    private static final String KEY_WATERSAFETYMONITORINGPROCEDURES_REMARKS = "watersafetymonitoringprocedures_remarks";


    public static final String CREATE_TABLE_FOOD_PROCESSING_INSPECCTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FOOD_PROCESSING_INSPECCTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FOOD_PROCESSING_INSPECCTION_ID + " TEXT UNIQUE,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_DOCUMENTNUMBER + " TEXT,"
            + KEY_DOCUMENTDATE + " TEXT,"
            + KEY_NAMEOFAPPLICANT + " TEXT,"
            + KEY_FOODCROPMANUFACTURINGPLANAPPROVAL + " TEXT,"
            + KEY_SUPPLIERS_SOURCE_RAW_MATERIALS + " TEXT,"
            + KEY_INSTALLEDCAPACITY + " TEXT,"
            + KEY_ISLOCATIONDESIGNCONSTRUCTIONSTANDARDS + " TEXT,"
            + KEY_LOCATIONDESIGNCONSTRUCTIONSTANDARDS_REMARKS + " TEXT,"
            + KEY_ISPROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE + " TEXT,"
            + KEY_PROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE_REMARKS + " TEXT,"
            + KEY_ISPROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE + " TEXT,"
            + KEY_PROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE_REMARKS + " TEXT,"
            + KEY_ISMONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE + " TEXT,"
            + KEY_MONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE_REMARKS + " TEXT,"
            + KEY_ISCLEANINGANDSANITIZINGPROCEDURESINPLACE + " TEXT,"
            + KEY_CLEANINGANDSANITIZINGPROCEDURESINPLACE_REMARKS + " TEXT,"
            + KEY_ISPROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION + " TEXT,"
            + KEY_PROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION_REMARKS + " TEXT,"
            + KEY_ISRECALLANDTRACEABILITYPROCEDURES + " TEXT,"
            + KEY_RECALLANDTRACEABILITYPROCEDURES_REMARKS + " TEXT,"
            + KEY_ISWATERSAFETYMONITORINGPROCEDURES + " TEXT,"
            + KEY_WATERSAFETYMONITORINGPROCEDURES_REMARKS + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertFoodProcessingInpection(FoodProcessingInpection foodProcessingInpection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, foodProcessingInpection.getLocalID());
        values.put(KEY_FOOD_PROCESSING_INSPECCTION_ID, foodProcessingInpection.getAFA_FD_FOOD_PROCESSING_Inspection_ID());
        values.put(KEY_DOCUMENTNUMBER, foodProcessingInpection.getDocumentNumber());
        values.put(KEY_DOCUMENTDATE, foodProcessingInpection.getDocumentDate());
        values.put(KEY_NAMEOFAPPLICANT, foodProcessingInpection.getNameOfApplicant());
        values.put(KEY_FOODCROPMANUFACTURINGPLANAPPROVAL, foodProcessingInpection.getFoodCropManufacturingPlanApproval());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        long foodProcessingInpectionID = db.insertWithOnConflict(TABLE_FOOD_PROCESSING_INSPECCTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("foodProcessingInpection: " + foodProcessingInpectionID);

        closeDB();
        return foodProcessingInpectionID;
        // insert row

    }


    public boolean updatefoodProcessingInpectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FOOD_PROCESSING_INSPECCTION, values, KEY_ID + " =" + localID, null);

            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long UpdatefoodProcessingInpection(FoodProcessing foodProcessing) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_SUPPLIERS_SOURCE_RAW_MATERIALS, foodProcessing.getSuppliers_source_raw_materials());
            values.put(KEY_INSTALLEDCAPACITY, foodProcessing.getInstalledCapacity());
            values.put(KEY_ISLOCATIONDESIGNCONSTRUCTIONSTANDARDS, foodProcessing.getIsLocationDesignconstructionStandards());
            values.put(KEY_LOCATIONDESIGNCONSTRUCTIONSTANDARDS_REMARKS, foodProcessing.getLocationDesignConstructionStandards_remarks());
            values.put(KEY_ISPROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE, foodProcessing.getIsProceduresforensuringPersonalhygieneareinplace());
            values.put(KEY_PROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE_REMARKS, foodProcessing.getProceduresforensuringpersonalhygieneareinplace_remarks());
            values.put(KEY_ISPROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE, foodProcessing.getIsProceduresforReceivinghandlingandstorageareinplace());
            values.put(KEY_PROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE_REMARKS, foodProcessing.getProceduresforreceivinghandlingandstorageareinplace_remarks());
            values.put(KEY_ISMONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE, foodProcessing.getIsMonitoringproceduresforPestcontroloftheareinplace());
            values.put(KEY_MONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE_REMARKS, foodProcessing.getMonitoringproceduresforpestcontroloftheareinplace_remarks());
            values.put(KEY_ISCLEANINGANDSANITIZINGPROCEDURESINPLACE, foodProcessing.getIsCleaningandsanitizingProceduresinplace());
            values.put(KEY_CLEANINGANDSANITIZINGPROCEDURESINPLACE_REMARKS, foodProcessing.getCleaningandsanitizingproceduresinplace_remarks());
            values.put(KEY_ISPROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION, foodProcessing.getIsProceduresdescribingPreventivemaintenanceandcalibration());
            values.put(KEY_PROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION_REMARKS, foodProcessing.getProceduresdescribingpreventivemaintenanceandcalibration_remarks());
            values.put(KEY_ISRECALLANDTRACEABILITYPROCEDURES, foodProcessing.getIsRecallandTraceabilityprocedures());
            values.put(KEY_RECALLANDTRACEABILITYPROCEDURES_REMARKS, foodProcessing.getRecallandtraceabilityprocedures_remarks());
            values.put(KEY_ISWATERSAFETYMONITORINGPROCEDURES, foodProcessing.getIsWaterSafetymonitoringProcedures());
            values.put(KEY_WATERSAFETYMONITORINGPROCEDURES_REMARKS, foodProcessing.getWaterSafetyMonitoringProcedures_remarks());
            values.put(KEY_OFFICER_RECOMMENDATION, foodProcessing.getRecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, foodProcessing.getRecommendationRemarks());

            result = db.update(TABLE_FOOD_PROCESSING_INSPECCTION, values, "id =" + Integer.parseInt(foodProcessing.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<FoodProcessingInpection> getFoodProcessingInpectionList() {

        List<FoodProcessingInpection> foodProcessingInpectionlist = new ArrayList<FoodProcessingInpection>();
        FoodProcessingInpection td = new FoodProcessingInpection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FOOD_PROCESSING_INSPECCTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking FoodProcessingInpection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FoodProcessingInpection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_FD_FOOD_PROCESSING_Inspection_ID(c.getString((c.getColumnIndex(KEY_FOOD_PROCESSING_INSPECCTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setFoodCropManufacturingPlanApproval(c.getString((c.getColumnIndex(KEY_FOODCROPMANUFACTURINGPLANAPPROVAL))));

                    // adding to itinerary list
                    foodProcessingInpectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + foodProcessingInpectionlist.size());
        return foodProcessingInpectionlist;
    }


    public List<FoodProcessingInpection> getFoodProcessingInpectionDone() {

        List<FoodProcessingInpection> FoodProcessingInpectionList = new ArrayList<FoodProcessingInpection>();
        FoodProcessingInpection td = new FoodProcessingInpection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FOOD_PROCESSING_INSPECCTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FoodProcessingInpection();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_FD_FOOD_PROCESSING_Inspection_ID(c.getString((c.getColumnIndex(KEY_FOOD_PROCESSING_INSPECCTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setFoodCropManufacturingPlanApproval(c.getString((c.getColumnIndex(KEY_FOODCROPMANUFACTURINGPLANAPPROVAL))));
                    td.setSuppliers_source_raw_materials(c.getString((c.getColumnIndex(KEY_SUPPLIERS_SOURCE_RAW_MATERIALS))));
                    td.setInstalledCapacity(c.getString((c.getColumnIndex(KEY_INSTALLEDCAPACITY))));
                    td.setIsLocationDesignconstructionStandards(c.getString((c.getColumnIndex(KEY_ISLOCATIONDESIGNCONSTRUCTIONSTANDARDS))));
                    td.setLocationDesignConstructionStandards_remarks(c.getString((c.getColumnIndex(KEY_LOCATIONDESIGNCONSTRUCTIONSTANDARDS_REMARKS))));
                    td.setIsProceduresforensuringPersonalhygieneareinplace(c.getString((c.getColumnIndex(KEY_ISPROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE))));
                    td.setProceduresforensuringpersonalhygieneareinplace_remarks(c.getString((c.getColumnIndex(KEY_PROCEDURESFORENSURINGPERSONALHYGIENEAREINPLACE_REMARKS))));
                    td.setIsProceduresforReceivinghandlingandstorageareinplace(c.getString((c.getColumnIndex(KEY_ISPROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE))));
                    td.setProceduresforreceivinghandlingandstorageareinplace_remarks(c.getString((c.getColumnIndex(KEY_PROCEDURESFORRECEIVINGHANDLINGANDSTORAGEAREINPLACE_REMARKS))));
                    td.setIsMonitoringproceduresforPestcontroloftheareinplace(c.getString((c.getColumnIndex(KEY_ISMONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE))));
                    td.setMonitoringproceduresforpestcontroloftheareinplace_remarks(c.getString((c.getColumnIndex(KEY_MONITORINGPROCEDURESFORPESTCONTROLOFTHEAREINPLACE_REMARKS))));
                    td.setIsCleaningandsanitizingProceduresinplace(c.getString((c.getColumnIndex(KEY_ISCLEANINGANDSANITIZINGPROCEDURESINPLACE))));
                    td.setCleaningandsanitizingproceduresinplace_remarks(c.getString((c.getColumnIndex(KEY_CLEANINGANDSANITIZINGPROCEDURESINPLACE_REMARKS))));
                    td.setIsProceduresdescribingPreventivemaintenanceandcalibration(c.getString((c.getColumnIndex(KEY_ISPROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION))));
                    td.setProceduresdescribingpreventivemaintenanceandcalibration_remarks(c.getString((c.getColumnIndex(KEY_PROCEDURESDESCRIBINGPREVENTIVEMAINTENANCEANDCALIBRATION_REMARKS))));
                    td.setIsRecallandTraceabilityprocedures(c.getString((c.getColumnIndex(KEY_ISRECALLANDTRACEABILITYPROCEDURES))));
                    td.setRecallandtraceabilityprocedures_remarks(c.getString((c.getColumnIndex(KEY_RECALLANDTRACEABILITYPROCEDURES_REMARKS))));
                    td.setIsWaterSafetymonitoringProcedures(c.getString((c.getColumnIndex(KEY_ISWATERSAFETYMONITORINGPROCEDURES))));
                    td.setWaterSafetyMonitoringProcedures_remarks(c.getString((c.getColumnIndex(KEY_WATERSAFETYMONITORINGPROCEDURES_REMARKS))));
                    td.setRecommendation(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION))));
                    td.setRecommendationRemarks(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS))));

                    FoodProcessingInpectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + FoodProcessingInpectionList.size());
        return FoodProcessingInpectionList;
    }

    public void deleteFoodProcessingInpectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_FOOD_PROCESSING_INSPECCTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }


    /*food ware houseinspection*/
    public static final String TABLE_FOOD_WAREHOUSE_INSPECCTION = "food_warehouse_inspection";
    private static final String KEY_FOOD_WAREHOUSE_INSPECCTION_ID = "food_warehouse_inspection_id";
    private static final String KEY_FOODWAREHOUSELICENCE = "foodwarehouselicence";
    private static final String KEY_SSLEASEAGREEMENT = "ssleaseagreement";
    private static final String KEY_ISGRAINCLEANINGFACILITY = "isgraincleaningfacility";
    private static final String KEY_GRAINCLEANINGFACILITY_REMARKS = "graincleaningfacility_remarks";
    private static final String KEY_ISLOADINGCAPACITY = "isloadingcapacity";
    private static final String KEY_LOADINGCAPACITY_REMARKS = "loadingcapacity_remarks";
    private static final String KEY_ISDRIER = "isdrier";
    private static final String KEY_DRIER_REMARKS = "drier_remarks";
    private static final String KEY_ISLABROOM = "islabroom";
    private static final String KEY_LABROOM_REMARKS = "labroom_remarks";
    private static final String KEY_ISWALLANDVENTILATION = "iswallandventilation";
    private static final String KEY_WALLANDVENTILATION_REMARKS = "wallandventilation_remarks";
    private static final String KEY_ISWATERPROOFPROVISIONS = "iswaterproofprovisions";
    private static final String KEY_WATERPROOFPROVISIONS_REMARKS = "waterproofprovisions_remarks";
    private static final String KEY_ISINTERNALSUPPORT = "isinternalsupport";
    private static final String KEY_INTERNALSUPPORT_REMARKS = "internalsupport_remarks";
    private static final String KEY_ISCONTINUOUSCONCRETEFLOOR = "iscontinuousconcretefloor";
    private static final String KEY_CONTINUOUSCONCRETEFLOOR_REMARKS = "continuousconcretefloor_remarks";
    private static final String KEY_ISCORRUGATEDGALVANIZEDROOF = "iscorrugatedgalvanizedroof";
    private static final String KEY_CORRUGATEDGALVANIZEDROOF_REMARKS = "corrugatedgalvanizedroof_remarks";
    private static final String KEY_ISTHENOHIGHGAUGESTEELDOORS = "isthenohighgaugesteeldoors";
    private static final String KEY_THENOHIGHGAUGESTEELDOORS_REMARKS = "thenohighgaugesteeldoors_remarks";
    private static final String KEY_ISHYGIENEANDCLEANLINESS = "ishygieneandcleanliness";
    private static final String KEY_HYGIENEANDCLEANLINESS_REMARKS = "hygieneandcleanliness_remarks";
    private static final String KEY_ISPERIMETERWALLANDTRUCKACCESSPAVEMENT = "isperimeterwallandtruckaccesspavement";
    private static final String KEY_PERIMETERWALLANDTRUCKACCESSPAVEMENT_REMARKS = "perimeterwallandtruckaccesspavement_remarks";
    private static final String KEY_ISLOADINGANDOFFLOADINGSHELTER = "isloadingandoffloadingshelter";
    private static final String KEY_LOADINGANDOFFLOADINGSHELTER_REMARKS = "loadingandoffloadingshelter_remarks";
    private static final String KEY_ISGUARDHOUSE = "isguardhouse";
    private static final String KEY_GUARDHOUSE_REMARKS = "guardhouse_remarks";
    private static final String KEY_ISFIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM = "isfireextinguishersmokedetectorsandalarmsystem";
    private static final String KEY_FIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM_REMARKS = "fireextinguishersmokedetectorsandalarmsystem_remarks";
    private static final String KEY_ISGUARDHOUSEANDSECURITYLIGHTS = "isguardhouseandsecuritylights";
    private static final String KEY_GUARDHOUSEANDSECURITYLIGHTS_REMARKS = "guardhouseandsecuritylights_remarks";
    private static final String KEY_ISWEIGHBRIDGESANDWEIGHINGSCALES = "isweighbridgesandweighingscales";
    private static final String KEY_WEIGHBRIDGESANDWEIGHINGSCALES_REMARKS = "weighbridgesandweighingscales_remarks";
    private static final String KEY_ISOFFICESWORKINGTELEPHONESANDINTERNETACCES = "isofficesworkingtelephonesandinternetacces";
    private static final String KEY_OFFICESWORKINGTELEPHONESANDINTERNETACCESS_REMARKS = "officesworkingtelephonesandinternetaccess_remarks";
    private static final String KEY_ISPROVISIONOFWASHFACILITIE = "isprovisionofwashfacilitie";
    private static final String KEY_PROVISIONOFWASHFACILITIES_REMARKS = "provisionofwashfacilities_remarks";
    private static final String KEY_ISBOOKSOFACCOUNT = "isbooksofaccount";
    private static final String KEY_BOOKSOFACCOUNTS_REMARKS = "booksofaccounts_remarks";
    private static final String KEY_ISRECALLANDTRACEABILITYPROCEDURE = "isrecallandtraceabilityprocedure";
    private static final String KEY_RECALLAND_TRACEABILITY_PROCEDURES_REMARKS = "recallandtraceabilityprocedures_remarks";


    public static final String CREATE_TABLE_FOOD_WAREHOUSE_INSPECCTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FOOD_WAREHOUSE_INSPECCTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FOOD_WAREHOUSE_INSPECCTION_ID + " TEXT UNIQUE,"
            + KEY_DOCUMENTNUMBER + " TEXT,"
            + KEY_DOCUMENTDATE + " TEXT,"
            + KEY_NAMEOFAPPLICANT + " TEXT,"
            + KEY_FOODWAREHOUSELICENCE + " TEXT,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_SSLEASEAGREEMENT + " TEXT,"
            + KEY_ISGRAINCLEANINGFACILITY + " TEXT,"
            + KEY_GRAINCLEANINGFACILITY_REMARKS + " TEXT,"
            + KEY_ISLOADINGCAPACITY + " TEXT,"
            + KEY_LOADINGCAPACITY_REMARKS + " TEXT,"
            + KEY_ISDRIER + " TEXT,"
            + KEY_DRIER_REMARKS + " TEXT,"
            + KEY_ISLABROOM + " TEXT,"
            + KEY_LABROOM_REMARKS + " TEXT,"
            + KEY_ISWALLANDVENTILATION + " TEXT,"
            + KEY_WALLANDVENTILATION_REMARKS + " TEXT,"
            + KEY_ISWATERPROOFPROVISIONS + " TEXT,"
            + KEY_WATERPROOFPROVISIONS_REMARKS + " TEXT,"
            + KEY_ISINTERNALSUPPORT + " TEXT,"
            + KEY_INTERNALSUPPORT_REMARKS + " TEXT,"
            + KEY_ISCONTINUOUSCONCRETEFLOOR + " TEXT,"
            + KEY_CONTINUOUSCONCRETEFLOOR_REMARKS + " TEXT,"
            + KEY_ISCORRUGATEDGALVANIZEDROOF + " TEXT,"
            + KEY_CORRUGATEDGALVANIZEDROOF_REMARKS + " TEXT,"
            + KEY_ISTHENOHIGHGAUGESTEELDOORS + " TEXT,"
            + KEY_THENOHIGHGAUGESTEELDOORS_REMARKS + " TEXT,"
            + KEY_ISHYGIENEANDCLEANLINESS + " TEXT,"
            + KEY_HYGIENEANDCLEANLINESS_REMARKS + " TEXT,"
            + KEY_ISPERIMETERWALLANDTRUCKACCESSPAVEMENT + " TEXT,"
            + KEY_PERIMETERWALLANDTRUCKACCESSPAVEMENT_REMARKS + " TEXT,"
            + KEY_ISLOADINGANDOFFLOADINGSHELTER + " TEXT,"
            + KEY_LOADINGANDOFFLOADINGSHELTER_REMARKS + " TEXT,"
            + KEY_ISGUARDHOUSE + " TEXT,"
            + KEY_GUARDHOUSE_REMARKS + " TEXT,"
            + KEY_ISFIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM + " TEXT,"
            + KEY_FIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM_REMARKS + " TEXT,"
            + KEY_ISGUARDHOUSEANDSECURITYLIGHTS + " TEXT,"
            + KEY_GUARDHOUSEANDSECURITYLIGHTS_REMARKS + " TEXT,"
            + KEY_ISWEIGHBRIDGESANDWEIGHINGSCALES + " TEXT,"
            + KEY_WEIGHBRIDGESANDWEIGHINGSCALES_REMARKS + " TEXT,"
            + KEY_ISOFFICESWORKINGTELEPHONESANDINTERNETACCES + " TEXT,"
            + KEY_OFFICESWORKINGTELEPHONESANDINTERNETACCESS_REMARKS + " TEXT,"
            + KEY_ISPROVISIONOFWASHFACILITIE + " TEXT,"
            + KEY_PROVISIONOFWASHFACILITIES_REMARKS + " TEXT,"
            + KEY_ISBOOKSOFACCOUNT + " TEXT,"
            + KEY_BOOKSOFACCOUNTS_REMARKS + " TEXT,"
            + KEY_ISRECALLANDTRACEABILITYPROCEDURE + " TEXT,"
            + KEY_RECALLAND_TRACEABILITY_PROCEDURES_REMARKS + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertFoodWareHouseInspection(FoodWareHouseInspection foodWareHouseInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, foodWareHouseInspection.getLocalID());
        values.put(KEY_FOOD_WAREHOUSE_INSPECCTION_ID, foodWareHouseInspection.getAFA_FD_FOOD_WAREHOUSE_Inspection_ID());
        values.put(KEY_DOCUMENTNUMBER, foodWareHouseInspection.getDocumentNumber());
        values.put(KEY_DOCUMENTDATE, foodWareHouseInspection.getDocumentDate());
        values.put(KEY_NAMEOFAPPLICANT, foodWareHouseInspection.getNameOfApplicant());
        values.put(KEY_FOODWAREHOUSELICENCE, foodWareHouseInspection.getFoodWarehouselicence());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        long foodWareHouseInspectionID = db.insertWithOnConflict(TABLE_FOOD_WAREHOUSE_INSPECCTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("foodWareHouseInspection: " + foodWareHouseInspectionID);

        closeDB();
        return foodWareHouseInspectionID;
        // insert row

    }


    public long UpdateFoodWareHouseInspection(FoodWarehouse foodWarehouse) {
        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();
        int result = 0;
        try {
            values.put(KEY_INSPECTION_DONE, "Y");
            values.put(KEY_SSLEASEAGREEMENT, foodWarehouse.getSsleaseagreement());
            values.put(KEY_ISGRAINCLEANINGFACILITY, foodWarehouse.getIsGraincleaningfacility());
            values.put(KEY_GRAINCLEANINGFACILITY_REMARKS ,foodWarehouse.getGraincleaningfacility_Remarks());
            values.put(KEY_ISLOADINGCAPACITY ,foodWarehouse.getIsLoadingCapacity());
            values.put(KEY_LOADINGCAPACITY_REMARKS ,foodWarehouse.getLoadingCapacity_Remarks());
            values.put(KEY_ISDRIER ,foodWarehouse.getIsdrier());
            values.put(KEY_DRIER_REMARKS ,foodWarehouse.getDrier_remarks());
            values.put(KEY_ISLABROOM ,foodWarehouse.getIslabroom());
            values.put(KEY_LABROOM_REMARKS ,foodWarehouse.getLabroom_Remarks());
            values.put(KEY_ISWALLANDVENTILATION ,foodWarehouse.getIsWallandVentilation());
            values.put(KEY_WALLANDVENTILATION_REMARKS ,foodWarehouse.getWallandVentilation_Remarks());
            values.put(KEY_ISWATERPROOFPROVISIONS ,foodWarehouse.getIsWaterproofProvisions());
            values.put(KEY_WATERPROOFPROVISIONS_REMARKS ,foodWarehouse.getWaterproofProvisions_Remarks());
            values.put(KEY_ISINTERNALSUPPORT ,foodWarehouse.getIsInternalSupport());
            values.put(KEY_INTERNALSUPPORT_REMARKS ,foodWarehouse.getInternalSupport_Remarks());
            values.put(KEY_ISCONTINUOUSCONCRETEFLOOR ,foodWarehouse.getIsContinuousConcretefloor());
            values.put(KEY_CONTINUOUSCONCRETEFLOOR_REMARKS ,foodWarehouse.getContinuousconcretefloor_Remarks());
            values.put(KEY_ISCORRUGATEDGALVANIZEDROOF ,foodWarehouse.getIsCorrugatedgalvanizedRoof());
            values.put(KEY_CORRUGATEDGALVANIZEDROOF_REMARKS ,foodWarehouse.getCorrugatedgalvanizedroof_Remarks());
            values.put(KEY_ISTHENOHIGHGAUGESTEELDOORS ,foodWarehouse.getIsTheNohighGaugesteeldoors());
            values.put(KEY_THENOHIGHGAUGESTEELDOORS_REMARKS ,foodWarehouse.getTheNohighgaugesteeldoors_Remarks());
            values.put(KEY_ISHYGIENEANDCLEANLINESS ,foodWarehouse.getIsHygieneAndcleanliness());
            values.put(KEY_HYGIENEANDCLEANLINESS_REMARKS ,foodWarehouse.getHygieneAndCleanliness_Remarks());
            values.put(KEY_ISPERIMETERWALLANDTRUCKACCESSPAVEMENT ,foodWarehouse.getIsPerimeterwallandtruckaccessPavement());
            values.put(KEY_PERIMETERWALLANDTRUCKACCESSPAVEMENT_REMARKS ,foodWarehouse.getPerimeterwallandtruckaccesspavement_Remarks());
            values.put(KEY_ISLOADINGANDOFFLOADINGSHELTER ,foodWarehouse.getIsLoadingandoffLoadingshelter());
            values.put(KEY_LOADINGANDOFFLOADINGSHELTER_REMARKS ,foodWarehouse.getLoadingandoffloadingshelter_Remarks());
            values.put(KEY_ISGUARDHOUSE ,foodWarehouse.getIsGuardHouse());
            values.put(KEY_GUARDHOUSE_REMARKS ,foodWarehouse.getGuardhouse_Remarks());
            values.put(KEY_ISFIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM ,foodWarehouse.getIsFireextinguishersmokedetectorsandAlarmsystem());
            values.put(KEY_FIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM_REMARKS ,foodWarehouse.getFireextinguishersmokedetectorsandalarmsystem_remarks());
            values.put(KEY_ISGUARDHOUSEANDSECURITYLIGHTS ,foodWarehouse.getIsGuardhouseandsecurityLights());
            values.put(KEY_GUARDHOUSEANDSECURITYLIGHTS_REMARKS ,foodWarehouse.getGuardhouseandsecuritylights_remarks());
            values.put(KEY_ISWEIGHBRIDGESANDWEIGHINGSCALES ,foodWarehouse.getIsWeighbridgesandweighingScales());
            values.put(KEY_WEIGHBRIDGESANDWEIGHINGSCALES_REMARKS ,foodWarehouse.getWeighbridgesandweighingscales_remarks());
            values.put(KEY_ISOFFICESWORKINGTELEPHONESANDINTERNETACCES ,foodWarehouse.getIsOfficesworkingtelephonesandinternetacces());
            values.put(KEY_OFFICESWORKINGTELEPHONESANDINTERNETACCESS_REMARKS ,foodWarehouse.getOfficesworkingtelephonesandinternetaccess_remarks());
            values.put(KEY_ISPROVISIONOFWASHFACILITIE ,foodWarehouse.getIsProvisionofWASHfacilitie());
            values.put(KEY_PROVISIONOFWASHFACILITIES_REMARKS ,foodWarehouse.getProvisionofWASHfacilities_remarks());
            values.put(KEY_ISBOOKSOFACCOUNT ,foodWarehouse.getIsBooksofaccount());
            values.put(KEY_BOOKSOFACCOUNTS_REMARKS ,foodWarehouse.getBooksofaccounts_remarks());
            values.put(KEY_ISRECALLANDTRACEABILITYPROCEDURE ,foodWarehouse.getIsRecallandtraceabilityprocedure());
            values.put(KEY_RECALLAND_TRACEABILITY_PROCEDURES_REMARKS ,foodWarehouse.getRecallandtraceabilityprocedures_remarks());
            values.put(KEY_OFFICER_RECOMMENDATION, foodWarehouse.getSsRecomendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, foodWarehouse.getReasonForThegiveReccomm());

            result = db.update(TABLE_FOOD_WAREHOUSE_INSPECCTION, values, "id =" + Integer.parseInt(foodWarehouse.getLocalID()), null);

            System.out.println("records updated " + result);

        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }

    public boolean updateFoodWareHouseInspectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        try
        {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FOOD_WAREHOUSE_INSPECCTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;

            }
            else
            {
                return false;
            }
        }
        finally
        {
            closeDB();
        }
    }


    public List<FoodWareHouseInspection> getFoodWareHouseInspectionList() {

        List<FoodWareHouseInspection> foodWareHouseInspectionlist = new ArrayList<FoodWareHouseInspection>();
        FoodWareHouseInspection td = new FoodWareHouseInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FOOD_WAREHOUSE_INSPECCTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking foodWareHouseInspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FoodWareHouseInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_FD_FOOD_WAREHOUSE_Inspection_ID(c.getString((c.getColumnIndex(KEY_FOOD_WAREHOUSE_INSPECCTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setFoodWarehouselicence(c.getString((c.getColumnIndex(KEY_FOODWAREHOUSELICENCE))));

                    // adding to itinerary list
                    foodWareHouseInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + foodWareHouseInspectionlist.size());
        return foodWareHouseInspectionlist;
    }


    public List<FoodWareHouseInspection> getFoodWareHouseInspectionDone() {

        List<FoodWareHouseInspection> foodWareHouseInspectionList = new ArrayList<FoodWareHouseInspection>();
        FoodWareHouseInspection td = new FoodWareHouseInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FOOD_WAREHOUSE_INSPECCTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'" + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                do {
                    td = new FoodWareHouseInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_FD_FOOD_WAREHOUSE_Inspection_ID(c.getString((c.getColumnIndex(KEY_FOOD_WAREHOUSE_INSPECCTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setFoodWarehouselicence(c.getString((c.getColumnIndex(KEY_FOODWAREHOUSELICENCE))));
                    td.setSsleaseagreement(c.getString((c.getColumnIndex(KEY_SSLEASEAGREEMENT))));
                    td.setIsGraincleaningfacility(c.getString((c.getColumnIndex(KEY_ISGRAINCLEANINGFACILITY))));
                    td.setGraincleaningfacility_Remarks(c.getString((c.getColumnIndex(KEY_GRAINCLEANINGFACILITY_REMARKS))));
                    td.setIsLoadingCapacity(c.getString((c.getColumnIndex(KEY_ISLOADINGCAPACITY))));
                    td.setLoadingCapacity_Remarks(c.getString((c.getColumnIndex(KEY_LOADINGCAPACITY_REMARKS))));
                    td.setIsdrier(c.getString((c.getColumnIndex(KEY_ISDRIER))));
                    td.setDrier_remarks(c.getString((c.getColumnIndex(KEY_DRIER_REMARKS))));
                    td.setIslabroom(c.getString((c.getColumnIndex(KEY_ISLABROOM))));
                    td.setLabroom_Remarks(c.getString((c.getColumnIndex(KEY_LABROOM_REMARKS))));
                    td.setIsWallandVentilation(c.getString((c.getColumnIndex(KEY_ISWALLANDVENTILATION))));
                    td.setWallandVentilation_Remarks(c.getString((c.getColumnIndex(KEY_WALLANDVENTILATION_REMARKS))));
                    td.setIsWaterproofProvisions(c.getString((c.getColumnIndex(KEY_ISWATERPROOFPROVISIONS))));
                    td.setWaterproofProvisions_Remarks(c.getString((c.getColumnIndex(KEY_WATERPROOFPROVISIONS_REMARKS))));
                    td.setIsInternalSupport(c.getString((c.getColumnIndex(KEY_ISINTERNALSUPPORT))));
                    td.setInternalSupport_Remarks(c.getString((c.getColumnIndex(KEY_INTERNALSUPPORT_REMARKS))));
                    td.setIsContinuousConcretefloor(c.getString((c.getColumnIndex(KEY_ISCONTINUOUSCONCRETEFLOOR))));
                    td.setContinuousconcretefloor_Remarks(c.getString((c.getColumnIndex(KEY_CONTINUOUSCONCRETEFLOOR_REMARKS))));
                    td.setIsCorrugatedgalvanizedRoof(c.getString((c.getColumnIndex(KEY_ISCORRUGATEDGALVANIZEDROOF))));
                    td.setCorrugatedgalvanizedroof_Remarks(c.getString((c.getColumnIndex(KEY_CORRUGATEDGALVANIZEDROOF_REMARKS))));
                    td.setIsTheNohighGaugesteeldoors(c.getString((c.getColumnIndex(KEY_ISTHENOHIGHGAUGESTEELDOORS))));
                    td.setTheNohighgaugesteeldoors_Remarks(c.getString((c.getColumnIndex(KEY_THENOHIGHGAUGESTEELDOORS_REMARKS))));
                    td.setIsHygieneAndcleanliness(c.getString((c.getColumnIndex(KEY_ISHYGIENEANDCLEANLINESS))));
                    td.setHygieneAndCleanliness_Remarks(c.getString((c.getColumnIndex(KEY_HYGIENEANDCLEANLINESS_REMARKS))));
                    td.setIsPerimeterwallandtruckaccessPavement(c.getString((c.getColumnIndex(KEY_ISPERIMETERWALLANDTRUCKACCESSPAVEMENT))));
                    td.setPerimeterwallandtruckaccesspavement_Remarks(c.getString((c.getColumnIndex(KEY_PERIMETERWALLANDTRUCKACCESSPAVEMENT_REMARKS))));
                    td.setIsLoadingandoffLoadingshelter(c.getString((c.getColumnIndex(KEY_ISLOADINGANDOFFLOADINGSHELTER))));
                    td.setLoadingandoffloadingshelter_Remarks(c.getString((c.getColumnIndex(KEY_LOADINGANDOFFLOADINGSHELTER_REMARKS))));
                    td.setIsGuardHouse(c.getString((c.getColumnIndex(KEY_ISGUARDHOUSE))));
                    td.setGuardhouse_Remarks(c.getString((c.getColumnIndex(KEY_GUARDHOUSE_REMARKS))));
                    td.setIsFireextinguishersmokedetectorsandAlarmsystem(c.getString((c.getColumnIndex(KEY_ISFIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM))));
                    td.setFireextinguishersmokedetectorsandalarmsystem_remarks(c.getString((c.getColumnIndex(KEY_FIREEXTINGUISHERSMOKEDETECTORSANDALARMSYSTEM_REMARKS))));
                    td.setIsGuardhouseandsecurityLights(c.getString((c.getColumnIndex(KEY_ISGUARDHOUSEANDSECURITYLIGHTS))));
                    td.setGuardhouseandsecuritylights_remarks(c.getString((c.getColumnIndex(KEY_GUARDHOUSEANDSECURITYLIGHTS_REMARKS))));
                    td.setIsWeighbridgesandweighingScales(c.getString((c.getColumnIndex(KEY_ISWEIGHBRIDGESANDWEIGHINGSCALES))));
                    td.setWeighbridgesandweighingscales_remarks(c.getString((c.getColumnIndex(KEY_WEIGHBRIDGESANDWEIGHINGSCALES_REMARKS))));
                    td.setIsOfficesworkingtelephonesandinternetacces(c.getString((c.getColumnIndex(KEY_ISOFFICESWORKINGTELEPHONESANDINTERNETACCES))));
                    td.setOfficesworkingtelephonesandinternetaccess_remarks(c.getString((c.getColumnIndex(KEY_OFFICESWORKINGTELEPHONESANDINTERNETACCESS_REMARKS))));
                    td.setIsProvisionofWASHfacilitie(c.getString((c.getColumnIndex(KEY_ISPROVISIONOFWASHFACILITIE))));
                    td.setProvisionofWASHfacilities_remarks(c.getString((c.getColumnIndex(KEY_PROVISIONOFWASHFACILITIES_REMARKS))));
                    td.setIsBooksofaccount(c.getString((c.getColumnIndex(KEY_ISBOOKSOFACCOUNT))));
                    td.setBooksofaccounts_remarks(c.getString((c.getColumnIndex(KEY_BOOKSOFACCOUNTS_REMARKS))));
                    td.setIsRecallandtraceabilityprocedure(c.getString((c.getColumnIndex(KEY_ISRECALLANDTRACEABILITYPROCEDURE))));
                    td.setRecallandtraceabilityprocedures_remarks(c.getString((c.getColumnIndex(KEY_RECALLAND_TRACEABILITY_PROCEDURES_REMARKS))));
                    td.setSsRecomendation(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION))));
                    td.setReasonForThegiveReccomm(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS))));

                    foodWareHouseInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            int count =0;
            if (c != null)
                if(c.getCount()>0){
                    c.moveToFirst();
                    count =c.getInt(0);
                }
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + foodWareHouseInspectionList.size());
        return foodWareHouseInspectionList;
    }

    public void deletefoodWareHouseInspectionlist() {

        String deleteQuery = "DELETE FROM " + TABLE_FOOD_WAREHOUSE_INSPECCTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }


    //food crop inspection
    /*food inspection*/
    public static final String TABLE_FOOD_CROP_INSPECCTION = "food_crop_export_inspection";
    private static final String KEY_FOOD_CROP_INSPECCTION_ID = "food_processing_inspection_id";
    private static final String KEY_FOOD_CROP_LICENCE = "Licene_number";
    private static final String KEY_PACKAGINGANDLABELLING="packagingandlabelling";
    private static final String KEY_CONFORMITYSTANDARDS="conformityofstandards";
    private static final String KEY_SOURCEOFPRODUCE="source_of_produce";

    public static final String CREATE_TABLE_FOOD_CROP_INSPECCTION = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_FOOD_CROP_INSPECCTION + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_FOOD_CROP_INSPECCTION_ID + " TEXT UNIQUE,"
            + KEY_INSPECTION_DONE + " TEXT,"
            + KEY_DOCUMENTNUMBER + " TEXT,"
            + KEY_DOCUMENTDATE + " TEXT,"
            + KEY_NAMEOFAPPLICANT + " TEXT,"
            + KEY_FOOD_CROP_LICENCE + " TEXT,"
            + KEY_PACKAGINGANDLABELLING + " TEXT,"
            + KEY_CONFORMITYSTANDARDS + " TEXT,"
            + KEY_SOURCEOFPRODUCE + " TEXT,"
            + KEY_OFFICER_RECOMMENDATION + " TEXT ,"
            + KEY_OFFICER_RECOMMENDATION_REMARKS + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";


    public long insertFOodCropInspection(FOodCropInspection fOodCropInspection) {

        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_ID, fOodCropInspection.getLocalID());
        values.put(KEY_FOOD_CROP_INSPECCTION_ID, fOodCropInspection.getAFA_FD_FOOD_Crop_Inspection_ID());
        values.put(KEY_DOCUMENTNUMBER, fOodCropInspection.getDocumentNumber());
        values.put(KEY_DOCUMENTDATE, fOodCropInspection.getDocumentDate());
        values.put(KEY_NAMEOFAPPLICANT, fOodCropInspection.getNameOfApplicant());
        values.put(KEY_FOOD_CROP_LICENCE, fOodCropInspection.getFoodCropLicence());
        values.put(KEY_INSPECTION_DONE, "N");
        values.put(KEY_UPLOADED, "PENDING");

        long foodProcessingInpectionID = db.insertWithOnConflict(TABLE_FOOD_CROP_INSPECCTION, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        System.out.println("foodProcessingInpection: " + foodProcessingInpectionID);

        closeDB();
        return foodProcessingInpectionID;
        // insert row

    }


    public boolean updatefoodCropInpectionSent(String localID, String serverRecordID) {
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");

            int result = db.update(TABLE_FOOD_CROP_INSPECCTION, values, KEY_ID + " =" + localID, null);

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            closeDB();
            //db.endTransaction();
            //  db.close();
        }
    }

    public long UpdatefoodCropInpection(FoodCrop foodCrop) {

        db = dbHelper.getReadableDatabase();
        ContentValues values = new ContentValues();

        int result = 0;
        try {

            System.out.println("packagingandlabelling="+ foodCrop.getPackagingAndLabelling());
            System.out.println("officer_recommendation="+ foodCrop.getRecommendation());
            System.out.println("officer_recommendation_remarks="+ foodCrop.getRecommendationRemarks());
            values.put(KEY_INSPECTION_DONE, "Y");
          //  values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_PACKAGINGANDLABELLING, foodCrop.getPackagingAndLabelling());
            values.put(KEY_CONFORMITYSTANDARDS, foodCrop.getConformityStandards());
            values.put(KEY_SOURCEOFPRODUCE, foodCrop.getSourceOfProduce());
            values.put(KEY_OFFICER_RECOMMENDATION, foodCrop.getRecommendation());
            values.put(KEY_OFFICER_RECOMMENDATION_REMARKS, foodCrop.getRecommendationRemarks());

            result = db.update(TABLE_FOOD_CROP_INSPECCTION, values, "id =" + Integer.parseInt(foodCrop.getLocalID()), null);

            System.out.println("results is " + result);
        } finally {
            if (result == 0) {
                // db.setTransactionSuccessful();
            }
//        db.endTransaction();
            closeDB();
        }
        return result;
    }


    public List<FOodCropInspection> getFOodCropInspectionList() {

        List<FOodCropInspection> fOodCropInspectionlist = new ArrayList<FOodCropInspection>();
        FOodCropInspection td = new FOodCropInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FOOD_CROP_INSPECCTION + " where " + KEY_INSPECTION_DONE + " =" + "'N'";

        //System.out.println(selectQuery.toString());
        System.out.println("Picking FOodCropInspection data from the db");

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FOodCropInspection();

                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_FD_FOOD_Crop_Inspection_ID(c.getString((c.getColumnIndex(KEY_FOOD_CROP_INSPECCTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setFoodCropLicence(c.getString((c.getColumnIndex(KEY_FOOD_CROP_LICENCE))));

                    // adding to itinerary list
                    fOodCropInspectionlist.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("picking data from the db" + fOodCropInspectionlist.size());
        return fOodCropInspectionlist;
    }


    public List<FOodCropInspection> getFOodCropInspectionDone() {

        List<FOodCropInspection> fOodCropInspectionList = new ArrayList<FOodCropInspection>();
        FOodCropInspection td = new FOodCropInspection();
        // td.setName("- Required -");

        String selectQuery = "SELECT  * FROM " + TABLE_FOOD_CROP_INSPECCTION + " where " + KEY_INSPECTION_DONE + " =" + "'Y'"
                + " AND " + KEY_UPLOADED + " = 'PENDING'";

        db = dbHelper.getReadableDatabase();

        Cursor c = db.rawQuery(selectQuery, null);
        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    td = new FOodCropInspection();
                    td.setLocalID(c.getString((c.getColumnIndex(KEY_ID))));
                    td.setAFA_FD_FOOD_Crop_Inspection_ID(c.getString((c.getColumnIndex(KEY_FOOD_CROP_INSPECCTION_ID))));
                    td.setDocumentNumber(c.getString((c.getColumnIndex(KEY_DOCUMENTNUMBER))));
                    td.setDocumentDate(c.getString((c.getColumnIndex(KEY_DOCUMENTDATE))));
                    td.setNameOfApplicant(c.getString((c.getColumnIndex(KEY_NAME_OFAPPLICANT))));
                    td.setFoodCropLicence(c.getString((c.getColumnIndex(KEY_FOOD_CROP_LICENCE))));
                    td.setPackagingAndLabelling(c.getString((c.getColumnIndex(KEY_PACKAGINGANDLABELLING))));
                    td.setConformityStandards(c.getString((c.getColumnIndex(KEY_CONFORMITYSTANDARDS))));
                    td.setSourceOfProduce(c.getString((c.getColumnIndex(KEY_SOURCEOFPRODUCE))));
                    td.setRecommendation(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION))));
                    td.setRecommendationRemarks(c.getString((c.getColumnIndex(KEY_OFFICER_RECOMMENDATION_REMARKS))));
                    fOodCropInspectionList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            // closeDB();

            // RIGHT: ensure resource is always recovered
        }
        System.out.println("Total number of records to be saved=============" + fOodCropInspectionList.size());
        return fOodCropInspectionList;
    }

    public void deleteFOodCropInspectionList() {

        String deleteQuery = "DELETE FROM " + TABLE_FOOD_CROP_INSPECCTION;

        db = dbHelper.getReadableDatabase();

        db.execSQL(deleteQuery);

        closeDB();


    }


    //coffee milller lice application
    /* END OF HORTICULTURE LICENCE FARM INSPECTION*/
    // ------------------------ Start NOCD ----------------//

    public static final String TABLE_MILLING_TARIFFS = "coffee_miller_Milling_tariffs";
    private static final String KEY_MILLING_TARIFFS_ID = "milling_tariffs_id";
    private static final String KEY_TYPE_OF_SERVICES = "type_of_service";
    private static final String KEY_CURRENY = "currency";
    private static final String KEY_JUSTIFICATION = "justification";

    public static final String CREATE_TABLE_MILLING_TARIFFS = "CREATE TABLE  IF NOT EXISTS "
            + TABLE_MILLING_TARIFFS + "(" + KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT,"
            + KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID + " TEXT ,"
            + KEY_TYPE_OF_SERVICES + " TEXT ,"
            + KEY_CURRENY + " TEXT ,"
            + KEY_JUSTIFICATION + " TEXT ,"
            + KEY_SERVER_ID + " TEXT ,"
            + KEY_INSPECTION_DONE + " TEXT ,"
            + KEY_CREATED_AT + " DATETIME,"
            + KEY_UPLOADED + " TEXT" + ")";

    public long insertMillingtariffs(String milling_id, String typeofservice, String currency, String justification) {
        db = dbHelper.getReadableDatabase();

        ContentValues values = new ContentValues();

        values.put(KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID, milling_id);
        values.put(KEY_TYPE_OF_SERVICES, String.valueOf(typeofservice));
        values.put(KEY_CURRENY, String.valueOf(currency));
        values.put(KEY_JUSTIFICATION, String.valueOf(justification));
        values.put(KEY_UPLOADED, "PENDING");
        values.put(KEY_CREATED_AT, getDateTime());

        // insert row
        long millingid = db.insertWithOnConflict(TABLE_MILLING_TARIFFS, null, values, SQLiteDatabase.CONFLICT_REPLACE);
        closeDB();

        return millingid;
    }

    public List<CoffeeMillingTariffs> getAllUnSentCoffeeMillingTariffs() {
        List<CoffeeMillingTariffs> coffeeMillingTariffsList = new ArrayList<CoffeeMillingTariffs>();
        String selectQuery = "SELECT  * FROM " + TABLE_MILLING_TARIFFS + " WHERE " + KEY_UPLOADED + " = 'PENDING'";

        System.out.println(selectQuery);

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        try {
            if (c.moveToFirst()) {
                do {
                    CoffeeMillingTariffs td = new CoffeeMillingTariffs();
                    td.setServiceType(c.getString((c.getColumnIndex(KEY_TYPE_OF_SERVICES))));
                    td.setCurrency((c.getString((c.getColumnIndex(KEY_CURRENY)))));
                    td.setJustification(c.getString((c.getColumnIndex(KEY_JUSTIFICATION))));
                    td.setMilling_id(c.getString(c.getColumnIndex(KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID)));
                    td.setLocalID(c.getString(c.getColumnIndex(KEY_ID)));

                    // adding to itinerary list
                    coffeeMillingTariffsList.add(td);
                } while (c.moveToNext());
            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
        }
        return coffeeMillingTariffsList;
    }

    public CoffeeMillingTariffs getSentMillingID(String millingtariffsID) {
        List<CoffeeMillingTariffs> coffeeMillingTariffsList = new ArrayList<CoffeeMillingTariffs>();
        String selectQuery = "SELECT  * FROM " + TABLE_MILLING_TARIFFS + " WHERE " + KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID + " =" + millingtariffsID;

        db = dbHelper.getReadableDatabase();
        Cursor c = db.rawQuery(selectQuery, null);
        CoffeeMillingTariffs td = new CoffeeMillingTariffs();
        // looping through all rows and adding to list

        try {
            if (c.moveToFirst()) {
                td.setServiceType(c.getString((c.getColumnIndex(KEY_TYPE_OF_SERVICES))));
                td.setCurrency((c.getString((c.getColumnIndex(KEY_CURRENY)))));
                td.setJustification(c.getString((c.getColumnIndex(KEY_JUSTIFICATION))));
                td.setMilling_id(c.getString(c.getColumnIndex(KEY_COFFEE_MILLER_LICENSE_APPLICATION_ID)));
                td.setLocalID(c.getString(c.getColumnIndex(KEY_ID)));

            }
        } finally {
            closeDB();
            if (c != null)
                c.close();
            //closeDB();
            // RIGHT: ensure resource is always recovered
        }

        return td;
    }

    public boolean updateMillingTariffsSent(String tableName, String localID, String serverRecordID) {

        System.out.println(tableName + " " + serverRecordID);
        db = dbHelper.getReadableDatabase();
        // db.beginTransaction();
        try {
            ContentValues values = new ContentValues();

            values.put(KEY_UPLOADED, "SENT");
            values.put(KEY_SERVER_ID, serverRecordID);

            // updating row
            int result = db.update(tableName, values, KEY_ID + " = ?",
                    new String[]{String.valueOf(localID)});

            System.out.println("Total records to be sent " + result);
            if (result == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        } finally {
            // db.endTransaction();
            closeDB();
        }
    }

}
